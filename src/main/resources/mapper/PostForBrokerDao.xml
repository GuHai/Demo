<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.yskj.dao.PostForBrokerDao" ><!-- 查询字段 --><sql id="columnList" >	pfb.id,	 pfb.commission, pfb.attention, pfb.unit, pfb.postID, pfb.createBy, pfb.createTime, pfb.updateBy, pfb.updateTime, pfb.version, pfb.isDeleted</sql><!--通过id集合in查询--><sql id="inClause">    <if test="column!=null">        <if test="ids==null">            and 1=0        </if>        <if test="ids!=null">            <if test="ids.size>0">                and  pfb.${column} in                <foreach item="items" index="index" collection="ids" open="(" separator="," close=")">                    #{items}                </foreach>            </if>            <if test="ids.size==0">                and 1=0            </if>        </if>    </if></sql><!-- 查询条件 --><sql id="whereClause">where 1=1<trim  suffixOverrides="," >	<if test="condition.id != null" >	    and pfb.id = #{condition.id}	</if>	<if test="condition.commission != null" >and  pfb.commission = #{condition.commission}</if><if test="condition.attention != null" >and  pfb.attention = #{condition.attention}</if><if test="condition.unit != null" >and  pfb.unit = #{condition.unit}</if><if test="condition.postID != null" >and  pfb.postID = #{condition.postID}</if><if test="condition.createBy != null" >and  pfb.createBy = #{condition.createBy}</if><if test="condition.createTime != null" >and  pfb.createTime = #{condition.createTime}</if><if test="condition.updateBy != null" >and  pfb.updateBy = #{condition.updateBy}</if><if test="condition.updateTime != null" >and  pfb.updateTime = #{condition.updateTime}</if><if test="condition.version != null" >and  pfb.version = #{condition.version}</if><if test="condition.isDeleted != null" >and  pfb.isDeleted = #{condition.isDeleted}</if></trim><include refid="inClause"/></sql><!-- 模糊查询条件 --><sql id="whereLikeClause">where 1=1<trim  suffixOverrides="," >	<if test="condition.id != null" >	    and pfb.id = #{condition.id}	</if>													 			<if test="condition.commission != null" >and  UPPER(pfb.commission) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.commission}),'%'))</if><if test="condition.attention != null" >and  UPPER(pfb.attention) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.attention}),'%'))</if><if test="condition.unit != null" >and  UPPER(pfb.unit) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.unit}),'%'))</if><if test="condition.postID != null" >and  UPPER(pfb.postID) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.postID}),'%'))</if><if test="condition.createBy != null" >and  UPPER(pfb.createBy) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.createBy}),'%'))</if><if test="condition.createTime != null" >and  UPPER(pfb.createTime) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.createTime}),'%'))</if><if test="condition.updateBy != null" >and  UPPER(pfb.updateBy) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.updateBy}),'%'))</if><if test="condition.updateTime != null" >and  UPPER(pfb.updateTime) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.updateTime}),'%'))</if><if test="condition.version != null" >and  UPPER(pfb.version) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.version}),'%'))</if><if test="condition.isDeleted != null" >and  UPPER(pfb.isDeleted) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.isDeleted}),'%'))</if></trim><include refid="inClause"/></sql><!-- 插入记录 --><insert id="add"  >  insert into post_for_broker (id,commission,attention,unit,postID,createBy,createTime,updateBy,updateTime,version,isDeleted)  values(#{id,jdbcType=VARCHAR},#{commission},#{attention},#{unit},#{postID},#{createBy},#{createTime},#{updateBy},#{updateTime},#{version},#{isDeleted})</insert><!-- 修改记录，只修改只不为空的字段 --><update id="update" >	update post_for_broker set	<trim  suffixOverrides="," >	<if test="commission != null ">commission=#{commission},</if><if test="attention != null ">attention=#{attention},</if><if test="unit != null ">unit=#{unit},</if><if test="postID != null ">postID=#{postID},</if><if test="createBy != null ">createBy=#{createBy},</if><if test="createTime != null ">createTime=#{createTime},</if><if test="updateBy != null ">updateBy=#{updateBy},</if><if test="updateTime != null ">updateTime=#{updateTime},</if><if test="version != null ">version=#{version},</if><if test="isDeleted != null ">isDeleted=#{isDeleted},</if>	</trim> where id=#{id} and version = #{version}-1</update><!-- 删除记录 --><delete id="del" >	delete from post_for_broker where id = #{id}</delete><!-- 根据id查询  --><select id="get"   resultType="PostForBroker"  parameterType="String">	select <include refid="columnList" /> 	from post_for_broker  pfb	where  pfb.id = #{id}  and pfb.isDeleted = false</select><!-- 列表总数--><select id="count" resultType="java.lang.Long" >	select count(1) 	from post_for_broker  pfb	<include refid="whereClause"/></select><!-- 查询page --><select id="findPage" resultType="PostForBroker" >	select 	<include refid="columnList"/>	from post_for_broker pfb	<include refid="whereClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 模糊查询page --><select id="findLikePage" resultType="PostForBroker" >	select 	<include refid="columnList"/>	from post_for_broker pfb	<include refid="whereLikeClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询列表list --><select id="findList" resultType="PostForBroker" >	select	<include refid="columnList"/>	from post_for_broker pfb	<include refid="whereClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!--模糊查询list--><select id="findLikeList" resultType="PostForBroker" >	select	<include refid="columnList"/>	from post_for_broker pfb	<include refid="whereLikeClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询符合条件的数据的id集合 --><select id="findIds" resultType="String">	select pfb.${idsColumn}	from post_for_broker pfb    <include refid="whereClause"/>    <if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询符合模糊条件的数据的id集合 --><select id="findLikeIds" resultType="String">	select pfb.${idsColumn}	from post_for_broker pfb    <include refid="whereLikeClause"/>    <if test="orderByClause!=null">${orderByClause}</if></select><!-- 获取一个对象通过非id --><select id="one" resultType="PostForBroker" >     select    <include refid="columnList"/>     from post_for_broker pfb    <include refid="whereClause"/>    <if test="orderByClause!=null">${orderByClause}</if>    limit 0,1</select><!--如果你想返回一个HashMap 就实现这个select标签--><select id="queryHashMap" resultType="java.util.HashMap"  parameterType="Object"></select>	<!--级联查询-->	<sql id="detailList">		p.id as 'id',		p.version as 'version',p.commission as 'commission',p.attention as 'attention',p.unit as 'unit',p.postID as 'postID',		post.id as 'post.id',		post.version as 'post.version',post.title as 'post.title',post.compID as 'post.compID',		company.id as 'post.company.id',		company.version as 'post.company.version',company.company as 'post.company.company',company.addrID as 'post.company.addrID',post.addrID as 'post.addrID',		workPlace.id as 'post.workPlace.id',		workPlace.version as 'post.workPlace.version',workPlace.cityID as 'post.workPlace.cityID',workPlace.detailedAddress as 'post.workPlace.detailedAddress',workPlace.longitude as 'post.workPlace.longitude',workPlace.latitude as 'post.workPlace.latitude',		city.id as 'post.workPlace.city.id',		city.version as 'post.workPlace.city.version',city.pinyin as 'post.workPlace.city.pinyin',city.cityName as 'post.workPlace.city.cityName',city.zipCode as 'post.workPlace.city.zipCode',city.openState as 'post.workPlace.city.openState',city.cityType as 'post.workPlace.city.cityType',city.isHot as 'post.workPlace.city.isHot',city.parentID as 'post.workPlace.city.parentID',city.mergerName as 'post.workPlace.city.mergerName',city.cityCode as 'post.workPlace.city.cityCode',city.lng as 'post.workPlace.city.lng',city.lat as 'post.workPlace.city.lat',workPlace.geohash as 'post.workPlace.geohash',post.minSalary as 'post.minSalary',post.maxSalary as 'post.maxSalary',post.benefitsLabel as 'post.benefitsLabel',post.workLabel as 'post.workLabel',post.otherLabel as 'post.otherLabel',post.recruits as 'post.recruits',post.descript as 'post.descript',post.arrange as 'post.arrange',post.status as 'post.status',post.phone as 'post.phone',post.contacts as 'post.contacts',post.minAge as 'post.minAge',post.maxAge as 'post.maxAge',post.postType as 'post.postType'	</sql>	<!--Company映射-->	<resultMap id="CompanyMap" type="Company">		<id property="id" column="post.company.id" />		<result property="version" column="post.company.version" />		<result property="company" column="post.company.company" />		<result property="addrID" column="post.company.addrID" />	</resultMap>	<!--City映射-->	<resultMap id="CityMap" type="City">		<id property="id" column="post.workPlace.city.id" />		<result property="version" column="post.workPlace.city.version" />		<result property="pinyin" column="post.workPlace.city.pinyin" />		<result property="cityName" column="post.workPlace.city.cityName" />		<result property="zipCode" column="post.workPlace.city.zipCode" />		<result property="openState" column="post.workPlace.city.openState" />		<result property="cityType" column="post.workPlace.city.cityType" />		<result property="isHot" column="post.workPlace.city.isHot" />		<result property="parentID" column="post.workPlace.city.parentID" />		<result property="mergerName" column="post.workPlace.city.mergerName" />		<result property="cityCode" column="post.workPlace.city.cityCode" />		<result property="lng" column="post.workPlace.city.lng" />		<result property="lat" column="post.workPlace.city.lat" />	</resultMap>	<!--Localtioninfo映射-->	<resultMap id="LocaltioninfoMap" type="Localtioninfo">		<id property="id" column="post.workPlace.id" />		<result property="version" column="post.workPlace.version" />		<result property="cityID" column="post.workPlace.cityID" />		<result property="detailedAddress" column="post.workPlace.detailedAddress" />		<result property="longitude" column="post.workPlace.longitude" />		<result property="latitude" column="post.workPlace.latitude" />		<result property="geohash" column="post.workPlace.geohash" />		<association property="city"  javaType="City" resultMap="CityMap"/>	</resultMap>	<!--Post映射-->	<resultMap id="PostMap" type="Post">		<id property="id" column="post.id" />		<result property="version" column="post.version" />		<result property="title" column="post.title" />		<result property="compID" column="post.compID" />		<result property="addrID" column="post.addrID" />		<result property="minSalary" column="post.minSalary" />		<result property="maxSalary" column="post.maxSalary" />		<result property="benefitsLabel" column="post.benefitsLabel" />		<result property="workLabel" column="post.workLabel" />		<result property="otherLabel" column="post.otherLabel" />		<result property="recruits" column="post.recruits" />		<result property="descript" column="post.descript" />		<result property="arrange" column="post.arrange" />		<result property="status" column="post.status" />		<result property="phone" column="post.phone" />		<result property="contacts" column="post.contacts" />		<result property="minAge" column="post.minAge" />		<result property="maxAge" column="post.maxAge" />		<result property="postType" column="post.postType" />		<association property="workPlace"  javaType="Localtioninfo" resultMap="LocaltioninfoMap"/>		<association property="company"  javaType="Company" resultMap="CompanyMap"/>	</resultMap>	<!--PostForBroker映射-->	<resultMap id="PostForBrokerMap" type="PostForBroker">		<id property="id" column="id" />		<result property="version" column="version" />		<result property="commission" column="commission" />		<result property="attention" column="attention" />		<result property="unit" column="unit" />		<result property="postID" column="postID" />		<association property="post"  javaType="Post" resultMap="PostMap"/>	</resultMap>	<!--对象的多级映射 mapList mapPage mapOne-->	<select id="getPostForBrokerInfoListPage" resultMap="PostForBrokerMap" >		select		<include refid="detailList"/>		from  post_for_broker p		left join post post on p.postID = post.id		left join post_company company on post.compID = company.id		left join localtioninfo workPlace on post.addrID = workPlace.id		left join city city on workPlace.cityID = city.id		<include refid="whereClause"/>		AND post.status = TRUE		<if test="#{condition.company!=null}">			AND (post.title LIKE CONCAT(CONCAT('%',#{condition.company}),'%')			OR company.company LIKE CONCAT(CONCAT('%',#{condition.company}),'%'))		</if>		<if test="orderByClause!=null">${orderByClause}</if>	</select>	<select id="getPostForBrokerFullInfo" resultMap="PostForBrokerMap" >		select		<include refid="detailList"/>		from  post_for_broker p		left join post post on p.postID = post.id		left join post_company company on post.compID = company.id		left join localtioninfo workPlace on post.addrID = workPlace.id		left join city city on workPlace.cityID = city.id		<include refid="whereClause"/>		AND p.id = #{id}		<if test="orderByClause!=null">${orderByClause}</if>	</select></mapper>