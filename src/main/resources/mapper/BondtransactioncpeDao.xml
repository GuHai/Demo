<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.yskj.dao.BondtransactioncpeDao" ><!-- 查询字段 --><sql id="columnList" >	b.id,b.cpeID,	 b.orderNumber, b.userID, b.positionID, b.payerType, b.wxorderID, b.premiumMoney, b.createTime, b.updateTime, b.version, b.isDeleted, b.createBy, b.updateBy, b.isReturn,p.title</sql><!--通过id集合in查询--><sql id="inClause">    <if test="column!=null">        <if test="ids==null">            and 1=0        </if>        <if test="ids!=null">            <if test="ids.size>0">                and  b.${column} in                <foreach item="items" index="index" collection="ids" open="(" separator="," close=")">                    #{items}                </foreach>            </if>            <if test="ids.size==0">                and 1=0            </if>        </if>    </if></sql><!-- 查询条件 --><sql id="whereClause">where 1=1<trim  suffixOverrides="," >	<if test="condition.id != null" >	    and b.id = #{condition.id}	</if>	<if test="condition.orderNumber != null" >and  b.orderNumber = #{condition.orderNumber}</if><if test="condition.userID != null" >and  b.userID = #{condition.userID}</if><if test="condition.positionID != null" >and  b.positionID = #{condition.positionID}</if><if test="condition.payerType != null" >and  b.payerType = #{condition.payerType}</if><if test="condition.wxorderID != null" >and  b.wxorderID = #{condition.wxorderID}</if><if test="condition.premiumMoney != null" >and  b.premiumMoney = #{condition.premiumMoney}</if><if test="condition.createTime != null" >and  b.createTime = #{condition.createTime}</if><if test="condition.updateTime != null" >and  b.updateTime = #{condition.updateTime}</if><if test="condition.version != null" >and  b.version = #{condition.version}</if><if test="condition.isDeleted != null" >and  b.isDeleted = #{condition.isDeleted}</if><if test="condition.createBy != null" >and  b.createBy = #{condition.createBy}</if><if test="condition.updateBy != null" >and  b.updateBy = #{condition.updateBy}</if><if test="condition.isReturn != null" >and  b.isReturn = #{condition.isReturn}</if></trim><include refid="inClause"/></sql><!-- 模糊查询条件 --><sql id="whereLikeClause">where 1=1<trim  suffixOverrides="," >	<if test="condition.id != null" >	    and b.id = #{condition.id}	</if>													 			<if test="condition.orderNumber != null" >and  UPPER(b.orderNumber) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.orderNumber}),'%'))</if><if test="condition.userID != null" >and  UPPER(b.userID) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.userID}),'%'))</if><if test="condition.positionID != null" >and  UPPER(b.positionID) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.positionID}),'%'))</if><if test="condition.payerType != null" >and  UPPER(b.payerType) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.payerType}),'%'))</if><if test="condition.wxorderID != null" >and  UPPER(b.wxorderID) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.wxorderID}),'%'))</if><if test="condition.premiumMoney != null" >and  UPPER(b.premiumMoney) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.premiumMoney}),'%'))</if><if test="condition.createTime != null" >and  UPPER(b.createTime) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.createTime}),'%'))</if><if test="condition.updateTime != null" >and  UPPER(b.updateTime) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.updateTime}),'%'))</if><if test="condition.version != null" >and  UPPER(b.version) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.version}),'%'))</if><if test="condition.isDeleted != null" >and  UPPER(b.isDeleted) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.isDeleted}),'%'))</if><if test="condition.createBy != null" >and  UPPER(b.createBy) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.createBy}),'%'))</if><if test="condition.updateBy != null" >and  UPPER(b.updateBy) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.updateBy}),'%'))</if><if test="condition.isReturn != null" >and  UPPER(b.isReturn) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.isReturn}),'%'))</if></trim><include refid="inClause"/></sql><!-- 插入记录 --><insert id="add"  >  insert into bondtransactioncpe (id,cpeID,orderNumber,userID,positionID,payerType,wxorderID,premiumMoney,createTime,updateTime,version,isDeleted,createBy,updateBy,isReturn)  values(#{id,jdbcType=VARCHAR},#{cpeID},#{orderNumber},#{userID},#{positionID},#{payerType},#{wxorderID},#{premiumMoney},#{createTime},#{updateTime},#{version},#{isDeleted},#{createBy},#{updateBy},#{isReturn})</insert><!-- 修改记录，只修改只不为空的字段 --><update id="update" >	update bondtransactioncpe set	<trim  suffixOverrides="," >	<if test="orderNumber != null ">orderNumber=#{orderNumber},</if><if test="userID != null ">userID=#{userID},</if><if test="positionID != null ">positionID=#{positionID},</if><if test="payerType != null ">payerType=#{payerType},</if><if test="wxorderID != null ">wxorderID=#{wxorderID},</if><if test="premiumMoney != null ">premiumMoney=#{premiumMoney},</if><if test="createTime != null ">createTime=#{createTime},</if><if test="updateTime != null ">updateTime=#{updateTime},</if><if test="version != null ">version=#{version},</if><if test="isDeleted != null ">isDeleted=#{isDeleted},</if><if test="createBy != null ">createBy=#{createBy},</if><if test="updateBy != null ">updateBy=#{updateBy},</if><if test="isReturn != null ">isReturn=#{isReturn},</if>	</trim> where id=#{id} and version = #{version}-1</update><!-- 删除记录 --><delete id="del" >	delete from bondtransactioncpe where id = #{id}</delete><!-- 根据id查询  --><select id="get"   resultType="Bondtransactioncpe"  parameterType="String">	select <include refid="columnList" /> 	from bondtransactioncpe  b	where  b.id = #{id}  and b.isDeleted = false</select><!-- 列表总数--><select id="count" resultType="java.lang.Long" >	select count(1) 	from bondtransactioncpe  b	<include refid="whereClause"/></select><!-- 查询page --><select id="findPage" resultType="Bondtransactioncpe" >	select 	<include refid="columnList"/>	from bondtransactioncpe b left join	position p on p.id  = b.positionID	<include refid="whereClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 模糊查询page --><select id="findLikePage" resultType="Bondtransactioncpe" >	select 	<include refid="columnList"/>	from bondtransactioncpe b	<include refid="whereLikeClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询列表list --><select id="findList" resultType="Bondtransactioncpe" >	select	<include refid="columnList"/>	,a.type	from bondtransactioncpe b left join	position p on p.id  = b.positionID	left join account a  on a.orderNo = b.orderNumber	<include refid="whereClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!--模糊查询list--><select id="findLikeList" resultType="Bondtransactioncpe" >	select	<include refid="columnList"/>	from bondtransactioncpe b	<include refid="whereLikeClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询符合条件的数据的id集合 --><select id="findIds" resultType="String">	select b.${idsColumn}	from bondtransactioncpe b    <include refid="whereClause"/>    <if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询符合模糊条件的数据的id集合 --><select id="findLikeIds" resultType="String">	select b.${idsColumn}	from bondtransactioncpe b    <include refid="whereLikeClause"/>    <if test="orderByClause!=null">${orderByClause}</if></select><!-- 获取一个对象通过非id --><select id="one" resultType="Bondtransactioncpe" >     select    <include refid="columnList"/>	,a.mark,IFNULL(su.realName,su.nickName) as 'cpeName'	from bondtransactioncpe b left join	position p on p.id  = b.positionID	left join account a  on a.orderNo = b.orderNumber	left join shiro_user su on su.id = b.cpeID    <include refid="whereClause"/>    <if test="orderByClause!=null">${orderByClause}</if>    limit 0,1</select><!--如果你想返回一个HashMap 就实现这个select标签--><select id="queryHashMap" resultType="java.util.HashMap"  parameterType="Object"></select></mapper>