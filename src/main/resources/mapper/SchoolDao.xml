<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.yskj.dao.SchoolDao" ><!-- 查询字段 --><sql id="columnList" >	s.id,	 s.name, s.address, s.badge, s.createBy, s.createTime, s.updateBy, s.updateTime, s.version, s.isDeleted</sql><!--通过id集合in查询--><sql id="inClause">    <if test="column!=null">        <if test="ids==null">            and 1=0        </if>        <if test="ids!=null">            <if test="ids.size>0">                and  s.${column} in                <foreach item="items" index="index" collection="ids" open="(" separator="," close=")">                    #{items}                </foreach>            </if>            <if test="ids.size==0">                and 1=0            </if>        </if>    </if></sql><!-- 查询条件 --><sql id="whereClause">where 1=1<trim  suffixOverrides="," >	<if test="condition.id != null" >	    and s.id = #{condition.id}	</if>	<if test="condition.name != null" >and  UPPER(s.name) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.name}),'%'))</if><if test="condition.address != null" >and  s.address = #{condition.address}</if><if test="condition.badge != null" >and  s.badge = #{condition.badge}</if><if test="condition.createBy != null" >and  s.createBy = #{condition.createBy}</if><if test="condition.createTime != null" >and  s.createTime = #{condition.createTime}</if><if test="condition.updateBy != null" >and  s.updateBy = #{condition.updateBy}</if><if test="condition.updateTime != null" >and  s.updateTime = #{condition.updateTime}</if><if test="condition.version != null" >and  s.version = #{condition.version}</if><if test="condition.isDeleted != null" >and  s.isDeleted = #{condition.isDeleted}</if></trim><include refid="inClause"/></sql><!-- 模糊查询条件 --><sql id="whereLikeClause">where 1=1<trim  suffixOverrides="," >	<if test="condition.id != null" >	    and s.id = #{condition.id}	</if>													 			<if test="condition.name != null" >and  UPPER(s.name) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.name}),'%'))</if><if test="condition.address != null" >and  UPPER(s.address) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.address}),'%'))</if><if test="condition.badge != null" >and  UPPER(s.badge) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.badge}),'%'))</if><if test="condition.createBy != null" >and  UPPER(s.createBy) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.createBy}),'%'))</if><if test="condition.createTime != null" >and  UPPER(s.createTime) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.createTime}),'%'))</if><if test="condition.updateBy != null" >and  UPPER(s.updateBy) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.updateBy}),'%'))</if><if test="condition.updateTime != null" >and  UPPER(s.updateTime) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.updateTime}),'%'))</if><if test="condition.version != null" >and  UPPER(s.version) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.version}),'%'))</if><if test="condition.isDeleted != null" >and  UPPER(s.isDeleted) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.isDeleted}),'%'))</if></trim><include refid="inClause"/></sql><!-- 插入记录 --><insert id="add"  >  insert into school (id,name,address,badge,createBy,createTime,updateBy,updateTime,version,isDeleted)  values(#{id,jdbcType=VARCHAR},#{name},#{address},#{badge},#{createBy},#{createTime},#{updateBy},#{updateTime},#{version},#{isDeleted})</insert><!-- 修改记录，只修改只不为空的字段 --><update id="update" >	update school set	<trim  suffixOverrides="," >	<if test="name != null ">name=#{name},</if><if test="address != null ">address=#{address},</if><if test="badge != null ">badge=#{badge},</if><if test="createBy != null ">createBy=#{createBy},</if><if test="createTime != null ">createTime=#{createTime},</if><if test="updateBy != null ">updateBy=#{updateBy},</if><if test="updateTime != null ">updateTime=#{updateTime},</if><if test="version != null ">version=#{version},</if><if test="isDeleted != null ">isDeleted=#{isDeleted},</if>	</trim> where id=#{id} and version = #{version}-1</update><!-- 删除记录 --><delete id="del" >	delete from school where id = #{id}</delete><!-- 根据id查询  --><select id="get"   resultType="School"  parameterType="String">	select <include refid="columnList" /> 	from school  s	where  s.id = #{id}  and s.isDeleted = false</select><!-- 列表总数--><select id="count" resultType="java.lang.Long" >	select count(1) 	from school  s	<include refid="whereClause"/></select><!-- 查询page --><select id="findPage" resultType="School" >	select 	<include refid="columnList"/>	from school s	<include refid="whereClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 模糊查询page --><select id="findLikePage" resultType="School" >	select 	<include refid="columnList"/>	from school s	<include refid="whereLikeClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询列表list --><select id="findList" resultType="School" >	select	<include refid="columnList"/>,	#{condition.name} as 'keyword'	from school s	<include refid="whereClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!--模糊查询list--><select id="findLikeList" resultType="School" >	select	<include refid="columnList"/>	from school s	<include refid="whereLikeClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询符合条件的数据的id集合 --><select id="findIds" resultType="String">	select s.${idsColumn}	from school s    <include refid="whereClause"/>    <if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询符合模糊条件的数据的id集合 --><select id="findLikeIds" resultType="String">	select s.${idsColumn}	from school s    <include refid="whereLikeClause"/>    <if test="orderByClause!=null">${orderByClause}</if></select><!-- 获取一个对象通过非id --><select id="one" resultType="School" >     select    <include refid="columnList"/>     from school s    <include refid="whereClause"/>    <if test="orderByClause!=null">${orderByClause}</if>    limit 0,1</select><!--如果你想返回一个HashMap 就实现这个select标签--><select id="queryHashMap" resultType="java.util.HashMap"  parameterType="Object"></select>	<select id="attachedSchoolPage" resultType="School">		SELECT			s.id,			s. name,			s.badge,			w.id as 'workID',			(				6371 * acos(					cos(radians(#{condition.lat})) * cos(radians(l.latitude)) * cos(						radians(l.longitude) - radians(#{condition.lng})					) + sin(radians(#{condition.lat})) * sin(radians(l.latitude))				)			) AS distance		FROM			school s		LEFT JOIN localtioninfo l ON s.address = l.ID		left join worknumber w on w.schoolID = s.id		<if test="condition.name!=null">			where s.name != #{condition.name}		</if>		ORDER BY			distance	</select></mapper>