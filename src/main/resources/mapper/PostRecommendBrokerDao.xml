<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.yskj.dao.PostRecommendBrokerDao" ><!-- 查询字段 --><sql id="columnList" >	prb.id,	 prb.brokerID, prb.postID, prb.status, prb.entry, prb.quit, prb.createBy, prb.createTime, prb.updateBy, prb.updateTime, prb.version, prb.isDeleted,prb.recommendID,prb.isLike</sql><!--通过id集合in查询--><sql id="inClause">    <if test="column!=null">        <if test="ids==null">            and 1=0        </if>        <if test="ids!=null">            <if test="ids.size>0">                and  prb.${column} in                <foreach item="items" index="index" collection="ids" open="(" separator="," close=")">                    #{items}                </foreach>            </if>            <if test="ids.size==0">                and 1=0            </if>        </if>    </if></sql><!-- 查询条件 --><sql id="whereClause">where 1=1<trim  suffixOverrides="," >	<if test="condition.id != null" >	    and prb.id = #{condition.id}	</if>	<if test="condition.brokerID != null" >and  prb.brokerID = #{condition.brokerID}</if><if test="condition.postID != null" >and  prb.postID = #{condition.postID}</if><if test="condition.status != null" >and  prb.status = #{condition.status}</if><if test="condition.entry != null" >and  prb.entry = #{condition.entry}</if><if test="condition.quit != null" >and  prb.quit = #{condition.quit}</if><if test="condition.createBy != null" >and  prb.createBy = #{condition.createBy}</if><if test="condition.createTime != null" >and  prb.createTime = #{condition.createTime}</if><if test="condition.updateBy != null" >and  prb.updateBy = #{condition.updateBy}</if><if test="condition.updateTime != null" >and  prb.updateTime = #{condition.updateTime}</if><if test="condition.version != null" >and  prb.version = #{condition.version}</if><if test="condition.isDeleted != null" >and  prb.isDeleted = #{condition.isDeleted}</if><if test="condition.recommendID != null" >and  prb.recommendID = #{condition.recommendID}</if><if test="condition.isLike != null" >and  prb.isLike = #{condition.isLike}</if></trim><include refid="inClause"/></sql><!-- 模糊查询条件 --><sql id="whereLikeClause">where 1=1<trim  suffixOverrides="," >	<if test="condition.id != null" >	    and prb.id = #{condition.id}	</if>													 			<if test="condition.brokerID != null" >and  UPPER(prb.brokerID) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.brokerID}),'%'))</if><if test="condition.postID != null" >and  UPPER(prb.postID) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.postID}),'%'))</if><if test="condition.status != null" >and  UPPER(prb.status) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.status}),'%'))</if><if test="condition.entry != null" >and  UPPER(prb.entry) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.entry}),'%'))</if><if test="condition.quit != null" >and  UPPER(prb.quit) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.quit}),'%'))</if><if test="condition.createBy != null" >and  UPPER(prb.createBy) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.createBy}),'%'))</if><if test="condition.createTime != null" >and  UPPER(prb.createTime) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.createTime}),'%'))</if><if test="condition.updateBy != null" >and  UPPER(prb.updateBy) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.updateBy}),'%'))</if><if test="condition.updateTime != null" >and  UPPER(prb.updateTime) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.updateTime}),'%'))</if><if test="condition.version != null" >and  UPPER(prb.version) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.version}),'%'))</if><if test="condition.isDeleted != null" >and  UPPER(prb.isDeleted) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.isDeleted}),'%'))</if><if test="condition.recommendID != null" >and  UPPER(prb.recommendID) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.recommendID}),'%'))</if><if test="condition.isLike != null" >and  UPPER(prb.isLike) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.isLike}),'%'))</if></trim><include refid="inClause"/></sql><!-- 插入记录 --><insert id="add"  >  insert into post_recommend_broker (id,brokerID,postID,status,entry,quit,createBy,createTime,updateBy,updateTime,version,isDeleted,recommendID,isLike)  values(#{id,jdbcType=VARCHAR},#{brokerID},#{postID},#{status},#{entry},#{quit},#{createBy},#{createTime},#{updateBy},#{updateTime},#{version},#{isDeleted},#{recommendID},#{isLike})</insert><!-- 修改记录，只修改只不为空的字段 --><update id="update" >	update post_recommend_broker set	<trim  suffixOverrides="," >	<if test="brokerID != null ">brokerID=#{brokerID},</if><if test="setBrokerIDNull != null ">brokerID=NULL,</if><if test="postID != null ">postID=#{postID},</if><if test="status != null ">status=#{status},</if><if test="entry != null ">entry=#{entry},</if><if test="quit != null ">quit=#{quit},</if><if test="createBy != null ">createBy=#{createBy},</if><if test="createTime != null ">createTime=#{createTime},</if><if test="updateBy != null ">updateBy=#{updateBy},</if><if test="updateTime != null ">updateTime=#{updateTime},</if><if test="version != null ">version=#{version},</if><if test="isDeleted != null ">isDeleted=#{isDeleted},</if><if test="recommendID != null ">recommendID=#{recommendID},</if><if test="isLike != null ">isLike=#{isLike},</if>	</trim> where id=#{id} and version = #{version}-1</update><!-- 删除记录 --><delete id="del" >	delete from post_recommend_broker where id = #{id}</delete><!-- 根据id查询  --><select id="get"   resultType="PostRecommendBroker"  parameterType="String">	select <include refid="columnList" /> 	from post_recommend_broker  prb	where  prb.id = #{id}  and prb.isDeleted = false</select><!-- 列表总数--><select id="count" resultType="java.lang.Long" >	select count(1) 	from post_recommend_broker  prb	<include refid="whereClause"/></select><!-- 查询page --><select id="findPage" resultType="PostRecommendBroker" >	select 	<include refid="columnList"/>	from post_recommend_broker prb	<include refid="whereClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 模糊查询page --><select id="findLikePage" resultType="PostRecommendBroker" >	select 	<include refid="columnList"/>	from post_recommend_broker prb	<include refid="whereLikeClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询列表list --><select id="findList" resultType="PostRecommendBroker" >	select	<include refid="columnList"/>	from post_recommend_broker prb	<include refid="whereClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!--模糊查询list--><select id="findLikeList" resultType="PostRecommendBroker" >	select	<include refid="columnList"/>	from post_recommend_broker prb	<include refid="whereLikeClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询符合条件的数据的id集合 --><select id="findIds" resultType="String">	select prb.${idsColumn}	from post_recommend_broker prb    <include refid="whereClause"/>    <if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询符合模糊条件的数据的id集合 --><select id="findLikeIds" resultType="String">	select prb.${idsColumn}	from post_recommend_broker prb    <include refid="whereLikeClause"/>    <if test="orderByClause!=null">${orderByClause}</if></select><!-- 获取一个对象通过非id --><select id="one" resultType="PostRecommendBroker" >     select    <include refid="columnList"/>     from post_recommend_broker prb    <include refid="whereClause"/>    <if test="orderByClause!=null">${orderByClause}</if>    limit 0,1</select><!--如果你想返回一个HashMap 就实现这个select标签--><select id="queryHashMap" resultType="java.util.HashMap"  parameterType="Object"></select>	<select id="allFullStatusInfo" resultType="java.util.Map">		SELECT			(SELECT				COUNT(1)			FROM				post_recommend_broker p			WHERE p.`status` = 1				AND p.`postID` IN				(SELECT					post.`id`				FROM					post post				WHERE post.`createBy` = #{userID})				AND p.`recommendID` NOT IN				(SELECT					p.`recommendID`				FROM					post_recommend_broker p				WHERE p.`status` = 4					AND p.`postID` NOT IN					(SELECT						post.`id`					FROM						post post					WHERE post.`createBy` = #{userID}))) AS 'type1',			(SELECT				COUNT(1)			FROM				post_recommend_broker p			WHERE p.`status` = 2				AND p.`postID` IN				(SELECT					post.`id`				FROM					post post				WHERE post.`createBy` = #{userID})				AND p.`recommendID` NOT IN				(SELECT					p.`recommendID`				FROM					post_recommend_broker p				WHERE p.`status` = 4					AND p.`postID` NOT IN					(SELECT						post.`id`					FROM						post post					WHERE post.`createBy` = #{userID}))) AS 'type2',			(SELECT				COUNT(1)			FROM				post_recommend_broker p			WHERE p.`status` = 3				AND p.`postID` IN				(SELECT					post.`id`				FROM					post post				WHERE post.`createBy` = #{userID})				AND p.`recommendID` NOT IN				(SELECT					p.`recommendID`				FROM					post_recommend_broker p				WHERE p.`status` = 4					AND p.`postID` NOT IN					(SELECT						post.`id`					FROM						post post					WHERE post.`createBy` = #{userID}))) AS 'type3',			(SELECT				COUNT(1)			FROM				post_recommend_broker p			WHERE p.`status` = 4				AND p.`postID` IN				(SELECT					post.`id`				FROM					post post				WHERE post.`createBy` = #{userID})				AND p.`recommendID` NOT IN				(SELECT					p.`recommendID`				FROM					post_recommend_broker p				WHERE p.`status` = 4					AND p.`postID` NOT IN					(SELECT						post.`id`					FROM						post post					WHERE post.`createBy` = #{userID}))) AS 'type4',			(SELECT				COUNT(1)			FROM				post_recommend_broker p			WHERE p.`status` = 5				AND p.`postID` IN				(SELECT					post.`id`				FROM					post post				WHERE post.`createBy` = #{userID}					AND p.`recommendID` NOT IN					(SELECT						p.`recommendID`					FROM						post_recommend_broker p					WHERE p.`status` = 4						AND p.`postID` NOT IN						(SELECT							post.`id`						FROM							post post						WHERE post.`createBy` = #{userID})))) AS 'type5'		FROM			post_recommend_broker			LIMIT 0,1	</select>	<select id="getWorkingJob" resultType="com.yskj.models.PostRecommendBroker">		SELECT * FROM post_recommend_broker WHERE status = 4 and recommendID = #{recommendID} limit 0,1	</select>	<sql id="detailList">		p.id as 'id',		p.version as 'version',p.brokerID as 'brokerID',p.postID as 'postID',p.status as 'status',p.entry as 'entry',p.quit as 'quit',p.recommendID as 'recommendID',p.isLike as 'isLike',p.createTime as 'createTime',		recommend.id as 'recommend.id',		recommend.version as 'recommend.version',recommend.name as 'recommend.name',recommend.phoneNumber as 'recommend.phoneNumber',recommend.sex as 'recommend.sex',recommend.age as 'recommend.age',recommend.mark as 'recommend.mark',		post.id as 'post.id',		post.version as 'post.version',post.title as 'post.title',post.compID as 'post.compID',		company.id as 'post.company.id',		company.version as 'post.company.version',company.company as 'post.company.company',company.addrID as 'post.company.addrID',post.addrID as 'post.addrID',		broker.id as 'broker.id',		broker.version as 'broker.version',broker.code as 'broker.code',broker.name as 'broker.name',broker.level as 'broker.level'	</sql>	<!--Recommend映射-->	<resultMap id="RecommendMap" type="Recommend">		<id property="id" column="recommend.id" />		<result property="version" column="recommend.version" />		<result property="name" column="recommend.name" />		<result property="phoneNumber" column="recommend.phoneNumber" />		<result property="sex" column="recommend.sex" />		<result property="age" column="recommend.age" />		<result property="mark" column="recommend.mark" />	</resultMap>	<!--Company映射-->	<resultMap id="CompanyMap" type="Company">		<id property="id" column="post.company.id" />		<result property="version" column="post.company.version" />		<result property="company" column="post.company.company" />		<result property="addrID" column="post.company.addrID" />	</resultMap>	<!--Post映射-->	<resultMap id="PostMap" type="Post">		<id property="id" column="post.id" />		<result property="version" column="post.version" />		<result property="title" column="post.title" />		<result property="compID" column="post.compID" />		<result property="addrID" column="post.addrID" />		<result property="minSalary" column="post.minSalary" />		<result property="maxSalary" column="post.maxSalary" />		<result property="benefitsLabel" column="post.benefitsLabel" />		<result property="workLabel" column="post.workLabel" />		<result property="otherLabel" column="post.otherLabel" />		<result property="recruits" column="post.recruits" />		<result property="descript" column="post.descript" />		<result property="arrange" column="post.arrange" />		<result property="status" column="post.status" />		<result property="phone" column="post.phone" />		<result property="contacts" column="post.contacts" />		<result property="minAge" column="post.minAge" />		<result property="maxAge" column="post.maxAge" />		<result property="postType" column="post.postType" />		<association property="company"  javaType="Company" resultMap="CompanyMap"/>	</resultMap>	<!--Broker映射-->	<resultMap id="BrokerMap" type="Broker">		<id property="id" column="broker.id" />		<result property="version" column="broker.version" />		<result property="code" column="broker.code" />		<result property="name" column="broker.name" />		<result property="level" column="broker.level" />	</resultMap>	<!--PostRecommendBroker映射-->	<resultMap id="PostRecommendBrokerMap" type="PostRecommendBroker">		<id property="id" column="id" />		<result property="version" column="version" />		<result property="brokerID" column="brokerID" />		<result property="postID" column="postID" />		<result property="status" column="status" />		<result property="entry" column="entry" />		<result property="isLike" column="isLike" />		<result property="createTime" column="createTime" />		<result property="quit" column="quit" />		<result property="recommendID" column="recommendID" />		<association property="recommend"  javaType="Recommend" resultMap="RecommendMap"/>		<association property="post"  javaType="Post" resultMap="PostMap"/>		<association property="broker"  javaType="Broker" resultMap="BrokerMap"/>	</resultMap>	<!--对象的多级映射 mapList mapPage mapOne-->	<select id="getFullJobInfoByStatus" resultMap="PostRecommendBrokerMap" >		select		<include refid="detailList"/>		from  post_recommend_broker p		left join post_recommend recommend on p.recommendID = recommend.id		left join post post on p.postID = post.id		left join post_company company on post.compID = company.id		left join post_broker broker on p.brokerID = broker.code		where p.`status` = #{condition.status}		AND p.`postID` IN			(SELECT			post.`id`			FROM			post post			WHERE post.`createBy` = #{condition.createBy})		AND p.`recommendID` NOT IN			(SELECT			p.`recommendID`			FROM			post_recommend_broker p			WHERE p.`status` = 4			AND p.`postID` NOT IN			(SELECT			post.`id`			FROM			post post			WHERE post.`createBy` = #{condition.createBy}))		ORDER BY p.updateTime DESC	</select>    <sql id="deliveredList">        p.id as 'id',        p.version as 'version',p.brokerID as 'brokerID',p.postID as 'postID',p.status as 'status',p.entry as 'entry',p.quit as 'quit',p.recommendID as 'recommendID',p.isLike as 'isLike',p.createTime as 'createTime',        recommend.id as 'recommend.id',        recommend.version as 'recommend.version',recommend.name as 'recommend.name',recommend.phoneNumber as 'recommend.phoneNumber',recommend.sex as 'recommend.sex',recommend.age as 'recommend.age',recommend.mark as 'recommend.mark',        post.id as 'post.id',        post.version as 'post.version',post.title as 'post.title',post.compID as 'post.compID',        company.id as 'post.company.id',        company.version as 'post.company.version',company.company as 'post.company.company',company.addrID as 'post.company.addrID',post.addrID as 'post.addrID',        workPlace.id as 'post.workPlace.id',        workPlace.version as 'post.workPlace.version',workPlace.cityID as 'post.workPlace.cityID',workPlace.detailedAddress as 'post.workPlace.detailedAddress',workPlace.longitude as 'post.workPlace.longitude',workPlace.latitude as 'post.workPlace.latitude',        city.id as 'post.workPlace.city.id',        city.version as 'post.workPlace.city.version',city.pinyin as 'post.workPlace.city.pinyin',city.cityName as 'post.workPlace.city.cityName',city.zipCode as 'post.workPlace.city.zipCode',city.openState as 'post.workPlace.city.openState',city.cityType as 'post.workPlace.city.cityType',city.isHot as 'post.workPlace.city.isHot',city.parentID as 'post.workPlace.city.parentID',city.mergerName as 'post.workPlace.city.mergerName',city.cityCode as 'post.workPlace.city.cityCode',city.lng as 'post.workPlace.city.lng',city.lat as 'post.workPlace.city.lat',workPlace.geohash as 'post.workPlace.geohash',post.minSalary as 'post.minSalary',post.maxSalary as 'post.maxSalary',post.benefitsLabel as 'post.benefitsLabel',post.workLabel as 'post.workLabel',post.otherLabel as 'post.otherLabel',post.recruits as 'post.recruits',post.descript as 'post.descript',post.arrange as 'post.arrange',post.status as 'post.status',post.phone as 'post.phone',post.contacts as 'post.contacts',post.minAge as 'post.minAge',post.maxAge as 'post.maxAge',post.postType as 'post.postType',        broker.id as 'broker.id',        broker.version as 'broker.version',broker.code as 'broker.code',broker.name as 'broker.name',broker.level as 'broker.level'    </sql>    <!--Post映射-->    <resultMap id="deliveredPostMap" type="Post">        <id property="id" column="post.id" />        <result property="version" column="post.version" />        <result property="title" column="post.title" />        <result property="compID" column="post.compID" />        <result property="addrID" column="post.addrID" />        <result property="minSalary" column="post.minSalary" />        <result property="maxSalary" column="post.maxSalary" />        <result property="benefitsLabel" column="post.benefitsLabel" />        <result property="workLabel" column="post.workLabel" />        <result property="otherLabel" column="post.otherLabel" />        <result property="recruits" column="post.recruits" />        <result property="descript" column="post.descript" />        <result property="arrange" column="post.arrange" />        <result property="status" column="post.status" />        <result property="phone" column="post.phone" />        <result property="contacts" column="post.contacts" />        <result property="minAge" column="post.minAge" />        <result property="maxAge" column="post.maxAge" />        <result property="postType" column="post.postType" />        <association property="company"  javaType="Company" resultMap="CompanyMap"/>        <association property="workPlace"  javaType="Localtioninfo" resultMap="LocaltioninfoMap"/>    </resultMap>    <!--City映射-->    <resultMap id="CityMap" type="City">        <id property="id" column="post.workPlace.city.id" />        <result property="version" column="post.workPlace.city.version" />        <result property="pinyin" column="post.workPlace.city.pinyin" />        <result property="cityName" column="post.workPlace.city.cityName" />        <result property="zipCode" column="post.workPlace.city.zipCode" />        <result property="openState" column="post.workPlace.city.openState" />        <result property="cityType" column="post.workPlace.city.cityType" />        <result property="isHot" column="post.workPlace.city.isHot" />        <result property="parentID" column="post.workPlace.city.parentID" />        <result property="mergerName" column="post.workPlace.city.mergerName" />        <result property="cityCode" column="post.workPlace.city.cityCode" />        <result property="lng" column="post.workPlace.city.lng" />        <result property="lat" column="post.workPlace.city.lat" />    </resultMap>    <!--Localtioninfo映射-->    <resultMap id="LocaltioninfoMap" type="Localtioninfo">        <id property="id" column="post.workPlace.id" />        <result property="version" column="post.workPlace.version" />        <result property="cityID" column="post.workPlace.cityID" />        <result property="detailedAddress" column="post.workPlace.detailedAddress" />        <result property="longitude" column="post.workPlace.longitude" />        <result property="latitude" column="post.workPlace.latitude" />        <result property="geohash" column="post.workPlace.geohash" />        <result property="distance" column="post.workPlace.distance" />        <association property="city"  javaType="City" resultMap="CityMap"/>    </resultMap>    <!--PostRecommendBroker映射-->    <resultMap id="deliveredPostRecommendBrokerMap" type="PostRecommendBroker">        <id property="id" column="id" />        <result property="version" column="version" />        <result property="brokerID" column="brokerID" />        <result property="postID" column="postID" />        <result property="status" column="status" />        <result property="entry" column="entry" />        <result property="isLike" column="isLike" />        <result property="createTime" column="createTime" />        <result property="quit" column="quit" />        <result property="recommendID" column="recommendID" />        <association property="recommend"  javaType="Recommend" resultMap="RecommendMap"/>        <association property="post"  javaType="Post" resultMap="deliveredPostMap"/>        <association property="broker"  javaType="Broker" resultMap="BrokerMap"/>    </resultMap>	<select id="deliveredResumePage" resultMap="deliveredPostRecommendBrokerMap" >		select		<include refid="deliveredList"/>		from  post_recommend_broker p		left join post_recommend recommend on p.recommendID = recommend.id		left join post post on p.postID = post.id		left join post_company company on post.compID = company.id		left join post_broker broker on p.brokerID = broker.code        left join localtioninfo workPlace on post.addrID = workPlace.id        left join city city on workPlace.cityID = city.id		where p.recommendID = #{condition.recommendID}		<if test="condition.status==null and condition.isLike==null">			AND p.status is not null		</if>		<if test="condition.status!=null">			AND p.status = #{condition.status}		</if>		<if test="condition.isLike!=null">			AND p.isLike = TRUE		</if>		order by p.updateTime desc	</select>	<select id="getMyRecommendInfo" resultType="java.util.Map" parameterType="java.lang.String">		SELECT		(SELECT COUNT(*) FROM post_recommend_broker prb WHERE prb.brokerID = (SELECT pb.code FROM post_broker pb WHERE pb.createBy = #{userID} ) AND prb.`status` IN (1,2,3) AND (DATE(NOW())-DATE(prb.`updateTime`))&lt;7		)type1		,		(SELECT COUNT(*)FROM post_recommend_broker prb WHERE prb.brokerID = (SELECT pb.code FROM post_broker pb WHERE pb.createBy = #{userID} ) AND prb.`status` = 4) type2		,		(SELECT COUNT(*)FROM post_recommend_broker prb WHERE prb.brokerID = (SELECT pb.code FROM post_broker pb WHERE pb.createBy = #{userID} ) AND (prb.`status` = 9 OR (prb.status IN (1,2,3) AND (DATE(NOW())-DATE(prb.`updateTime`))&gt;7))) type3		,		(SELECT COUNT(*)FROM post_recommend_broker prb WHERE prb.brokerID = (SELECT pb.code FROM post_broker pb WHERE pb.createBy = #{userID} ) AND prb.`quit`IS NOT NULL) type4		FROM DUAL	</select>	<!--级联查询-->	<sql id="detailList1">		p.id as 'id',		p.version as 'version',p.brokerID as 'brokerID',p.postID as 'postID',p.status as 'status',p.entry as 'entry',p.quit as 'quit',p.recommendID as 'recommendID',		recommend.id as 'recommend.id',		recommend.version as 'recommend.version',recommend.name as 'recommend.name',recommend.phoneNumber as 'recommend.phoneNumber',recommend.sex as 'recommend.sex',recommend.age as 'recommend.age',recommend.mark as 'recommend.mark',		post.id as 'post.id',		post.version as 'post.version',post.title as 'post.title',post.compID as 'post.compID',		company.id as 'post.company.id',		company.version as 'post.company.version',company.company as 'post.company.company',company.addrID as 'post.company.addrID',		postForBroker.id as 'post.postForBroker.id',		postForBroker.version as 'post.postForBroker.version',postForBroker.commission as 'post.postForBroker.commission',postForBroker.attention as 'post.postForBroker.attention',postForBroker.unit as 'post.postForBroker.unit',postForBroker.postID as 'post.postForBroker.postID',		broker.id as 'broker.id',		broker.version as 'broker.version',broker.code as 'broker.code',broker.name as 'broker.name',broker.level as 'broker.level',broker.status as 'broker.status'	</sql>	<!--PostForBroker映射-->	<resultMap id="PostForBrokerMap" type="PostForBroker">		<id property="id" column="post.postForBroker.id" />		<result property="version" column="post.postForBroker.version" />		<result property="commission" column="post.postForBroker.commission" />		<result property="attention" column="post.postForBroker.attention" />		<result property="unit" column="post.postForBroker.unit" />		<result property="postID" column="post.postForBroker.postID" />	</resultMap>	<!--Post映射-->	<resultMap id="PostMap1" type="Post">		<id property="id" column="post.id" />		<result property="version" column="post.version" />		<result property="title" column="post.title" />		<result property="compID" column="post.compID" />		<result property="minSalary" column="post.minSalary" />		<result property="maxSalary" column="post.maxSalary" />		<result property="benefitsLabel" column="post.benefitsLabel" />		<result property="workLabel" column="post.workLabel" />		<result property="otherLabel" column="post.otherLabel" />		<result property="recruits" column="post.recruits" />		<result property="descript" column="post.descript" />		<result property="arrange" column="post.arrange" />		<result property="status" column="post.status" />		<result property="phone" column="post.phone" />		<result property="contacts" column="post.contacts" />		<result property="minAge" column="post.minAge" />		<result property="maxAge" column="post.maxAge" />		<result property="postType" column="post.postType" />		<association property="company"  javaType="Company" resultMap="CompanyMap"/>		<association property="postForBroker"  javaType="PostForBroker" resultMap="PostForBrokerMap"/>	</resultMap>	<!--PostRecommendBroker映射-->	<resultMap id="PostRecommendBrokerMap1" type="PostRecommendBroker">		<id property="id" column="id" />		<result property="version" column="version" />		<result property="brokerID" column="brokerID" />		<result property="postID" column="postID" />		<result property="status" column="status" />		<result property="entry" column="entry" />		<result property="quit" column="quit" />		<result property="recommendID" column="recommendID" />		<association property="recommend"  javaType="Recommend" resultMap="RecommendMap"/>		<association property="post"  javaType="Post" resultMap="PostMap1"/>		<association property="broker"  javaType="Broker" resultMap="BrokerMap"/>	</resultMap>	<!--对象的多级映射 mapList mapPage mapOne-->	<select id="myBrokerPersonDetail" resultMap="PostRecommendBrokerMap1" >		select		<include refid="detailList1"/>		from  post_recommend_broker p		left join post_recommend recommend on p.recommendID = recommend.id		left join post post on p.postID = post.id		left join post_company company on post.compID = company.id		left join post_for_broker postForBroker on post.id = postForBroker.postID		left join post_broker broker on p.brokerID = broker.id		where p.brokerID = (SELECT pb.code FROM post_broker pb WHERE pb.createBy = #{condition.userID} )		<if test="condition.type1!=null">			AND p.`status` IN (1,2,3) AND (DATE(NOW())-DATE(p.`updateTime`))&lt;7		</if>		<if test="condition.type2!=null">			AND p.`status` = 4		</if>		<if test="condition.type3!=null">			AND (p.`status` = 9 OR (p.status IN (1,2,3)AND (DATE(NOW())-DATE(p.`updateTime`))&gt;7))		</if>		<if test="condition.type4!=null">			AND p.`quit` IS NOT NULL		</if>	</select></mapper>