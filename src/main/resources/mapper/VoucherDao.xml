<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.yskj.dao.VoucherDao" ><!-- 查询字段 --><sql id="columnList" >	v.id,	 v.type, v.money, v.remittanceName, v.remittanceBankCard, v.status, v.userID, v.createBy, v.createTime, v.updateBy, v.updateTime, v.version, v.isDeleted</sql><!--通过id集合in查询--><sql id="inClause">    <if test="column!=null">        <if test="ids==null">            and 1=0        </if>        <if test="ids!=null">            <if test="ids.size>0">                and  v.${column} in                <foreach item="items" index="index" collection="ids" open="(" separator="," close=")">                    #{items}                </foreach>            </if>            <if test="ids.size==0">                and 1=0            </if>        </if>    </if></sql><!-- 查询条件 --><sql id="whereClause">where 1=1<trim  suffixOverrides="," >	<if test="condition.id != null" >	    and v.id = #{condition.id}	</if>	<if test="condition.type != null" >and  v.type = #{condition.type}</if><if test="condition.money != null" >and  v.money = #{condition.money}</if><if test="condition.remittanceName != null" >and  v.remittanceName = #{condition.remittanceName}</if><if test="condition.remittanceBankCard != null" >and  v.remittanceBankCard = #{condition.remittanceBankCard}</if><if test="condition.status != null" >and  v.status = #{condition.status}</if><if test="condition.userID != null" >and  v.userID = #{condition.userID}</if><if test="condition.createBy != null" >and  v.createBy = #{condition.createBy}</if><if test="condition.createTime != null" >and  v.createTime = #{condition.createTime}</if><if test="condition.updateBy != null" >and  v.updateBy = #{condition.updateBy}</if><if test="condition.updateTime != null" >and  v.updateTime = #{condition.updateTime}</if><if test="condition.version != null" >and  v.version = #{condition.version}</if><if test="condition.isDeleted != null" >and  v.isDeleted = #{condition.isDeleted}</if></trim><include refid="inClause"/></sql><!-- 模糊查询条件 --><sql id="whereLikeClause">where 1=1<trim  suffixOverrides="," >	<if test="condition.id != null" >	    and v.id = #{condition.id}	</if>													 			<if test="condition.type != null" >and  UPPER(v.type) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.type}),'%'))</if><if test="condition.money != null" >and  UPPER(v.money) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.money}),'%'))</if><if test="condition.remittanceName != null" >and  UPPER(v.remittanceName) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.remittanceName}),'%'))</if><if test="condition.remittanceBankCard != null" >and  UPPER(v.remittanceBankCard) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.remittanceBankCard}),'%'))</if><if test="condition.status != null" >and  UPPER(v.status) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.status}),'%'))</if><if test="condition.userID != null" >and  UPPER(v.userID) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.userID}),'%'))</if><if test="condition.createBy != null" >and  UPPER(v.createBy) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.createBy}),'%'))</if><if test="condition.createTime != null" >and  UPPER(v.createTime) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.createTime}),'%'))</if><if test="condition.updateBy != null" >and  UPPER(v.updateBy) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.updateBy}),'%'))</if><if test="condition.updateTime != null" >and  UPPER(v.updateTime) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.updateTime}),'%'))</if><if test="condition.version != null" >and  UPPER(v.version) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.version}),'%'))</if><if test="condition.isDeleted != null" >and  UPPER(v.isDeleted) LIKE   UPPER(CONCAT(CONCAT('%',#{condition.isDeleted}),'%'))</if></trim><include refid="inClause"/></sql><!-- 插入记录 --><insert id="add"  >  insert into voucher (id,type,money,remittanceName,remittanceBankCard,status,userID,createBy,createTime,updateBy,updateTime,version,isDeleted)  values(#{id,jdbcType=VARCHAR},#{type},#{money},#{remittanceName},#{remittanceBankCard},#{status},#{userID},#{createBy},#{createTime},#{updateBy},#{updateTime},#{version},#{isDeleted})</insert><!-- 修改记录，只修改只不为空的字段 --><update id="update" >	update voucher set	<trim  suffixOverrides="," >	<if test="type != null ">type=#{type},</if><if test="money != null ">money=#{money},</if><if test="remittanceName != null ">remittanceName=#{remittanceName},</if><if test="remittanceBankCard != null ">remittanceBankCard=#{remittanceBankCard},</if><if test="status != null ">status=#{status},</if><if test="userID != null ">userID=#{userID},</if><if test="createBy != null ">createBy=#{createBy},</if><if test="createTime != null ">createTime=#{createTime},</if><if test="updateBy != null ">updateBy=#{updateBy},</if><if test="updateTime != null ">updateTime=#{updateTime},</if><if test="version != null ">version=#{version},</if><if test="isDeleted != null ">isDeleted=#{isDeleted},</if>	</trim> where id=#{id} and version = #{version}-1</update><!-- 删除记录 --><delete id="del" >	delete from voucher where id = #{id}</delete><!-- 根据id查询  --><select id="get"   resultType="Voucher"  parameterType="String">	select <include refid="columnList" /> 	from voucher  v	where  v.id = #{id}  and v.isDeleted = false</select><!-- 列表总数--><select id="count" resultType="java.lang.Long" >	select count(1) 	from voucher  v	<include refid="whereClause"/></select><!-- 查询page --><select id="findPage" resultType="Voucher" >	select 	<include refid="columnList"/>	from voucher v	<include refid="whereClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 模糊查询page --><select id="findLikePage" resultType="Voucher" >	select 	<include refid="columnList"/>	from voucher v	<include refid="whereLikeClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询列表list --><select id="findList" resultType="Voucher" >	select	<include refid="columnList"/>	from voucher v	<include refid="whereClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!--模糊查询list--><select id="findLikeList" resultType="Voucher" >	select	<include refid="columnList"/>	from voucher v	<include refid="whereLikeClause"/>	<if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询符合条件的数据的id集合 --><select id="findIds" resultType="String">	select v.${idsColumn}	from voucher v    <include refid="whereClause"/>    <if test="orderByClause!=null">${orderByClause}</if></select><!-- 查询符合模糊条件的数据的id集合 --><select id="findLikeIds" resultType="String">	select v.${idsColumn}	from voucher v    <include refid="whereLikeClause"/>    <if test="orderByClause!=null">${orderByClause}</if></select><!-- 获取一个对象通过非id --><select id="one" resultType="Voucher" >     select    <include refid="columnList"/>     from voucher v    <include refid="whereClause"/>    <if test="orderByClause!=null">${orderByClause}</if>    limit 0,1</select><!--如果你想返回一个HashMap 就实现这个select标签--><select id="queryHashMap" resultType="java.util.HashMap"  parameterType="Object"></select>	<sql id="voucherdetailList">		vc.tempMonth as 'tempMonth',		vv.id as 'id',		vv.version as 'version',vv.type as 'type',vv.money as 'money',vv.remittanceName as 'remittanceName',vv.remittanceBankCard as 'remittanceBankCard',vv.status as 'status',vv.userID as 'userID',vv.updateTime as 'updateTime',		recharge.id as 'recharge.id',		recharge.version as 'recharge.version',recharge.voucherID as 'recharge.voucherID',recharge.money as 'recharge.money',recharge.rechargeDate as 'recharge.rechargeDate',recharge.orderNumber as 'recharge.orderNumber',recharge.userID as 'recharge.userID',recharge.invoiceID as 'recharge.invoiceID'	</sql>	<resultMap id="getVoucherListOfMonth" type="MonthVoucher">		<result property="tempMonth" column="tempMonth"/>		<collection property="voucherList" resultMap="getVoucherList"/>	</resultMap>	<!--Voucher 映射-->	<resultMap id="getVoucherList" type="Voucher">		<id property="id" column="id"/>		<result property="version" column="version"/>		<result property="type" column="type"/>		<result property="money" column="money"/>		<result property="remittanceName" column="remittanceName"/>		<result property="remittanceBankCard" column="remittanceBankCard"/>		<result property="status" column="status"/>		<result property="userID" column="userID"/>		<result property="updateTime" column="updateTime"/>		<result property="isDeleted" column="isDeleted"/>		<association property="recharge"  javaType="Recharge" resultMap="voucherRechargeMap"/>	</resultMap>	<!--voucherRecharge映射-->	<resultMap id="voucherRechargeMap" type="Recharge">		<id property="id" column="recharge.id" />		<result property="version" column="recharge.version" />		<result property="voucherID" column="recharge.voucherID" />		<result property="money" column="recharge.money" />		<result property="rechargeDate" column="recharge.rechargeDate" />		<result property="orderNumber" column="recharge.orderNumber" />		<result property="userID" column="recharge.userID" />		<result property="invoiceID" column="recharge.invoiceID" />	</resultMap>	<select id="getVoucherList" parameterType="java.lang.String" resultMap="getVoucherListOfMonth">		SELECT			<include refid="voucherdetailList"/>		FROM			(SELECT				DATE_FORMAT(v.updateTime, '%Y-%m') AS tempMonth			FROM				voucher v) vc			LEFT JOIN voucher vv				ON DATE_FORMAT(vv.updateTime, '%Y-%m') = vc.tempMonth			left join recharge recharge				on vv.id = recharge.voucherID		WHERE vv.status = 1			AND vv.isDeleted = FALSE			AND vv.`userID` = #{userID}			AND recharge.invoiceID IS NUll			GROUP BY vv.`id`			ORDER BY vv.updateTime DESC	</select>	<!--级联查询-->	<sql id="voucherDetailCheck">		v.id as 'id',		v.version as 'version',v.type as 'type',v.money as 'money',v.remittanceName as 'remittanceName',v.remittanceBankCard as 'remittanceBankCard',v.status as 'status',v.userID as 'userID',		attachmentList.id as 'attachmentList.id',		attachmentList.version as 'attachmentList.version',attachmentList.datestr as 'attachmentList.datestr',attachmentList.path as 'attachmentList.path',attachmentList.name as 'attachmentList.name',attachmentList.title as 'attachmentList.title',attachmentList.type as 'attachmentList.type',attachmentList.refID as 'attachmentList.refID'	</sql>	<!--voucherAttachment映射-->	<resultMap id="voucherAttachmentMap" type="Attachment">		<id property="id" column="attachmentList.id" />		<result property="version" column="attachmentList.version" />		<result property="datestr" column="attachmentList.datestr" />		<result property="path" column="attachmentList.path" />		<result property="name" column="attachmentList.name" />		<result property="title" column="attachmentList.title" />		<result property="type" column="attachmentList.type" />		<result property="refID" column="attachmentList.refID" />	</resultMap>	<!--voucherVoucher映射-->	<resultMap id="voucherVoucherMap" type="Voucher">		<id property="id" column="id" />		<result property="version" column="version" />		<result property="type" column="type" />		<result property="money" column="money" />		<result property="remittanceName" column="remittanceName" />		<result property="remittanceBankCard" column="remittanceBankCard" />		<result property="status" column="status" />		<result property="userID" column="userID" />		<collection property="attachmentList" resultMap="voucherAttachmentMap" />	</resultMap>	<!--对象的多级映射 mapList mapPage mapOne-->	<select id="upload_voucher_check" resultMap="voucherVoucherMap" >		select		<include refid="voucherDetailCheck"/>		from  voucher v		left join attachment attachmentList on v.id = attachmentList.refID		where		v.id = #{id}	</select>	<!--级联查询-->	<sql id="detailList">		v.id as 'id',		v.version as 'version',v.type as 'type',v.money as 'money',v.remittanceName as 'remittanceName',v.remittanceBankCard as 'remittanceBankCard',v.status as 'status',v.userID as 'userID',v.createTime as 'createTime',		recharge.id as 'recharge.id',		recharge.version as 'recharge.version',recharge.voucherID as 'recharge.voucherID',recharge.money as 'recharge.money',recharge.rechargeDate as 'recharge.rechargeDate',recharge.orderNumber as 'recharge.orderNumber',recharge.userID as 'recharge.userID',recharge.invoiceID as 'recharge.invoiceID'	</sql>	<!--Recharge映射-->	<resultMap id="getVoucherInfoRechargeMap" type="Recharge">		<id property="id" column="recharge.id" />		<result property="version" column="recharge.version" />		<result property="voucherID" column="recharge.voucherID" />		<result property="money" column="recharge.money" />		<result property="rechargeDate" column="recharge.rechargeDate" />		<result property="orderNumber" column="recharge.orderNumber" />		<result property="userID" column="recharge.userID" />		<result property="invoiceID" column="recharge.invoiceID" />	</resultMap>	<!--Voucher映射-->	<resultMap id="getVoucherInfoMap" type="Voucher">		<id property="id" column="id" />		<result property="createTime" column="createTime" />		<result property="version" column="version" />		<result property="type" column="type" />		<result property="money" column="money" />		<result property="remittanceName" column="remittanceName" />		<result property="remittanceBankCard" column="remittanceBankCard" />		<result property="status" column="status" />		<result property="userID" column="userID" />		<association property="recharge"  javaType="Recharge" resultMap="getVoucherInfoRechargeMap"/>	</resultMap>	<!--对象的多级映射 mapList mapPage mapOne-->	<select id="getVoucherInfo" resultMap="getVoucherInfoMap" >		select		<include refid="detailList"/>		from  voucher v		left join recharge recharge on v.id = recharge.voucherID		<include refid="whereClause"/>		ORDER BY v.updateTime DESC	</select>	<select id="getHistoryVoucherInfo" parameterType="java.lang.String" resultType="com.yskj.models.Voucher">		SELECT * FROM (SELECT voucher.* FROM recharge recharge LEFT JOIN voucher voucher ON voucher.`id` = recharge.`voucherID` WHERE voucher.`userID` = #{userID} ORDER BY recharge.`createTime` DESC ) temp GROUP BY temp.type	</select></mapper>