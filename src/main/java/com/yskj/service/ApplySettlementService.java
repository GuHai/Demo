package com.yskj.service;import com.yskj.dao.ApplySettlementDao;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.redis.RedisUtil;import com.yskj.service.auth.UserService;import com.yskj.service.base.AbstractService;import com.yskj.utils.DateUtils;import com.yskj.utils.StringUtils;import org.apache.shiro.util.CollectionUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.List;@Servicepublic class ApplySettlementService extends AbstractService {	@Autowired    private ApplySettlementDao applySettlementDao;	@Autowired	private SettlementPersonGroupService settlementPersonGroupService;	@Autowired	private SettlementpersonService settlementpersonService;	@Autowired	private BeenrecruitedService beenrecruitedService;	@Autowired	private ResumeService resumeService;	@Autowired	private ApplySettlementService applySettlementService;	@Autowired	private SigninService signinService;	@Autowired	private AccountService accountService;	@Autowired	private WxorderService wxorderService;	@Autowired	private MessageTemplateService messageTemplateService;	@Autowired	private PositionService positionService;	@Autowired	private UserService userService;	@Autowired	private RewardSettlementService rewardSettlementService ;	@Autowired	private ScanSettleService scanSettleService;	@Autowired	private ScanSettleMemberService scanSettleMemberService;	public ApplySettlementService() {		super();	}	@Override	public ApplySettlementDao getDao() {		return this.applySettlementDao;	}	public List<Position> getUserPositionWaitApplySettlementInfo(QueryParam queryParam){		return applySettlementDao.getUserPositionWaitApplySettlementInfo(queryParam);	}	public List<Position> signmapList(QueryParam queryParam){		return applySettlementDao.signmapList(queryParam);	}	public List<Position> simpleSignList(QueryParam queryParam){		return applySettlementDao.simpleSignList(queryParam);	}	public List<ApplySettlement> mapList(QueryParam queryParam)throws Exception {		return applySettlementDao.mapList(queryParam);	}	//生成订单，生成申请订单,修改签到为已经下订单，但是为结算	@Transactional	public SettlementPersonGroup toSettlement(List<ApplySettlement> list)throws Exception{		SettlementPersonGroup settlementPersonGroup = new SettlementPersonGroup();		settlementPersonGroup.setSize(list.size());		StringBuffer stringBuffer = new StringBuffer();		BigDecimal total = BigDecimal.ZERO;		for(ApplySettlement applySettlement : list){			if(stringBuffer.length()>0)stringBuffer.append(",");			total = total.add(applySettlement.getApplyPay());			applySettlement.setState(0);			//判断是否有催结算记录，如果有，更新，如果没有，新增			QueryParam queryParam = new QueryParam();			queryParam.put("userID",applySettlement.getUserID());			queryParam.put("positionID",applySettlement.getPositionID());			queryParam.put("state",3);			ApplySettlement existapp =  applySettlementService.one(queryParam);			if(existapp!=null){				applySettlement.setId(existapp.getId());				applySettlement.setVersion(existapp.getVersion());			}			//修改签到的状态为已经结算  结算完成后改为已经生成订单，未付款状态			List<Date> signDates = new ArrayList<Date>();			for( String id : applySettlement.getSignIDS().split(",")){				Signin signin  = signinService.get(id);				signin.setState(3);				signinService.update(signin);				signDates.add(signin.getSignTime());			}			String settleDates = DateUtils.getDateFromArr(signDates);			applySettlement.setWorkDate(settleDates);			applySettlementService.persistence(applySettlement);			//保存完了以后有id了，然后赋值到组里面			stringBuffer.append(applySettlement.getId());			if(applySettlement.getRewardSettlement()!= null){				total = total.add(applySettlement.getRewardSettlement().getRewardMoney());				settlementPersonGroup.setSize(settlementPersonGroup.getSize()+1);				applySettlement.getRewardSettlement().setState(false);				applySettlement.getRewardSettlement().setSettlementID(applySettlement.getId());				rewardSettlementService.add(applySettlement.getRewardSettlement());			}		}		settlementPersonGroup.setApplyId(stringBuffer.toString());		settlementPersonGroup.setTotalMoney(total);		settlementPersonGroup.setIsPay(false);		settlementPersonGroup.setPositionID(list.get(0).getPositionID());		settlementPersonGroupService.add(settlementPersonGroup);		return settlementPersonGroup;	}	//修改申请结算组订单状态为已付款，新增人员结算记录 更新申请为同意	@Transactional	public void settleCallback(Wxorder wxorder)throws Exception{		SettlementPersonGroup settlementPersonGroup = settlementPersonGroupService.get(wxorder.getRefID());		if(settlementPersonGroup!=null){			settlementPersonGroup.setIsPay(true);			settlementPersonGroupService.update(settlementPersonGroup);		}		List<String> ids = CollectionUtils.asList( settlementPersonGroup.getApplyId().split(","));		QueryParam queryParam  =new QueryParam();		queryParam.in("id",ids);		List<ApplySettlement> applySettlements = this.findList(queryParam);		for(ApplySettlement applySettlement : applySettlements){			Settlementperson settlementperson = new Settlementperson();			settlementperson.setPositionID(settlementPersonGroup.getPositionID());			settlementperson.setState(false);			settlementperson.setSettlementDate(applySettlement.getWorkDate());			settlementperson.setSettlementMoney(applySettlement.getApplyPay());			settlementperson.setUserID(applySettlement.getUserID());			settlementperson.setSettlementID(settlementPersonGroup.getId());			settlementpersonService.add(settlementperson);			//更新申请为已经支付状态			applySettlement.setState(1);			this.update(applySettlement);			//更新结算时间			queryParam.clear();			queryParam.put("createBy",applySettlement.getUserID());			queryParam.put("positionID",settlementPersonGroup.getPositionID());			queryParam.put("dismiss","all");			Beenrecruited beenrecruited = beenrecruitedService.one(queryParam);			beenrecruited.setSettlement(new Date());			beenrecruitedService.update(beenrecruited);			//修改签到的状态为已经结算  结算完成后改为已经结算状态			for( String id : applySettlement.getSignIDS().split(",")){				Signin signin  = signinService.get(id);				signin.setState(4);				signinService.update(signin);			}			Position position = positionService.get(settlementPersonGroup.getPositionID());			//新增工资到余额里面去			accountService.addSalary(settlementperson,wxorder,position);			messageTemplateService.qzGzff(position,settlementperson,userService.get(settlementperson.getUserID()));		}		queryParam.clear();		queryParam.in("settlementID",ids);		List<RewardSettlement> rewardSettlementList = rewardSettlementService.findList(queryParam);		if(rewardSettlementList!=null){			for (RewardSettlement rewardSettlement : rewardSettlementList){				rewardSettlement.setState(true);				Position position = positionService.get(rewardSettlement.getPositionID());				rewardSettlementService.update(rewardSettlement);				accountService.addRewardMoney(rewardSettlement,wxorder,position);			}		}		//设置订单为已经执行回调函数状态		wxorder.setStatus(4);		wxorderService.update(wxorder);		/*if(!CollectionUtils.isEmpty(applySettlements)){			queryParam.clear();			queryParam.put("userID", IJobSecurityUtils.getLoginUserId());			List<String> resumeIds =   resumeService.findIds(queryParam,"id");			queryParam.clear();			queryParam.put("positionID",applySettlements.get(0).getPositionID());			queryParam.in("resumeID",resumeIds);			Beenrecruited beenrecruited = beenrecruitedService.one(queryParam);			beenrecruited.setSettlement(new Date());			beenrecruitedService.update(beenrecruited);		}*/	}	//扫码结算  新增账单 ，状态改为已经结算	@Transactional	public void scanSettleCallback(Wxorder wxorder)throws Exception{		ScanSettle scanSettle  = scanSettleService.get(wxorder.getRefID());		if(scanSettle!=null){			QueryParam queryParam = new QueryParam("scanID",scanSettle.getId());			queryParam.put("status",-1);			List<ScanSettleMember> scanSettleMembers = scanSettleMemberService.findList(queryParam);			BigDecimal sumBig = new BigDecimal(0);			for (ScanSettleMember scanSettleMember :scanSettleMembers){				sumBig = sumBig.add(scanSettleMember.getSalary());			}			if(sumBig.doubleValue()!=(new BigDecimal(wxorder.getFee())).divide(new BigDecimal(100)).doubleValue()){				throw new Exception("结算异常：结算金额与实际金额不符。");			}			for(ScanSettleMember scanSettleMember : scanSettleMembers){				scanSettleMember.setStatus(1);				Account account = new Account();				account.setMoney(scanSettleMember.getSalary());				account.setIsPass(Boolean.TRUE);				account.setIsIn(Boolean.TRUE);				account.setType(Account.QZ_SCAN_SALARY);				account.setUserID(scanSettleMember.getCreateBy());				if(scanSettleMember.getSxf()!=null&&scanSettleMember.getSxf().compareTo(BigDecimal.ZERO)>0){					account.setMark("扫码结算薪资"+scanSettleMember.getDays()+"天，扫码结算薪资共"+(scanSettleMember.getSalary().subtract(scanSettleMember.getSxf()))+"元，其中包含企业另赠送您"+scanSettleMember.getSxf()+"元用于抵扣提现手续费");				}else{					account.setMark("扫码结算薪资"+scanSettleMember.getDays()+"天，扫码结算薪资共"+scanSettleMember.getSalary()+"元");				}				account.setOrderNo(wxorder.getCode());				accountService.add(account);				scanSettleMemberService.update(scanSettleMember);				Position position = new Position();				position.setTitle(scanSettle.getTitle());				Settlementperson settlementperson = new Settlementperson();				settlementperson.setSettlementMoney(scanSettleMember.getSalary());				settlementperson.setSxf(scanSettleMember.getSxf());				User user = userService.get(scanSettleMember.getCreateBy());				messageTemplateService.qzGzff(position,settlementperson,user);			}			/*scanSettle.setStatus(Boolean.TRUE);			scanSettleService.update(scanSettle);*/			wxorder.setStatus(4);			wxorderService.update(wxorder);			//如果有redis則做處理			try{				RedisUtil.setStringValue("SCANSETTLE:"+scanSettle.getCode(),"success",60L);			}catch (Exception e){				e.printStackTrace();			}		}else{			throw new Exception("找不到已支付职位");		}	}	@Transactional(rollbackFor=Exception.class)	public ScanSettle toScanSettlement(ScanSettle scanSettle)throws Exception{		QueryParam queryParam = new QueryParam("scanID",scanSettle.getId());		queryParam.put("status",-1);		reBackScanMenbers(queryParam);		return updateScanSettlementInfo(scanSettle);	}	//修改人数订单	@Transactional(rollbackFor=Exception.class)	public ScanSettle updateScanSettlementInfo(ScanSettle scanSettle)throws Exception{		BigDecimal totalSalary  = BigDecimal.ZERO;		Integer count = 0 ;		if(!CollectionUtils.isEmpty(scanSettle.getScanSettleMemberList())){			QueryParam queryParam = new QueryParam();			queryParam.put("scanID",scanSettle.getId());			queryParam.put("status",1);			List<ScanSettleMember> scanSettleMembers = scanSettleMemberService.findList(queryParam);			for (ScanSettleMember scanSettleMember : scanSettleMembers){				if(StringUtils.isEmptyString(scanSettleMember.getCreateBy())){					throw new IJobException("结算人员中有未实名认证的用户");				}				totalSalary = totalSalary.add(scanSettleMember.getSalary());			}			for(ScanSettleMember scanSettleMember : scanSettle.getScanSettleMemberList()){				ScanSettleMember temp = scanSettleMemberService.get(scanSettleMember.getId());				scanSettleMember.setVersion(temp.getVersion());				scanSettleMember.setStatus(-1);				scanSettleMemberService.update(scanSettleMember);				totalSalary = totalSalary.add(scanSettleMember.getSalary());				count++;			}		}else{			throw new Exception("请选择至少一项");		}		scanSettle.setDailySalary(totalSalary);		scanSettle.setSize(count);		/*scanSettleService.update(scanSettle);*/		return scanSettle;	}	//把以前等待支付的数据改成带结算的状态。	public void reBackScanMenbers(QueryParam queryParam) throws Exception{		List<ScanSettleMember> scanSettleMembers1 = scanSettleMemberService.findList(queryParam);		for (ScanSettleMember scanSettleMember : scanSettleMembers1){			if(scanSettleMember.getStatus()==-1){				scanSettleMember.setStatus(0);				scanSettleMemberService.update(scanSettleMember);			}		}	}	public List<Position> historyPosition(QueryParam queryParam){		return this.getDao().historyPosition(queryParam);	}}