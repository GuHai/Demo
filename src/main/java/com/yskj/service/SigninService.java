package com.yskj.service;import com.yskj.dao.PositionDao;import com.yskj.dao.SigninDao;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.service.auth.UserService;import com.yskj.service.base.AbstractService;import com.yskj.utils.*;import org.apache.shiro.util.CollectionUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.*;@Servicepublic class SigninService extends AbstractService {	@Autowired    private SigninDao signinDao;	@Autowired	private BondtransactionService bondtransactionService;	@Autowired	private BeenrecruitedService beenrecruitedService;	@Autowired	private WxorderService wxorderService;	@Autowired	private TodayJobService todayJobService;	@Autowired	private PositionDao positionDao;	@Autowired	private MessageTemplateService messageTemplateService;	@Autowired	private PersonalauthenService personalauthenService;	@Autowired	private EnterpriseauthenService enterpriseauthenService;	@Autowired	private UserService userService;	@Autowired	private LocaltioninfoService localtioninfoService;	@Autowired	private ForwardShareUserBeenrecruitedService forwardShareUserBeenrecruitedService ;	@Autowired	private RedPacketReceiveService redPacketReceiveService ;	@Autowired	private WeChatService weChatService ;	@Autowired	private IndemnityService indemnityService;	@Autowired	private AttachmentService attachmentService;	@Autowired	private ResumeService resumeService ;	public SigninService() {		super();	}	@Override	public SigninDao getDao() {		return this.signinDao;	}	public List<Beenrecruited> getSigninInfoOfTrainingOrWorking(QueryParam queryParam){		return signinDao.getSigninInfoOfTrainingOrWorking(queryParam);	}	public Signin getNewInfo(QueryParam queryParam){		return signinDao.getNewInfo(queryParam);	}	public Long getTodaySignCount(QueryParam queryParam){		return signinDao.getTodaySignCount(queryParam);	}	public List<Beenrecruited> getDisquInfo(QueryParam queryParam){		return signinDao.getDisquInfo(queryParam);	}	public List<Signin> mapList(QueryParam queryParam){		return signinDao.mapList(queryParam);	}	public List<Beenrecruited> unconfirmedSignin(QueryParam queryParam){		return signinDao.unconfirmedSignin(queryParam);	}	public Integer unconfirmedSigninCount(QueryParam queryParam){		return signinDao.unconfirmedSigninCount(queryParam);	}	@Transactional(rollbackFor=Exception.class)	public void toSignBack(Signin signin)throws Exception{		QueryParam queryParam = new QueryParam();		queryParam.put("userID",IJobSecurityUtils.getLoginUserId());		queryParam.put("positionID",signin.getPositionID());		Date now = new Date();		queryParam.put("signTime",now);		Signin exsign  = this.one(queryParam);		if(exsign!=null) {			if(exsign.getSignBack()!=null){				throw new IJobException("您已经签过退了，请不要重复签退");			}else{				exsign.setBackAddress(signin.getAddress());				exsign.setSignBack(now);				if(StringUtils.isNotEmptyString(signin.getMark())){					exsign.setMark(signin.getMark());				}				exsign.setBackAttachment(UUIDGenerator.randomUUID());				if(!CollectionUtils.isEmpty(signin.getAttachmentList())){ //如果图片不为空，单独处理					for(Attachment attachment : signin.getAttachmentList()){						attachment.setRefID(exsign.getBackAttachment());						attachmentService.add(attachment);					}				}				this.persistenceAndChild(exsign);			}		}else{			throw new IJobException("您还没有签到，请先去签到");		}	}	//如果还没有退还保证金，则退回保证金，修改签到引起的报名表时间，	@Transactional(rollbackFor=Exception.class)	public void toSignIn(Signin signin)throws Exception{		QueryParam queryParam = new QueryParam();		queryParam.put("userID",IJobSecurityUtils.getLoginUserId());		queryParam.put("positionID",signin.getPositionID());		Date now = new Date();		queryParam.put("signTime",now);		Signin exsign  = this.one(queryParam);		if(exsign!=null){			signin.setId(exsign.getId());			signin.setVersion(exsign.getVersion());			if(exsign.getState()!=9){				throw  new IJobException("你已经签过到了，请不要重复签到");			}		}		queryParam.clear();		queryParam.put("createBy",IJobSecurityUtils.getLoginUserId());		queryParam.put("positionID",signin.getPositionID());		Beenrecruited beenrecruited = beenrecruitedService.one(queryParam);		if(!DateUtils.isWorkDayByToday(beenrecruited.getWorkDate())){			throw  new IJobException("你今天没有工作安排，不能签到");		}		signin.setUserID(IJobSecurityUtils.getLoginUserId());		signin.setState(0);		signin.setSignTime(now);		this.persistenceAndChild(signin);		//不能退保证金，必须先确认到岗才能退保证金		//bondtransactionService.returnQzBond(signin.getPositionID(),IJobSecurityUtils.getLoginUserId());		if(signin.getSigninType()==2){//面试			if(beenrecruited.getInterview()==null){				beenrecruited.setInterview(new Date());				beenrecruitedService.update(beenrecruited);			}		}else if(signin.getSigninType()==3){			if(beenrecruited.getTrain()==null){				beenrecruited.setTrain(new Date());				beenrecruitedService.update(beenrecruited);			}		}else if(signin.getSigninType()==4){			if(beenrecruited.getWork()==null){				if(beenrecruited.getWork()==null){					beenrecruited.setWork(new Date());					beenrecruitedService.update(beenrecruited);				}			}		}		Position position = positionDao.get(signin.getPositionID());		String industryName ="";		queryParam.clear();		queryParam.put("userID",position.getUserID());		Enterpriseauthen enterpriseauthen = enterpriseauthenService.one(queryParam);		if(enterpriseauthen!=null){			industryName  = enterpriseauthen.getEnterpriseName();		}else{			Personalauthen personalauthen = personalauthenService.one(queryParam);			if(personalauthen!=null){				industryName = personalauthen.getRealName();			}		}		User user = userService.get(position.getUserID());	/*	Localtioninfo localtioninfo  = localtioninfoService.get(position.getWorkPalce());		position.setWorkPlace(localtioninfo);*/	    position.setWorkPlace(signin.getAddress());		messageTemplateService.zpQdtx(industryName,position,IJobSecurityUtils.getLoginUser(),signin,user.getWeChatNo());	}	public List<Beenrecruited> noSignin(QueryParam queryParam) {		return signinDao.noSignin(queryParam);	}	public Integer noSigninCount(QueryParam queryParam){		return signinDao.noSigninCount(queryParam) ;	}	@Transactional	public void sureSignin(QueryParam queryParam)throws Exception{		//首先确认签到		signinDao.sureSignin(queryParam);		//每个人都退还保证金		for(String userID : (List<String>)queryParam.getCondition().get("userIdList")){			bondtransactionService.returnQzBond(queryParam.getCondition().get("positionID").toString(),userID, Account.RE_QZ_BOND);		}	}	public void changeSigninType(QueryParam queryParam){		signinDao.changeSigninType(queryParam);	}	public Map<String,Integer> signinSureCountMap(QueryParam queryParam){		return signinDao.signinSureCountMap(queryParam);	}	public Map<String,Integer> signinCountMap(QueryParam queryParam){		return signinDao.signinCountMap(queryParam);	}	public Map<String,Integer> noSigninCountMap(QueryParam queryParam){		return signinDao.noSigninCountMap(queryParam);	}	public List<Signin> signInmapList(QueryParam queryParam){		return signinDao.signInmapList(queryParam);	}	public Signin infomapOne(QueryParam queryParam)throws Exception{		return this.signinDao.infomapOne(queryParam);	}	@Transactional(rollbackFor=Exception.class)	public void changeWorkState(List<Signin> ids,Integer state) throws Exception{		for(Signin signin1  : ids){			Signin signin = this.get(signin1.getId());			signin.setState(state);			this.update(signin);			//确认到岗，并且是最后一天上班了，则需要退保证金，新增工作时间			if(state == 2){				beenrecruitedService.confirmedPost(signin);			}else if(state == 9){				beenrecruitedService.confirmedUnPost(signin,IJobSecurityUtils.getLoginUserId());			}		}	}	@Transactional	public Beenrecruited signUpCallback(Wxorder wxorder)throws Exception{		Bondtransaction bond = null;		if(wxorder.getId()!=null) {			bond = bondtransactionService.createBond(wxorder, positionDao.get(wxorder.getRefID()));		}		Position position = positionDao.get(wxorder.getRefID());		//修改报名状态为已经缴纳保证金，并且算出来 今天是不是有工作		QueryParam queryParam = new QueryParam();		queryParam.put("createBy",IJobSecurityUtils.getLoginUserId());		queryParam.put("positionID",wxorder.getRefID());		queryParam.put("isDeleted",null);		queryParam.put("dismiss","all");		Beenrecruited beenrecruited = beenrecruitedService.one(queryParam);		Boolean isVerified = personalauthenService.isVerified();		if(isVerified){ //如果个人验证了就是1，如果没有验证就是2			beenrecruited.setState(1); //状态设置为已经报名待录取			beenrecruited.setResumeID(personalauthenService.getResumeID()); //关联上简历ID			User u = userService.get(position.getUserID());			messageTemplateService.zpBmtx(position,IJobSecurityUtils.getLoginUser(),u.getWeChatNo(),beenrecruited);		}else{			beenrecruited.setState(2);		}		beenrecruited.setDeleted(false);		beenrecruited.setInitDismiss(true);		if(bond==null){			beenrecruited.setPayBond(new Date());		}else{			beenrecruited.setPayBond(bond.getCreateTime());		}		beenrecruitedService.update(beenrecruited);		if(wxorder.getId()!=null) {			//修改微信订单状态为回调函数已执行			wxorder.setStatus(4);			wxorderService.update(wxorder);		}	    queryParam.clear();		queryParam.put("beenrecruitedId",beenrecruited.getId());		ForwardShareUserBeenrecruited forwardShareUserBeenrecruited = forwardShareUserBeenrecruitedService.one(queryParam);		if(forwardShareUserBeenrecruited!=null){			forwardShareUserBeenrecruited.setIsReportToDuty(beenrecruited.getState());			forwardShareUserBeenrecruited.setIsActivation(true);			forwardShareUserBeenrecruitedService.update(forwardShareUserBeenrecruited);		}		queryParam.clear();		queryParam.put("beenrecruitedID",beenrecruited.getId());		List<RedPacketReceive> redPacketReceiveList = redPacketReceiveService.findList(queryParam);		if(redPacketReceiveList!= null){			if(redPacketReceiveList.size()==2){				redPacketReceiveList.get(0).setBeenrecruitedState(beenrecruited.getState());				redPacketReceiveList.get(0).setIsActivation(true);				redPacketReceiveList.get(1).setBeenrecruitedState(beenrecruited.getState());				redPacketReceiveList.get(1).setIsActivation(true);				redPacketReceiveService.update(redPacketReceiveList.get(0));				redPacketReceiveService.update(redPacketReceiveList.get(1));			}		}		beenrecruited.setPosition(position);		return beenrecruited ;	}	@Transactional(rollbackFor=Exception.class)	public void signUpCallbackNoPay(String positionID)throws Exception{		Wxorder wxorder = new Wxorder();		wxorder.setRefID(positionID);		Beenrecruited beenrecruited  = this.signUpCallback(wxorder);		Indemnity indemnity = new Indemnity();		indemnity.setStatus(0);		indemnity.setMoney(beenrecruited.getPosition().getLiquidatedDamages());		indemnity.setUserID(IJobSecurityUtils.getLoginUserId());		indemnity.setType(1);		indemnity.setPositionID(positionID);		indemnityService.add(indemnity);	}	//处理签到信息，如果已经签到了，招聘者没有确认，则算已经到岗，如果没有签到，则算未到岗	@Transactional(rollbackFor=Exception.class)	public void processSigninByTask()throws Exception{		//查询出所有已签到，还未确认的信息 0是为确认 1 是已经确认 都要变成2 结束工作		QueryParam queryParam = new QueryParam();		queryParam.in("state", CollectionUtils.asList("0,1".split(",")));		queryParam.put("settleDate",new Date(new Date().getTime()-12*3600000));		List<Signin> signins = this.findList(queryParam);		for(Signin signin : signins){			signin.setState(2);			this.update(signin);			beenrecruitedService.confirmedPost(signin);		}		//查询所有没有签到的		queryParam.clear();		queryParam.put("settleDate",new Date(new Date().getTime()-12*3600000));		List<TodayJob> todayJobs = todayJobService.unSignList(queryParam);		for(TodayJob todayJob : todayJobs){			Position position = positionDao.get(todayJob.getPositionID());			Signin signin = new Signin();			signin.setPositionID(todayJob.getPositionID());			signin.setUserID(todayJob.getUserID());			beenrecruitedService.confirmedUnPost(signin,position.getUserID());		}	}	//查询所有报了名，已经过了工作日期了，还没有录取他的，赶紧给他退回保证金	@Transactional	public void processSignupNoSure()throws Exception{		QueryParam queryParam = new QueryParam();		queryParam.put("state",1);		List<Beenrecruited> beenrecruiteds =  beenrecruitedService.findList(queryParam);		for(Beenrecruited beenrecruited : beenrecruiteds){			//判断是不是最后一天，如果是最后一天，则赶紧退出赔钱			if(beenrecruitedService.isLastWorkDay(beenrecruited.getCreateBy(),beenrecruited.getPositionID())){				beenrecruited.setState(6);				beenrecruitedService.updateBeen(beenrecruited);			}		}	}/*	@Transactional(rollbackFor=Exception.class)*/	public Beenrecruited signByScan(String positionID,String workDate)throws Exception{		//检查违约金是否缴纳		if(indemnityService.hasLiquidatedDamages(IJobSecurityUtils.getLoginUserId())){			throw new IJobException("还有违约金没有缴纳");		}		//依次调用后   报名》录取》签到  接口，调用每个接口前检查是否有数据		Map map = new HashMap();		Map tempMap = new HashMap();		tempMap.put("positionID",positionID);		Position position = positionDao.get(positionID);		if(position.getBeenRecruitedSum()==position.getRecruitsSum()){			throw new IJobException("人数已满，不能报名！");		}//		List list = new ArrayList();//		list.add(new Date());//		tempMap.put("workDate",DateUtils.getDateFromArr(list));		tempMap.put("workDate",workDate);		Resume resume = resumeService.one(new QueryParam("userID",IJobSecurityUtils.getLoginUserId()));		if(resume == null){			Personalauthen personalauthen = new Personalauthen();			Weixin weixin = weChatService.one(new QueryParam("userID",IJobSecurityUtils.getLoginUserId()));			personalauthen.setRealName(weixin.getNickname());			if (weixin.getSex()!=null){				personalauthen.setSex(weixin.getSex());			}else{				personalauthen.setSex(1);			}			personalauthenService.generalPersonalAndResume(personalauthen);			resume = resumeService.one(new QueryParam("userID",IJobSecurityUtils.getLoginUserId()));		}		tempMap.put("resumeID",resume.getId());		map.put("beenrecruited",tempMap);		//报名		Result result = beenrecruitedService.qzBm(map);		if ("200".equals(result.getCode())||"403".equals(result.getCode())){			Wxorder wxorder = new Wxorder();			wxorder.setRefID(positionID);			Beenrecruited beenrecruited  = signUpCallback(wxorder);			beenrecruited.setState(4);			//录取			beenrecruitedService.updateBeen(beenrecruited);			return beenrecruited ;		}else if("500".equals(result.getCode())){			throw new IJobException(result.getMsg());		}else if("501".equals(result.getCode())){			Beenrecruited beenrecruited = (Beenrecruited)result.getData();			return beenrecruited ;		}		return null;	}	/*@Transactional*/	/**	 * 快捷结算接口。（已经报废）	 * @param positionID	 * @return	 * @throws Exception	 */	public Position settleByScan(String positionID)throws Exception{		//依次调用后   报名》录取》签到》到岗  接口，调用每个接口前检查是否有数据		try {			/*Map map = new HashMap();			Map tempMap = new HashMap();			tempMap.put("positionID",positionID);			List list = new ArrayList();			list.add(new Date());			tempMap.put("workDate",DateUtils.getDateFromArr(list));			map.put("beenrecruited",tempMap);			//报名			Result result = beenrecruitedService.qzBm(map);			if ("200".equals(result.getCode())||"403".equals(result.getCode())){				Wxorder wxorder = new Wxorder();				wxorder.setRefID(positionID);				signinService.signUpCallback(wxorder);				Beenrecruited beenrecruited = (Beenrecruited)result.getData();				//录取				beenrecruitedService.updateBeen(beenrecruited);				Signin signin = new Signin();				signin.setPositionID(positionID);				signin.setUserID(IJobSecurityUtils.getLoginUserId());				signin.setState(0);				Position position = this.get(positionID);				signin.setSignAddress(position.getWorkPalce());				signin.setSigninType(4);				signinService.toSignIn(signin);			}else if("500".equals(result.getCode())){				throw new IJobException(result.getMsg());			}else if("501".equals(result.getCode())){				Beenrecruited beenrecruited = (Beenrecruited)result.getData();				Signin signin = new Signin();				signin.setPositionID(positionID);				signin.setUserID(IJobSecurityUtils.getLoginUserId());				signin.setState(0);				Position position = this.get(positionID);				signin.setSignAddress(position.getWorkPalce());				signin.setSigninType(4);				signinService.toSignIn(signin);			}*/			Beenrecruited beenrecruited = this.signByScan(positionID,"");			if(beenrecruited != null){				Signin signin = shoudongSign(positionID);				List list = new ArrayList();				list.add(signin);				beenrecruitedService.confirmedPost(signin);				this.changeWorkState(list,2);				Position position = new Position();				position.setBeenrecruited(beenrecruited);				position.setWorkPlace(localtioninfoService.get(signin.getSignAddress()));				return position;			}		}catch (Exception e ){			e.printStackTrace();		}		return null;	}	public Signin shoudongSign(String positionID) throws Exception{		Signin signin = new Signin();		try{			signin.setPositionID(positionID);			signin.setUserID(IJobSecurityUtils.getLoginUserId());			signin.setState(0);			Position position = positionDao.get(positionID);			signin.setSignAddress(position.getWorkPalce());			signin.setSigninType(4);			this.toSignIn(signin);		}catch (IJobException err){			err.printStackTrace();		}catch (Exception e){			e.printStackTrace();			throw new Exception(e.getMessage());		}		return signin ;	}}