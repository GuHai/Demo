package com.yskj.service;import com.yskj.api.ApiBeenrecruitedController;import com.yskj.dao.BeenrecruitedDao;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.service.auth.UserService;import com.yskj.service.base.AbstractService;import com.yskj.utils.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;import java.math.RoundingMode;import java.util.*;@Servicepublic class BeenrecruitedService extends AbstractService {	private final static Logger logger = LoggerFactory.getLogger(ApiBeenrecruitedController.class);	@Autowired    private BeenrecruitedDao beenrecruitedDao;	@Autowired	private TodayJobService todayJobService;	@Autowired	private PositionService positionService;	@Autowired	private BondtransactionService bondtransactionService;	@Autowired	private MessageTemplateService messageTemplateService;	@Autowired	private UserService userService;	@Autowired	private LocaltioninfoService localtioninfoService;	@Autowired	private TomorrowJobService tomorrowJobService;	@Autowired	private ForwardShareUserBeenrecruitedService forwardShareUserBeenrecruitedService ;	@Autowired	private RedPacketReceiveService redPacketReceiveService ;	@Autowired	private AccountService accountService ;	@Autowired	private RedPacketService redPacketService ;	@Autowired	private  GrouplistService grouplistService ;	public BeenrecruitedService() {		super();	}	@Override	public BeenrecruitedDao getDao() {		return this.beenrecruitedDao;	}	public PageParam mapPage(PageParam pageParam)throws Exception{		pageParam.setList(this.getDao().mapPage(pageParam));		return  pageParam;	}	public List<HashMap> findBeenByWorkDate(QueryParam queryParam){		return this.getDao().findBeenByWorkDate(queryParam);	}	public Beenrecruited mapOne(QueryParam queryParam){		return getDao().mapOne(queryParam);	}	/*@Transactional(readOnly = false)	public void saveIntention(Intention intention){		if(StringUtils.isNotEmpty(intention.getJobType())){			for(String str : intention.getJobType().split(",")){				Intentiontype intentiontype = new Intentiontype();				intentiontype.setHTID(str);				intentiontype.setUserID(IJobSecurityUtils.getLoginUserId());				try {					huntingtypeService.add(intentiontype);				} catch (Exception e) {					e.printStackTrace();				}			}		}		if(StringUtils.isNotEmpty(intention.getJobCity())){			for(String str : intention.getJobCity().split(",")){				Intentionaddress intentionaddress = new Intentionaddress();				intentionaddress.setCityID(str);				intentionaddress.setUserID(IJobSecurityUtils.getLoginUserId());				try {					cityService.add(intentionaddress);				} catch (Exception e) {					e.printStackTrace();				}			}		}	}*/	public List<Position> getPositionOfStateIsNoSure(QueryParam queryParam){		return beenrecruitedDao.getPositionOfStateIsNoSure(queryParam);	}	public List<Position> commentList(QueryParam queryParam){		return beenrecruitedDao.commentList(queryParam);	}	public List<Position> getPositionWait(QueryParam queryParam){		return beenrecruitedDao.getPositionWait(queryParam);	}	public List<Position> getPositionOfStateIsWaitToPosition(QueryParam queryParam){		return beenrecruitedDao.getPositionOfStateIsWaitToPosition(queryParam);	}	//报名 今日工作 和支付时间	@Transactional	public void signUpAndTodayIjob(Beenrecruited beenrecruited) throws Exception{		//如果没有报过名，则报名		beenrecruited.setState(0);		beenrecruited.setSignUp(new Date());		/*beenrecruited.setResumeID(beenrecruited.getResumeID());*/		//获取保证金支付时间  这里得查询兼职人员的保证金        this.add(beenrecruited);	/*	QueryParam queryParam = new QueryParam();		queryParam.put("userID",IJobSecurityUtils.getLoginUserId());		queryParam.put("positionID",beenrecruited.getPositionID());		queryParam.put("payerType",1);*/		/*Bondtransaction bondtransaction =  bondtransactionService.one(queryParam);		if(bondtransaction!=null){			beenrecruited.setPayBond(bondtransaction.getCreateTime());		}else{			Position position = positionService.get(beenrecruited.getPositionID());			if(position.getLiquidatedDamages()!=null && position.getLiquidatedDamages().compareTo(BigDecimal.ZERO)>0){				throw new IJobException("请支付保证金");			}		}*/		/*this.add(beenrecruited);		if(DateUtils.isWorkDay(beenrecruited.getWorkDate())){			TodayJob todayJob = new TodayJob();			todayJob.setPositionID(beenrecruited.getPositionID());			todayJob.setUserID(IJobSecurityUtils.getLoginUserId());			todayJob.setBeenID(beenrecruited.getId());			todayJobService.add(todayJob);		}*/	}	@Transactional(rollbackFor=Exception.class)	public void updateBeen(Beenrecruited beenrecruited)throws Exception{		if(beenrecruited.getState() == 4){			//addGroupUser(beenrecruited);		}		insertBeenTime(beenrecruited);		this.update(beenrecruited);	}	/**	 * 录取时自动将求职者添加到群聊中。	 * @param beenrecruited	 * @throws Exception	 */	public void addGroupUser(Beenrecruited beenrecruited) throws Exception{		Grouplist grouplist = new Grouplist();		Map map = this.getOrtherInfo(beenrecruited.getId());		if(map == null ){			Grouplist temp = new Grouplist();			temp.setUserType(1);			temp.setUserNickName(IJobSecurityUtils.getLoginUser().getNickName());			temp.setUserID(IJobSecurityUtils.getLoginUserId());			temp.setId("group_"+ UUIDGenerator.randomUUID());			temp.setGroupID("group_"+UUIDGenerator.randomUUID());			Position position = this.getPositionInfoForGroup(beenrecruited.getId());			temp.setGroupName(position.getTitle());			temp.setPositionID(position.getId());			grouplistService.add(temp);			map = this.getOrtherInfo(beenrecruited.getId());		}		grouplist.setGroupID(map.get("groupID").toString());		grouplist.setGroupName(map.get("title").toString());		Position position = this.getPositionInfoForGroup(beenrecruited.getId());		grouplist.setPositionID(position.getId());		grouplist.setUserType(3);		map = this.getUserBaseInfo(beenrecruited.getId());		grouplist.setUserNickName(map.get("nickName").toString());		grouplist.setUserID(map.get("id").toString());		grouplist.setId("group_"+ UUIDGenerator.randomUUID());		grouplistService.add(grouplist);	}	@Transactional	public void updatePositionWorkDate(Position position,Beenrecruited beenrecruited)throws Exception{		Position savePosition   = new Position();		savePosition.setId(position.getId());		savePosition.setVersion(position.getVersion());		Integer beenSum = (position.getBeenRecruitedSum()!=null?position.getBeenRecruitedSum():0)+DateUtils.getValidDateNum(beenrecruited.getWorkDate(),beenrecruited.getState()==4?1:-1);		savePosition.setBeenRecruitedSum(beenSum);		savePosition.setWorkDate(DateUtils.updateDateNumByBeen(position.getWorkDate(),beenrecruited.getWorkDate(),beenrecruited.getState()==4?-1:1));		positionService.update(savePosition);	}	//自主判断该新增什么时间	@Transactional	public void insertBeenTime(Beenrecruited beenrecruited) throws Exception{		Position position = positionService.get(beenrecruited.getPositionID());//		Beenrecruited beenrecruited1 = this.get(beenrecruited.getId());		QueryParam queryParam = new QueryParam();		queryParam.put("id",beenrecruited.getId());		queryParam.put("version",beenrecruited.getVersion());		Beenrecruited beenrecruited1 = this.one(queryParam);		if(beenrecruited1==null){			throw  new IJobException("该报名已经失效");		}		beenrecruited.setWorkDate(beenrecruited1.getWorkDate());		if (position == null){			position = positionService.get(beenrecruited1.getPositionID());		}		if (beenrecruited.getState() == 2){			beenrecruited.setInterview(new Date());		}else if (beenrecruited.getState() == 3){			beenrecruited.setAdmission(new Date());			if (position.getTrain() == null )				beenrecruited.setState(4);		}else if(beenrecruited.getState()==4){			//我的今日工作必须在录取后才算			if(DateUtils.isWorkDay(beenrecruited1.getWorkDate(),new Date())){				TodayJob todayJob = new TodayJob();				todayJob.setPositionID(beenrecruited1.getPositionID());				todayJob.setUserID(beenrecruited1.getCreateBy());				todayJob.setBeenID(beenrecruited1.getId());				todayJobService.add(todayJob);			}			updatePositionWorkDate(position,beenrecruited); //修改报名后的日期			beenrecruited.setAdmission(new Date());			User user = userService.get(beenrecruited1.getCreateBy());			position.setWorkPlace(localtioninfoService.get(position.getWorkPalce()));			messageTemplateService.qzLq(position,beenrecruited1,user);			//我的明日工作计算			if(DateUtils.isWorkDayByTomorrow(beenrecruited1.getWorkDate())){				TomorrowJob tomorrowJob = new TomorrowJob();				tomorrowJob.setPositionID(beenrecruited1.getPositionID());				tomorrowJob.setUserID(beenrecruited1.getCreateBy());				tomorrowJob.setBeenID(beenrecruited1.getId());				tomorrowJobService.add(tomorrowJob);				Localtioninfo localtioninfo = localtioninfoService.get(position.getAggregate());				position.setGather(localtioninfo);				queryParam.clear();				queryParam.put("userID",position.getUserID());				Personalauthen personalauthen = userService.onePersonal(queryParam);				position.setPersonalauthen(personalauthen);				messageTemplateService.qzMrgz(position,user);			}		}else if (beenrecruited.getState() == 6){//当招聘者选择辞退求职者的时候。            TodayJob todayJob1 = todayJobService.one(new QueryParam("beenID",beenrecruited.getId()));            if(todayJob1!=null){                throw new IJobException("距离工作时间不足24小时，如需辞退求职者请线下协商");            }            TomorrowJob tomorrowJob = tomorrowJobService.one(new QueryParam("beenID",beenrecruited.getId()));            if(tomorrowJob!=null){                Position position1 = positionService.get(beenrecruited.getPositionID());                Integer time = position1.getStartTime()*60*1000;                Date date=new Date();//取时间                Calendar calendar = new GregorianCalendar();                calendar.setTime(date);                calendar.add(calendar.DATE,1);//把日期往后增加一天.整数往后推,负数往前移动                date=calendar.getTime(); //这个时间就是日期往后推一天的结果                date.setHours(0);                date.setMinutes(0);                date.setSeconds(0);                Long marginTime = new Integer(24*60*60*1000).longValue();                if(((date.getTime() + time)-new Date().getTime())<marginTime){                    throw new IJobException("距离工作时间不足24小时，如需辞退求职者请线下协商");                }            }			beenrecruited.setEndWork(new Date());			beenrecruited.setState(null);			beenrecruited.setDismiss(Boolean.TRUE);			//updatePositionWorkDate(position,beenrecruited);//更新辞退后人数加一  直接拒绝，不需要改人次			queryParam.clear();			queryParam =  new QueryParam("userID",beenrecruited1.getCreateBy());			queryParam.put("positionID",position.getId());			TodayJob todayJob = todayJobService.one(queryParam);			todayJobService.physicalDelete(todayJob);			bondtransactionService.returnQzBond(position.getId(),beenrecruited1.getCreateBy(),Account.RE_QZ_BOND);			User user = userService.get(beenrecruited1.getCreateBy());			messageTemplateService.qzWlq(position,beenrecruited1,user);//			beenrecruited.setState(6);		}	}	//确认到岗 如果是最后一天的工作，则需要退保证金，新增工作时间	public void  confirmedPost(Signin signin)throws Exception{		QueryParam queryParam = new QueryParam();		queryParam.put("createBy",signin.getUserID());		queryParam.put("positionID",signin.getPositionID());		Beenrecruited beenrecruited = this.one(queryParam);		if(beenrecruited!=null){			//工作时间为空，则第一次到岗，记录到岗时间，退还保证金			this.updateRedPacketAndForward(beenrecruited);			beenrecruited.setWork(new Date());			this.update(beenrecruited);			//判断是不是最后一天			if(this.isLastWorkDay(signin.getUserID(),signin.getPositionID())){				bondtransactionService.returnQzBond(signin.getPositionID(),signin.getUserID(),Account.RE_QZ_BOND);			}		}else{			throw new IJobException("报名对象不存在");		}	}	//确认未到岗 辞退，赔偿保证金	@Transactional	public void  confirmedUnPost(Signin signin,String toUserID)throws Exception{		QueryParam queryParam = new QueryParam();		queryParam.put("createBy",signin.getUserID());		queryParam.put("positionID",signin.getPositionID());		Beenrecruited beenrecruited = this.one(queryParam);		if(beenrecruited!=null){			beenrecruited.setDismiss(true); //辞退			this.update(beenrecruited);		}		bondtransactionService.compensateZpBond(signin.getPositionID(),signin.getUserID(),toUserID);		Position position = positionService.get(signin.getPositionID());		//需要修改空余人数		beenrecruited.setState(6);		this.updatePositionWorkDate(position,beenrecruited);		Localtioninfo localtioninfo  = localtioninfoService.get(position.getWorkPalce());		position.setWorkPlace(localtioninfo);		messageTemplateService.qzWdg(position,userService.get(signin.getUserID()));	}	//修改保证金  ， 新增余额 ，修噶职位表人数 ，删除报名表，删除今日工作	@Transactional(rollbackFor=Exception.class)	public void cancelInterview(Beenrecruited beenrecruited)throws Exception{		Integer state = beenrecruited.getState();//		beenrecruited.setState(6);		beenrecruited.setDismiss(Boolean.FALSE);		bondtransactionService.returnQzBond(beenrecruited.getPositionID(),IJobSecurityUtils.getLoginUserId(),Account.RE_QZ_BOND);		Long l  = this.update(beenrecruited);		if(l.intValue()==0){  //被用了			Beenrecruited existBeen = this.get(beenrecruited.getId());			if(existBeen.getState()==4){				throw new IJobException("已经被录取了");			}else{				throw new IJobException("已经被拒绝了");			}		}		if(state>=4){			Position position = positionService.get(beenrecruited.getPositionID());//			Integer recruited = position.getBeenRecruitedSum();//			if(recruited==null)recruited = 0;//			position.setBeenRecruitedSum(recruited-1);//			positionService.update(position);			beenrecruited.setState(6);			updatePositionWorkDate(position,beenrecruited);		}		//this.delete(beenrecruited);		QueryParam queryParam  = new QueryParam();		queryParam.put("positionID",beenrecruited.getPositionID());		queryParam.put("beenID",beenrecruited.getId());		queryParam.put("userID",IJobSecurityUtils.getLoginUserId());		TodayJob todayJob = todayJobService.one(queryParam);		if(todayJob!=null){			todayJobService.physicalDelete(todayJob);		}	}	public List<Map> selectYiJieSuan(String positionID){		return beenrecruitedDao.selectYiJieSuan(positionID);	}	//如果是最后一天工作	public Boolean isLastWorkDay(String userID ,String positionID) throws Exception{		QueryParam queryParam  = new QueryParam("createBy",userID);		queryParam.put("positionID",positionID);		Beenrecruited beenrecruited =  this.one(queryParam);		if(beenrecruited!=null && StringUtils.isNotEmptyString(beenrecruited.getWorkDate())){			return DateUtils.isLastWorkDay(beenrecruited.getWorkDate(),new Date());		}else{			return false;		}	}	public Map getUserBaseInfo(String id){		return beenrecruitedDao.getUserBaseInfo(id);	}	public Map getOrtherInfo(String id){		return beenrecruitedDao.getOrtherInfo(id);	}	public Position getPositionInfoForGroup(String id){		return beenrecruitedDao.getPositionInfoForGroup(id);	}	@Transactional	public void updateWorkDate(Beenrecruited beenrecruited)throws Exception{		Long l = this.update(beenrecruited);		if(l>0){			Position position = positionService.get(beenrecruited.getPositionID());			User  u = userService.get(position.getUserID());			messageTemplateService.zpBmxg(position,IJobSecurityUtils.getLoginUser(),u.getWeChatNo(),beenrecruited);		}else{			throw  new IJobException("该数据状态发生改变，不能再修改工作时间了");		}	}	/**	 * 修改红包和转发状态,并且进行红包发放。	 * @param beenrecruited	 * @throws Exception	 */	@Transactional	public void updateRedPacketAndForward(Beenrecruited beenrecruited) throws Exception{		QueryParam queryParam = new QueryParam();		//查询转发数据，并进行工作状态修改		queryParam.put("beenrecruitedId",beenrecruited.getId());		ForwardShareUserBeenrecruited forwardShareUserBeenrecruited = forwardShareUserBeenrecruitedService.one(queryParam);		if(forwardShareUserBeenrecruited!=null){			if(forwardShareUserBeenrecruited.getIsReportToDuty()<4){				forwardShareUserBeenrecruited.setIsReportToDuty(beenrecruited.getState());				forwardShareUserBeenrecruitedService.update(forwardShareUserBeenrecruited);			}		}		Position position = positionService.get(beenrecruited.getPositionID());		//查询红包数据， 并进行工作状态修改。		queryParam.clear();		queryParam.put("beenrecruitedID",beenrecruited.getId());		List<RedPacketReceive> redPacketReceiveList = redPacketReceiveService.findList(queryParam);		if(redPacketReceiveList!=null&&redPacketReceiveList.size()==2){			if(redPacketReceiveList.get(0).getBeenrecruitedState() < 4 && redPacketReceiveList.get(1).getBeenrecruitedState() < 4){				RedPacket redPacket = redPacketService.get(redPacketReceiveList.get(1).getRedPacketId());				if(redPacket.getResidueCount()>0){					redPacketReceiveList.get(0).setBeenrecruitedState(beenrecruited.getState());					redPacketReceiveList.get(1).setBeenrecruitedState(beenrecruited.getState());					redPacketReceiveService.update(redPacketReceiveList.get(0));					accountService.addRedPacket(redPacketReceiveList.get(0));					redPacketReceiveService.update(redPacketReceiveList.get(1));					accountService.addRedPacket(redPacketReceiveList.get(1));					redPacket.setResidueCount(redPacket.getResidueCount()-1);					redPacketService.update(redPacket);					//发送红包通知					sendRedpacket(beenrecruited, userService.get(redPacketReceiveList.get(0).getUserId()),position,redPacketReceiveList.get(0));					sendRedpacket(beenrecruited, userService.get(redPacketReceiveList.get(1).getUserId()),position,redPacketReceiveList.get(1));				}			}		}	}	public void sendRedpacket(Beenrecruited beenrecruited ,User user ,Position position,RedPacketReceive redPacketReceive){		if(beenrecruited.getCreateBy().equalsIgnoreCase(user.getId())){ //自己报名的			messageTemplateService.qzHbtx(user.getWeChatNo(),"你报名了"+position.getTitle()+"职位，获得报名红包奖励",redPacketReceive.getMoney().toString());		}else{ //别人报名的 获得分享红包			messageTemplateService.qzHbtx(user.getWeChatNo(),"你分享的"+position.getTitle()+"职位，有人报名了，获得分享红包奖励",redPacketReceive.getMoney().toString());		}	}	public void bmtxHandler(Beenrecruited beenrecruited){		try{			Position position = positionService.get(beenrecruited.getPositionID());			User  u = userService.get(position.getUserID());			messageTemplateService.zpBmtx(position,IJobSecurityUtils.getLoginUser(),u.getWeChatNo(),beenrecruited);		}catch (Exception e){			e.printStackTrace();		}	}	@Transactional	public Result qzBm(Map map){		//查询简历 简历不存在 跳出		Result result = new Result();		Map tempMap = (Map) map.get("beenrecruited");		Beenrecruited beenrecruited = new Beenrecruited();		beenrecruited.setPositionID(tempMap.get("positionID").toString());		beenrecruited.setWorkDate(tempMap.get("workDate").toString());		if(tempMap.get("resumeID")!=null){			beenrecruited.setResumeID(tempMap.get("resumeID").toString());		}		//首先检查是不是报名自己的工作		try {			Position position = positionService.get(beenrecruited.getPositionID());			if(position!=null){				if(2!=position.getOpen()){					result.error("该职位已经关闭了");					return result;				}				if(position.getUserID().equals(IJobSecurityUtils.getLoginUserId())){					result.error("不能报名自己的职位");					return result;				}			}		} catch (Exception e) {			e.printStackTrace();			result.error("获取职位失败");			return  result;		}        /*QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());        queryParam.setOrderByClause("  order by r.isDefault desc ");        List<String> ids = null;        try {            ids = resumeService.findIds(queryParam,"id");        } catch (Exception e) {            e.printStackTrace();        } finally {            if(CollectionUtils.isEmpty(ids)){                result.error("你还没有简历，请先添加简历");                return result;            }        }*/		//查询是否已经报过名了  根据该用户所有的简历查询		QueryParam queryParam  = new QueryParam();		queryParam.put("positionID",beenrecruited.getPositionID());		queryParam.put("createBy",IJobSecurityUtils.getLoginUserId());		queryParam.put("dismiss","all");		Beenrecruited exist = null;		try {			exist =  this.one(queryParam);		} catch (Exception e) {			logger.error(e.getMessage());		} finally {			if(exist!=null){				//如果是报名未确认状态，如果是自己退出，则可以再报名，如果是别人辞退，那滚蛋吧，还要不要脸了               /* if(exist.getState()==0 && Boolean.TRUE!=exist.getDismiss()){                    result.setData(exist);//                    result.error("请补交保证金");                    result.setCode("403");                    return result;                }else {                    result.setData(exist);                    result.error("你已经报名了，请不要重复报名");                    return result;                }                */				if(exist.getState()==0 || Boolean.FALSE == exist.getDismiss()){					//更新下最新的日期					exist.setWorkDate(beenrecruited.getWorkDate());					try {						this.update(exist);					} catch (Exception e) {						e.printStackTrace();					}					result.setData(exist);					result.error("可以重复报名");					result.setCode("403");					return result;				}else{					result.setData(exist);					result.error("你已经报名了，请不要重复报名");					result.setCode("501");					return result;				}			}		}		//如果没有报过名，则报名		beenrecruited.setState(0);		beenrecruited.setSignUp(new Date());		try {//            beenrecruited.setResumeID(beenrecruited.getResumeID());//            return super.add(beenrecruited);			this.signUpAndTodayIjob(beenrecruited);			result.setData(beenrecruited);			if(map.get("forwardID")!=null){				String forwardID = map.get("forwardID").toString();				ForwardShareUserBeenrecruited forwardShareUserBeenrecruited = new ForwardShareUserBeenrecruited();				forwardShareUserBeenrecruited.setIsActivation(false);				forwardShareUserBeenrecruited.setForwardId(forwardID.replace("-",""));				//设置当前当前用户				forwardShareUserBeenrecruited.setShareUserId(IJobSecurityUtils.getLoginUserId());				forwardShareUserBeenrecruited.setBeenrecruitedId(beenrecruited.getId());				forwardShareUserBeenrecruited.setIsReportToDuty(beenrecruited.getState());				forwardShareUserBeenrecruitedService.add(forwardShareUserBeenrecruited);				//判断是否有分享人				if(map.get("shareUser")!=null){					String shareUser = map.get("shareUser").toString();					queryParam.clear();					queryParam.put("forwardId",forwardID.replace("-",""));					//判断是否存在分享红包					RedPacket redPacket = redPacketService.one(queryParam);					if(redPacket!= null){						addRedPacketReceive(shareUser,beenrecruited,redPacket);						addRedPacketReceive(IJobSecurityUtils.getLoginUserId(),beenrecruited,redPacket);					}				}			}else{				if(map.get("shareUser")!=null){					String shareUser = map.get("shareUser").toString();					RedPacket redPacket = redPacketService.one(new QueryParam("positionID",beenrecruited.getPositionID()));					if(redPacket!=null){						addRedPacketReceive(shareUser,beenrecruited,redPacket);						addRedPacketReceive(IJobSecurityUtils.getLoginUserId(),beenrecruited,redPacket);					}				}			}		} catch (IJobException e){			logger.error(e.getMessage());			result.error(e.getMessage());		}catch (Exception e) {			logger.error(e.getMessage());			result.error("保存失败");		}		return result;	}	public void addRedPacketReceive(String userID,Beenrecruited beenrecruited,RedPacket redPacket) throws Exception{		RedPacketReceive redPacketReceive = new RedPacketReceive() ;		redPacketReceive.setRedPacketId(redPacket.getId());		redPacketReceive.setIsActivation(false);		redPacketReceive.setUserId(userID);		redPacketReceive.setMoney(redPacket.getOneOfMoney().divide(new BigDecimal(2),2, RoundingMode.HALF_UP));		redPacketReceive.setBeenrecruitedState(beenrecruited.getState());		redPacketReceive.setBeenrecruitedID(beenrecruited.getId());		redPacketReceiveService.add(redPacketReceive);	}}