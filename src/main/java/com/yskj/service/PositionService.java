package com.yskj.service;import com.yskj.dao.PositionDao;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.redis.RedisUtil;import com.yskj.redis.model.TemplateTaskPanel;import com.yskj.service.auth.UserService;import com.yskj.service.base.AbstractService;import com.yskj.utils.IJobSecurityUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Async;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;import java.util.Date;import java.util.List;import java.util.Map;@Servicepublic class PositionService extends AbstractService {	@Autowired    private PositionDao positionDao;	@Autowired	private WxorderService wxorderService;	@Autowired	private GrouplistService grouplistService ;	@Autowired	private UserService userService;	@Autowired	private MessageTemplateService messageTemplateService;	@Autowired	private LocaltioninfoService localtioninfoService;	@Autowired	private FollowService followService;	@Autowired	private HuntingtypeService huntingtypeService;    @Autowired    private BondtransactionService bondtransactionService;    @Autowired	private RewardService rewardService;    @Autowired	private ForwardService forwardService;    @Autowired	private RedPacketService redPacketService;    @Autowired	private AccountService accountService;	@Autowired	private IndemnityService indemnityService;	public PositionService() {		super();	}	@Override	public PositionDao getDao() {		return this.positionDao;	}	public List findMyPositionList(QueryParam queryParam){		return positionDao.findMyPositionList(queryParam);	}	public PageParam mapPage(PageParam pageParam){		pageParam.setList(this.getDao().mapPage(pageParam));		return  pageParam;	}	public PageParam simpleMapPage(PageParam pageParam){		pageParam.setList(this.getDao().simpleMapPage(pageParam));		return  pageParam;	}	public PageParam attentionPage(PageParam pageParam){		pageParam.setList(this.getDao().attentionPage(pageParam));		return  pageParam;	}	public PageParam attentionPage1(PageParam pageParam){		pageParam.setList(this.getDao().attentionPage1(pageParam));		return  pageParam;	}	public List<Position> mapList(QueryParam queryParam){		return this.getDao().mapList(queryParam);	}	public List<Position> mapByDistinct(QueryParam queryParam){		return this.getDao().mapByDistinct(queryParam);	}	public PageParam getMyPositionForMeOfZPPage(PageParam pageParam){		pageParam.setList(this.getDao().getMyPositionForMeOfZPPage(pageParam));		return  pageParam;	}	public List<Position> getUserPositionWaitEvaluateInfo(QueryParam queryParam){		return positionDao.getUserPositionWaitEvaluateInfo(queryParam);	}	public List<Position> getMyPositionTemplateList(QueryParam queryParam) throws Exception{		positionDao.deletePositionTemplateOfTitleIsNull();		return positionDao.getMyPositionTemplateList(queryParam);	}	public Position getOnePositionTemplate(QueryParam queryParam){		return positionDao.getOnePositionTemplate(queryParam);	}	public Position getInitPosition(String id){		return positionDao.getInitPosition(id);	}	@Transactional	public Position bondCallback(Wxorder wxorder)throws Exception{		Position position = this.get(wxorder.getRefID());		bondtransactionService.createBond(wxorder,position);		//检查补交的保证金够不够数，如果不够数还是不能为2		BigDecimal total =  position.getLiquidatedDamages().multiply(new BigDecimal(position.getPersonNumDay()));		QueryParam queryParam = new QueryParam();		queryParam.put("userID", IJobSecurityUtils.getLoginUserId());		queryParam.put("positionID",position.getId());		/*List<Bondtransaction> bondtransactions = bondtransactionService.findList(queryParam);		BigDecimal pay = BigDecimal.ZERO;		for(Bondtransaction bondtransaction : bondtransactions){			pay = pay.add(bondtransaction.getPremiumMoney());		}*/		BigDecimal pay = getBondMoneyByPosition(queryParam);		if(pay.compareTo(total)>=0){			position.setOpen(2);			position.setPublishTime(new Date());			this.update(position);		}		//修改订单已回调状态为已经执行回调		wxorder.setStatus(4);		wxorderService.update(wxorder);		if(position.getPublishTime()!=null){			/*Grouplist grouplist = new Grouplist();			//创建职位聊天群			if(StringUtils.isEmpty(position.getId())){				grouplist.setGroupName(position.getTitle());				grouplist.setUserID(IJobSecurityUtils.getLoginUserId());				grouplist.setUserType(1);				grouplist.setUserNickName(IJobSecurityUtils.getLoginUser().getNickName());				grouplist.setId("group_"+ UUIDGenerator.randomUUID());				grouplist.setGroupID("group_"+UUIDGenerator.randomUUID());				grouplist.setPositionID(position.getId());				grouplistService.add(grouplist);			}else {				grouplist.setGroupName(position.getTitle());				grouplist.setPositionID(position.getId());				grouplistService.updateGroupNameTitleByPosition(grouplist);			}*/		}		return position;	}	public BigDecimal getBondMoneyByPosition(QueryParam queryParam)throws Exception{		List<Bondtransaction> bondtransactions = bondtransactionService.findList(queryParam);		BigDecimal pay = BigDecimal.ZERO;		for(Bondtransaction bondtransaction : bondtransactions){			pay = pay.add(bondtransaction.getPremiumMoney());		}		return pay;	}	public Boolean checkClose(String id)throws Exception{		QueryParam queryParam = new QueryParam();		queryParam.put("positionID",id);		Long count = positionDao.getInPositionCount(queryParam);		if(count>0){			return false;		}else{			return true;		}	}	//退招聘者保证金，退求职者保证金	@Transactional	public void exitPosition( Position position) throws Exception{		bondtransactionService.returnQzBond(position.getId(),IJobSecurityUtils.getLoginUserId(),Account.RE_ZP_BOND);		bondtransactionService.closePositionAndReturnBeenBond(position);		this.update(position);		//退回红包		QueryParam queryParam = new QueryParam("positionID",position.getId());		queryParam.put("state",Boolean.TRUE);  //必须要已支付		List<Reward> rewards = rewardService.findList(queryParam);		RedPacket redPacketPosition = redPacketService.one(queryParam);		if(redPacketPosition != null){			redPacketPosition.setDeleted(Boolean.TRUE);			redPacketService.update(redPacketPosition);			//判断红包是否还有钱没有被领完。			if(redPacketPosition.getResidueCount()>0){				accountService.redPacketBack(redPacketPosition);			}		}		if(rewards!=null){			for (Reward reward : rewards){				reward.setDeleted(Boolean.TRUE);				rewardService.update(reward);				queryParam.clear();				queryParam.put("rewardID",reward.getId());				List<Forward> forwards = forwardService.findList(queryParam);				if(forwards!=null){					for (Forward forward : forwards){						forward.setDeleted(Boolean.TRUE);						forwardService.update(forward);						queryParam.clear();						queryParam.put("forwardId",forward.getId());						RedPacket redPacket = redPacketService.one(queryParam);						if(redPacket!=null && redPacket.getResidueCount()!=0){							redPacket.setDeleted(Boolean.TRUE);							redPacketService.update(redPacket);							//判断红包是否还有钱没有被领完。							if(redPacket.getResidueCount()>0){								accountService.redPacketBack(redPacket);							}						}					}				}			}		}	}	public Map selectPositionForChat(String positionID){		return positionDao.selectPositionForChat(positionID);	}	//退还保证金，删除职位,如果报名者还有未上班的天数，辞退，并且退回保证金	@Transactional(rollbackFor=Exception.class)	public void deletePosition(Position position)throws Exception{		this.exitPosition(position);		this.delete(position);	}	public Boolean updatePositionTempDefault(String userID){		try {			positionDao.updatePositionTempDefault(userID);		}catch (Exception e){			return Boolean.FALSE;		}		return Boolean.TRUE;	}	//通知所有人	@Async	public void noticeEverybody(Position position ){		try{			Position findPosition = this.get(position.getId());			if(findPosition.getIsPush()==null  || Boolean.FALSE==findPosition.getIsPush()){				Localtioninfo localtioninfo  = localtioninfoService.get(position.getWorkPalce());				position.setWorkPlace(localtioninfo);				Huntingtype huntingtype =  huntingtypeService.get(position.getWorkTypeID());				position.setHuntingtype(huntingtype);				QueryParam queryParam = new QueryParam();				queryParam.put("isvalid",Boolean.TRUE);				User user = userService.get(position.getUserID());				List<Follow> follows = followService.findList(queryParam);				//设置为已经推送过了				Position saveP = new Position();				saveP.setId(findPosition.getId());				saveP.setVersion(findPosition.getVersion());				saveP.setIsPush(Boolean.TRUE);				this.update(saveP);				for(Follow follow : follows){					//每次都重新检查一遍					follow = followService.get(follow.getId());					Integer times = follow.getZwtimes();					if(times==null || times<3){						/*messageTemplateService.qzZwtz(follow.getOpenID(),user,position);						follow.setZwtimes((follow.getZwtimes()!=null?follow.getZwtimes():0)+1);						Long l = followService.update(follow);						if(l==-1L){ //肯定是冲突了							follow = followService.get(follow.getId());							follow.setZwtimes((follow.getZwtimes()!=null?follow.getZwtimes():0)+1);							followService.update(follow);						}*/						//首先更新次数，防止发送的过程中被别的更新了						follow.setZwtimes((follow.getZwtimes()!=null?follow.getZwtimes():0)+1);						followService.update(follow);						messageTemplateService.qzZwtz(follow.getOpenID(),user,position);					}				}				//推送心跳				RedisUtil.broadcastTask(TemplateTaskPanel.class.getSimpleName());			}		}catch (Exception e){			e.printStackTrace();		}	}	public List<Position> workNumberPosition(QueryParam queryParam){		return this.getDao().workNumberPosition(queryParam);	}	public Long workNumberDSHPositionCount(String workNumberID){		return this.getDao().workNumberDSHPositionCount(workNumberID);	}	public List<Map> getPositionList(String userID){		return this.getDao().getPositionList(userID);	}	public  Long update(Position position) throws Exception{		Long l =0L;		l =   super.update(position);		RedisUtil.hdel(Position.class.getSimpleName(),position.getId());		return l;	}	public  Long persistenceAndChild(Position position) throws Exception{		Long l =0L;		l =   super.persistenceAndChild(position);		RedisUtil.hdel(Position.class.getSimpleName(),position.getId());		return l;	}	public Map chatPosition(String id){		return this.getDao().chatPosition(id);	}}