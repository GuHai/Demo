package com.yskj.service;import com.yskj.dao.ScanSettleDao;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.excel.Salary;import com.yskj.service.base.AbstractService;import com.yskj.service.base.DictCacheService;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.Result;import com.yskj.utils.StringUtils;import com.yskj.utils.UUIDGenerator;import com.yskj.utils.excel.ReadExcelUtil;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Async;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.commons.CommonsMultipartFile;import java.io.File;import java.math.BigDecimal;import java.util.*;import java.util.regex.Matcher;import java.util.regex.Pattern;@Servicepublic class ScanSettleService extends AbstractService {	@Autowired    private ScanSettleDao scanSettleDao;	@Autowired	private ScanSettleMemberService scanSettleMemberService ;	@Autowired	private IndemnityService indemnityService;	@Autowired	private BeenrecruitedService beenrecruitedService;	@Autowired	private PersonalauthenService personalauthenService;	@Autowired	private SalaryImportService salaryImportService;	public ScanSettleService() {		super();	}	@Override	public ScanSettleDao getDao() {		return this.scanSettleDao;	}	public List<ScanSettle> scanSettlemap(QueryParam queryParam){		return scanSettleDao.scanSettlemap(queryParam);	}	public Result newSettleByScan(String code) throws IJobException,Exception{		//检查违约金是否缴纳		if(indemnityService.hasLiquidatedDamages(IJobSecurityUtils.getLoginUserId())){			throw new IJobException("还有违约金没有缴纳");		}		Result result = new Result();		QueryParam queryParam = new QueryParam("code",code);		queryParam.put("isDeleted",false);		ScanSettle scanSettle = scanSettleDao.one(queryParam);        if(scanSettle == null||Boolean.FALSE == scanSettle.getOpen() || Boolean.TRUE  ==scanSettle.getStatus()){            throw new IJobException("该快捷结算通道已经关闭或已经结算，如有疑问请联系商家！");        }		//判断是不是已经存在职位中了		if(StringUtils.isNotEmptyString(scanSettle.getPositionID())){			queryParam.clear();			queryParam.put("positionID",scanSettle.getPositionID());			queryParam.put("createBy",IJobSecurityUtils.getLoginUserId());			Beenrecruited beenrecruited = beenrecruitedService.one(queryParam);			if(beenrecruited!=null && beenrecruited.getState()==4){				throw new IJobException("您已经报名过该职位，并且在工作中了");			}		}		if(scanSettle.getIsEdit()!=null){			if(!scanSettle.getIsEdit()){				throw new IJobException("该职位不可进行扫码结算，如有疑问请联系商家！");			}		}		queryParam.clear();		queryParam.put("scanID",scanSettle.getId());		queryParam.put("createBy", IJobSecurityUtils.getLoginUserId());		ScanSettleMember scanSettleMember = scanSettleMemberService.one(queryParam);;		if(scanSettleMember==null){			scanSettleMember = new ScanSettleMember();			scanSettleMember.setScanID(scanSettle.getId());			scanSettleMember.setStatus(0);			scanSettleMember.setDays(scanSettle.getDays());			scanSettleMember.setSalary(scanSettle.getDailySalary().multiply(new BigDecimal(scanSettle.getDays())));			scanSettleMemberService.add(scanSettleMember);		}else{			throw new IJobException("您已经扫过码了！","001");		}		List<ScanSettleMember> scanSettleMembers = scanSettle.getScanSettleMemberList();		if(scanSettleMembers == null){			scanSettleMembers = new ArrayList<ScanSettleMember>();		}		scanSettleMembers.add(scanSettleMember);		result.listData(scanSettle);		return result ;	}	public List<Map>getMyHistoryPayInfo(String userID){		return getDao().getMyHistoryPayInfo(userID);	}	public List<Salary> lastImportRecord(QueryParam queryParam)throws Exception{		return getDao().lastImportRecord(queryParam);	}    public List<Salary> toPayAgain(QueryParam queryParam)throws Exception{        return getDao().toPayAgain(queryParam);    }	public List<Salary> toPayRecord(QueryParam queryParam)throws Exception{		return getDao().toPayRecord(queryParam);	}	@Async	public void updatePersonal(Personalauthen personalauthen)throws Exception{ //更新实名认证		QueryParam queryParam = new QueryParam();        queryParam.put("realName",StringUtils.isNotEmptyString(personalauthen.getRealName())?personalauthen.getRealName():"438没有名字");        queryParam.put("personIDCard",StringUtils.isNotEmptyString(personalauthen.getPersonIDCard())?personalauthen.getPersonIDCard():"999999没有身份证");        queryParam.put("personPhoneNumber",StringUtils.isNotEmptyString(personalauthen.getPersonPhoneNumber())?personalauthen.getPersonPhoneNumber():"999999没有手机号码");        List<SalaryImport> salaryImports = salaryImportService.findList(queryParam);        for(SalaryImport salaryImport  : salaryImports){            ScanSettleMember scanSettleMember  = scanSettleMemberService.get(salaryImport.getScanID());            scanSettleMember.setCreateBy(personalauthen.getUserID());            scanSettleMemberService.update(scanSettleMember);        }	}	@Transactional(rollbackFor=Exception.class)	public ScanSettle scanSettleUpload(CommonsMultipartFile file, Integer number , BigDecimal total,String positionName,Boolean isEdit)throws Exception{		ScanSettle scanSettle = new ScanSettle();		scanSettle.setDays(1);		scanSettle.setOpen(Boolean.TRUE);		scanSettle.setCode(UUIDGenerator.getRandomString(8));		scanSettle.setStatus(Boolean.FALSE);		scanSettle.setIsImport(Boolean.TRUE);		scanSettle.setTitle(positionName);		scanSettle.setDailySalary(BigDecimal.ONE);		scanSettle.setIsEdit(isEdit);		this.add(scanSettle);		List<String[]> list = ReadExcelUtil.readExcel(file,new String[]{"收款人姓名","收款人身份证","收款人联系电话","薪资金额","工作时长"});		QueryParam queryParam = new QueryParam();		BigDecimal totalSalary = BigDecimal.ZERO;		Set<String> phoneSet = new HashSet<String>();        Set<String> idCardSet = new HashSet<String>();		if(list.size()>0){			for(int i=0;i<list.size();i++){				String[] strs = list.get(i);				Boolean flag = false;				if(strs.length>=4){ //必须单元格超过4个                    for(String str : strs){  //如果里面有一项不为空，为有效数据                        if(StringUtils.isNotEmptyString(str)){                            flag = true;                            break;                        }                    }                }else{                    throw  new IJobException("第"+(i+1)+"条数据薪资错误");                }                if(flag==false)continue;				String name  = strs[0];				String idCard = strs[1];				String phone = strs[2];				String money = strs[3];				if(StringUtils.isEmptyString(name)||StringUtils.isEmptyString(idCard)||StringUtils.isEmptyString(phone)||StringUtils.isEmptyString(money)){					throw  new IJobException("第"+(i+1)+"条数据包含未填写数据");				}				if(!checkIDCard(idCard)){                    throw  new IJobException("第"+(i+1)+"条数据身份证格式错误");                }				if(!checkPhone(phone)){					throw  new IJobException("第"+(i+1)+"条数据手机号码格式错误");				}				BigDecimal salary = new BigDecimal(money).setScale(2,BigDecimal.ROUND_HALF_UP);				if(salary.compareTo(new BigDecimal("0.01"))<0){					throw  new IJobException("第"+(i+1)+"条数据薪资错误");				}				if(salary.compareTo(new BigDecimal(10000))>0){					throw  new IJobException("第"+(i+1)+"条数据代发工资不能超过10000元");				}				idCard = idCard.toUpperCase();				queryParam.clear();				queryParam.put("realName",name);				queryParam.put("personIDCard",idCard);				queryParam.put("personPhoneNumber",phone);                phoneSet.add(phone);                idCardSet.add(idCard);				Personalauthen personalauthen  = personalauthenService.one(queryParam);				/*if(personalauthen==null){					throw  new IJobException("第"+i+"条数据不匹配，求职人员‘"+name+"’找不到或未实名认证");				}*/				ScanSettleMember scanSettleMember = new ScanSettleMember();				scanSettleMember.setId(UUIDGenerator.randomUUID());				scanSettleMember.setScanID(scanSettle.getId());				scanSettleMember.setStatus(0);				scanSettleMember.setDays(scanSettle.getDays());				scanSettleMember.setSalary(salary);				scanSettleMember.addPre();				scanSettleMember.setCreateBy(personalauthen!=null?personalauthen.getUserID():null);				scanSettleMember.setUpdateBy(scanSettleMember.getCreateBy());				scanSettleMemberService.getDao().add(scanSettleMember);                scanSettle.addScanSettleMember(scanSettleMember);				totalSalary = totalSalary.add(salary);				//保存导入状态				SalaryImport salaryImport = new SalaryImport();				salaryImport.setRealName(name);				salaryImport.setPersonIDCard(idCard);				salaryImport.setPersonPhoneNumber(phone);				salaryImport.setSalary(salary);				salaryImport.setScanID(scanSettleMember.getId());				salaryImport.setSort(i);				salaryImportService.add(salaryImport);			}            if(scanSettle.getScanSettleMemberList().size()!=number){				throw  new IJobException("人数不匹配，请检查");			}			if(phoneSet.size()!=scanSettle.getScanSettleMemberList().size()){				throw  new IJobException("手机号码有重复，请检查");			}			if(idCardSet.size()!=scanSettle.getScanSettleMemberList().size()){                throw  new IJobException("身份证有重复，请检查");            }			if(totalSalary.compareTo(total)!=0){				throw  new IJobException("总金额不匹配，请检查");			}			//发工资的文件需要保存起来			File tempFile = new File(DictCacheService.UploadPath + File.separator + "iJob/file/temp" );			if (!tempFile.exists()) {				tempFile.mkdirs();			}			File newFile = new File(tempFile.getPath()+ File.separator +scanSettle.getId()+"."+file.getOriginalFilename().split("\\.")[file.getOriginalFilename().split("\\.").length-1]);			file.transferTo(newFile);		}else{			throw  new IJobException("请不要上传空数据模板");		}		return  scanSettle;	}	private Boolean checkIDCard(String IdCard){        String regEx = "^\\d{6}(18|19|20)?\\d{2}(0[1-9]|1[012])(0[1-9]|[12]\\d|3[01])\\d{3}(\\d|X|x)$";        Pattern pattern = Pattern.compile(regEx);        Matcher matcher = pattern.matcher(IdCard);        // 字符串是否与正则表达式相匹配        return  matcher.matches();    }	private Boolean checkPhone(String IdCard){		String regEx = "^[1][3,4,5,7,8,9][0-9]{9}$";		Pattern pattern = Pattern.compile(regEx);		Matcher matcher = pattern.matcher(IdCard);		// 字符串是否与正则表达式相匹配		return  matcher.matches();	}    @Transactional	public void deleted(String scanID,QueryParam queryParam) throws Exception{		ScanSettle scanSettle = this.get(scanID);		this.physicalDelete(scanSettle);		queryParam.put("status",null);		List<String> ids = scanSettleMemberService.findIds(queryParam,"id");		queryParam.clear();		queryParam.in("scanID",ids);		salaryImportService.deleteSalaryInfoList(queryParam);		scanSettleMemberService.deleteSalaryInfo(scanID);	}}