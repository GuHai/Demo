package com.yskj.service;import com.yskj.dao.PostRecommendBrokerDao;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.service.base.AbstractService;import com.yskj.utils.DateUtils;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.Result;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Date;import java.util.List;import java.util.Map;@Servicepublic class PostRecommendBrokerService extends AbstractService {	@Autowired    private PostRecommendBrokerDao postRecommendBrokerDao;	@Autowired	private RecommendService recommendService ;	@Autowired	private PersonalauthenService personalauthenService;    @Autowired    private ResumeService resumeService ;	public PostRecommendBrokerService() {		super();	}	@Override	public PostRecommendBrokerDao getDao() {		return this.postRecommendBrokerDao;	}	@Transactional	public void workerReport(String fullID,String brokerCode) throws Exception {		QueryParam queryParam = new QueryParam("createBy", IJobSecurityUtils.getLoginUserId());		queryParam.put("isDeleted",false);		Resume resume = resumeService.one(queryParam);		if(resume.getPhoneNumber()==null||"".equals(resume.getPhoneNumber())){			throw new IJobException("请补全简历信息");		}		Recommend recommend = recommendService.one(new QueryParam("phoneNumber",resume.getPhoneNumber()));		if(recommend==null){			recommend = new Recommend();			initRecommend(recommend,resume);		}		queryParam.clear();		queryParam.put("postID",fullID);		queryParam.put("recommendID",recommend.getId());		PostRecommendBroker postRecommendBroker = getDao().one(queryParam);		if(postRecommendBroker == null||(postRecommendBroker.getIsLike()!=null&&postRecommendBroker.getStatus()==null)){			Integer isLike = 0 ;			String id = null;			Integer version = 1 ;			if(postRecommendBroker!=null&&postRecommendBroker.getIsLike()!=null){				isLike = postRecommendBroker.getIsLike();				id = postRecommendBroker.getId();				version = postRecommendBroker.getVersion();			}			postRecommendBroker = getWorkingJob(recommend.getId());			if(postRecommendBroker!=null){				throw new IJobException("你当前已经有份工作正在工作中");			}else{				postRecommendBroker = new PostRecommendBroker();				if(id != null){					postRecommendBroker.setId(id);				}				if(!"0".equals(brokerCode)){					postRecommendBroker.setBrokerID(brokerCode);				}				postRecommendBroker.setRecommendID(recommend.getId());				postRecommendBroker.setPostID(fullID);				postRecommendBroker.setStatus(1);				postRecommendBroker.setIsLike(isLike);				postRecommendBroker.setVersion(version);				this.persistence(postRecommendBroker);			}		}else{			int day = (int) ((new Date()).getTime() - (postRecommendBroker.getUpdateTime().getTime()) / (1000*3600*24));			if(day>6){				postRecommendBroker.setSetBrokerIDNull("null");				this.update(postRecommendBroker);			}			throw new IJobException("不可以重复报名");		}	}	public Map allFullStatusInfo(String userID){		return getDao().allFullStatusInfo(userID);	}	/**	 * 查询用户是否已经有份工作正在就职中。	 * @param recommendID 求职人ID	 * @return	 */	public PostRecommendBroker getWorkingJob(String recommendID){		return getDao().getWorkingJob(recommendID);	}	public List<PostRecommendBroker> getFullJobInfoByStatus(QueryParam queryParam){		return getDao().getFullJobInfoByStatus(queryParam);	}	public PageParam deliveredResumePage(PageParam pageParam){		pageParam.setList(getDao().deliveredResumePage(pageParam));		return pageParam ;	}	@Transactional	public void collectionPost(PostRecommendBroker postRecommendBroker)throws Exception{		QueryParam queryParam = new QueryParam();        Resume resume = resumeService.one(new QueryParam("userID",IJobSecurityUtils.getLoginUserId()));        if(resume==null){			throw new IJobException("请完善简历信息...");		}		Recommend recommend = recommendService.one(new QueryParam("phoneNumber",resume.getPhoneNumber()));		if(recommend==null){			recommend = new Recommend();			initRecommend(recommend,resume);		}		postRecommendBroker.setRecommendID(recommend.getId());		queryParam.put("recommendID",recommend.getId());		queryParam.put("postID",postRecommendBroker.getPostID());		PostRecommendBroker temp = this.one(queryParam);		if(temp !=null){			postRecommendBroker.setId(temp.getId());			postRecommendBroker.setVersion(temp.getVersion());		}		this.persistence(postRecommendBroker);	}	public void initRecommend(Recommend recommend,Resume resume) throws Exception{		recommend.setName(resume.getResumeName());		recommend.setPhoneNumber(resume.getPhoneNumber());		recommend.setSex(IJobSecurityUtils.getLoginUser().getSex());		recommend.setAge(resume.getAge());		recommendService.add(recommend);	}	public Map getMyRecommendInfo(String userID){		Map map = getDao().getMyRecommendInfo(userID);		map.put("user",IJobSecurityUtils.getLoginUser());		return map;	}	public List<PostRecommendBroker> myBrokerPersonDetail(QueryParam queryParam){		return getDao().myBrokerPersonDetail(queryParam);	}}