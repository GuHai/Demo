package com.yskj.service;import com.yskj.dao.BrokerDao;import com.yskj.exception.IJobException;import com.yskj.models.Broker;import com.yskj.models.Personalauthen;import com.yskj.models.QueryParam;import com.yskj.models.WorkList;import com.yskj.models.auth.User;import com.yskj.models.enums.Examine;import com.yskj.service.auth.UserService;import com.yskj.service.base.AbstractService;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.SignUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@Servicepublic class BrokerService extends AbstractService {	@Autowired    private BrokerDao brokerDao;	@Autowired	private PersonalauthenService personalauthenService ;	@Autowired	private MessageTemplateService messageTemplateService ;	@Autowired	private UserService userService ;	@Autowired	private WorkListService workListService ;	public BrokerService() {		super();	}	@Override	public BrokerDao getDao() {		return this.brokerDao;	}	@Transactional	public void becomeBroker()throws Exception {		QueryParam queryParam = new QueryParam();		queryParam.put("createBy",IJobSecurityUtils.getLoginUserId());		Broker broker = new Broker();		broker = this.one(queryParam);		queryParam.clear();		queryParam.put("userID",IJobSecurityUtils.getLoginUserId());		Personalauthen personalauthen = personalauthenService.one(queryParam);		if(personalauthen==null){			throw new IJobException("尚未实名认证，请先进行实名认证");		}		if(personalauthen.getStatus()!=1){			throw new IJobException("审核中...");		}		if(broker==null){            broker = new Broker();			broker.setName(personalauthen.getRealName());			broker.setLevel(1);			broker.setCode(SignUtils.getRandomStringByLength(16));			broker.setStatus(1);			this.add(broker);			//推送			WorkList workList = new WorkList();			workList.updateType(Examine.Broker);			workList.setStatus(1);			workList.setCallback("/api/FullTimeController/brokerCallback");			workList.setRefID(broker.getId());			workList.setUrl("/h5/qz/mine/broker_check?data.smrz.userID="+IJobSecurityUtils.getLoginUserId());			messageTemplateService.tpBrokerGdxx2(workList);		}else{			queryParam.clear();			queryParam.put("refID",broker.getId());			broker.setStatus(1);			this.update(broker);			//需要修改工单状态			WorkList workList = workListService.one(queryParam);			workList.setStatus(1);			messageTemplateService.tpBrokerGdxx2(workList);		}	}	@Transactional	public void brokerCallback(WorkList workList) throws Exception{		Broker broker = this.get(workList.getRefID());		if(workList.getStatus()==2){ //通过			broker.setStatus(workList.getStatus());		}else if(workList.getStatus()==3){//不通过			broker.setStatus(3);			User user = userService.get(workList.getCreateBy());			messageTemplateService.ptShtz(user.getWeChatNo(),"经纪人审核",workList.getMsg());		}		this.update(broker);	}}