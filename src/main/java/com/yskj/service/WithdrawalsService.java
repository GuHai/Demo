package com.yskj.service;import com.google.gson.Gson;import com.yskj.dao.AccountDao;import com.yskj.dao.WithdrawalsDao;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.service.auth.UserService;import com.yskj.service.base.AbstractService;import com.yskj.utils.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.servlet.http.HttpServletRequest;import java.math.BigDecimal;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;@Servicepublic class WithdrawalsService extends AbstractService {	@Autowired    private WithdrawalsDao withdrawalsDao;	@Autowired	private UserService userService;	@Autowired	private WeChatService weChatService;	@Autowired	private AccountDao accountDao;	@Autowired	private PersonalauthenService personalauthenService;	@Autowired	private TxTaskService txTaskService;	public WithdrawalsService() {		super();	}	@Override	public WithdrawalsDao getDao() {		return this.withdrawalsDao;	}	public Double getPriceSum(String id){		return withdrawalsDao.getPriceSum(id);	}	public Double getReturnBond(String id){		return withdrawalsDao.getReturnBond(id);	}	public String getNextCode(){		return getCodeTitle("T")+ DateUtils.getCurrTime()+ SignUtils.getRandomStringByLength(17);	}	private   String getCodeTitle(String type ){		return "T";  //T 就是体现的意思啦	}	/*<xml>	<return_code><![CDATA[SUCCESS]]></return_code>	<return_msg><![CDATA[支付失败]]></return_msg>	<mch_appid><![CDATA[wxdfd5dbfc4e2053b2]]></mch_appid>	<mchid><![CDATA[1507983451]]></mchid>	<result_code><![CDATA[FAIL]]></result_code>	<err_code><![CDATA[NOTENOUGH]]></err_code>	<err_code_des><![CDATA[请到商户平台充值后再重试.]]></err_code_des>	</xml>*/	public void withdrawalCash(TxTask txTask, TxAdmin txAdmin, HttpServletRequest request)throws Exception{		Withdrawals withdrawals = this.get(txTask.getTxID());		QueryParam queryParam = new QueryParam();		queryParam.put("orderNo",withdrawals.getSettlementOrderNumber());		queryParam.put("type",5);		Account tx = accountDao.one(queryParam);		queryParam.clear();		queryParam.put("orderNo",withdrawals.getSettlementOrderNumber());		queryParam.put("type",9);		Account sxf = accountDao.one(queryParam);		if(Boolean.TRUE != tx.getIsPass()){			if(StringUtils.isNotEmptyString(tx.getMd5())&&tx.getMd5().equals(tx.generalMd5())){				if(tx.getMoney().compareTo(withdrawals.getPrice())==0){					if(Boolean.TRUE != withdrawals.getThirdState()){ //状态是未提现状态						//获取提现人姓名和微信ID						User user = userService.get(withdrawals.getPresentParty());						queryParam.clear();						queryParam.put("userID",withdrawals.getPresentParty());						Personalauthen personalauthen  = personalauthenService.one(queryParam);						user.setRealName(personalauthen.getRealName());						withdrawals.setUser(user);						String check =  personalauthenService.getCheckName(user.getId());//	NO_CHECK：不校验真实姓名  FORCE_CHECK：强校验真实姓名;						Map map = weChatService.withdrawCash(withdrawals, IJobUtils.getIpAddress(request),check);						/*Map map = new HashMap();						map.put("result_code","SUCCESS");						map.put("payment_no", UUIDGenerator.getRandomString(8));*/						if(map!=null){							if("FAIL".equals(map.get("result_code").toString())){								throw new IJobException(map.get("err_code_des").toString());							}else if("SUCCESS".equals(map.get("result_code").toString())){								//更新提现任务，让他不能在提现了  直接物理删除								//					txTask.setStatus(Boolean.TRUE);								//					txTaskService.update(txTask);								txTaskService.physicalDelete(txTask);								//更新提现信息								Date now = new Date();								withdrawals.setSettlementState(2);								withdrawals.setThirdState(Boolean.TRUE);								withdrawals.setAuditTime(now);								withdrawals.setReleaseTime(now);								withdrawals.setAuditor(txAdmin.getUserID());								if(map.get("payment_no")!=null){  //当心提现成功了，确没有记录									withdrawals.setThirdOrderNumber(map.get("payment_no").toString());								}								this.update(withdrawals);								tx.setIsPass(Boolean.TRUE);								sxf.setIsPass(Boolean.TRUE);								tx.setVersion(tx.getVersion()+1);								tx.updatePre();								sxf.setVersion(sxf.getVersion()+1);								sxf.updatePre();								accountDao.update(tx);								accountDao.update(sxf);								processAccount(tx);								processAccount(sxf);							}else{								throw new IJobException("未知返回类型");							}						}else{							throw new IJobException("调用支付接口失败");						}					}else{						throw new IJobException("该订单已经提现了");					}				}else{					throw new IJobException("提现金额不匹配，可能被篡改");				}			}else{				throw new IJobException("提现参数校验失败，数据还未检查，或者数据可能被篡改");			}		}else{			throw new IJobException("已近提现过了");		}	}	private void processAccount(Account tx){		//更新这些提现用了哪些收入		QueryParam queryParam = new QueryParam();		queryParam.put("userID",tx.getUserID());		queryParam.put("isIn",Boolean.TRUE);		queryParam.put("isPass",Boolean.TRUE);		queryParam.put("hasExtract",Boolean.TRUE);		queryParam.put("withAble",Boolean.TRUE);		queryParam.setOrderByClause(" order by a.createTime  ");		List<Account> accounts = accountDao.findList(queryParam);		String accID="";		BigDecimal withmoney = tx.getMoney();		for(Account a :  accounts){			if(withmoney.compareTo(BigDecimal.ZERO)>0){				Map json = StringUtils.isEmpty(a.getAccID())?new HashMap():new Gson().fromJson(a.getAccID(),HashMap.class);				BigDecimal extract = a.getExtract()==null?BigDecimal.ZERO:a.getExtract(); //当前提取金额				BigDecimal extractaSurplus = a.getMoney().subtract(extract);  //剩余提取金额				BigDecimal extractable = withmoney.min(extractaSurplus);      //这个单的可以提取金额				withmoney = withmoney.subtract(extractable);  //提现剩余金额				BigDecimal extracted = extract.add(extractable);   //提现后提取金额				accID += a.getId()+",";				json.put(tx.getId(),extractable);				a.setExtract(extracted);				a.setAccID(new Gson().toJson(json));				a.setVersion(a.getVersion()+1);				a.updatePre();				accountDao.update(a);			}		}		tx.setAccID(accID);		tx.setVersion(tx.getVersion()+1);		tx.updatePre();		accountDao.update(tx);	}	public Double getSurplusMoney(String userID){		return getDao().getSurplusMoney(userID);	}}