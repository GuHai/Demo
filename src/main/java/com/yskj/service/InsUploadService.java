package com.yskj.service;import com.yskj.dao.InsUploadDao;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.excel.InsTest;import com.yskj.service.base.AbstractService;import com.yskj.service.base.DictCacheService;import com.yskj.utils.DateUtils;import com.yskj.utils.StringUtils;import com.yskj.utils.UUIDGenerator;import com.yskj.utils.excel.ReadExcelUtil;import org.apache.shiro.util.CollectionUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DuplicateKeyException;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.commons.CommonsMultipartFile;import java.io.File;import java.text.SimpleDateFormat;import java.util.*;import java.util.concurrent.atomic.AtomicInteger;import java.util.regex.Matcher;import java.util.regex.Pattern;@Servicepublic class InsUploadService extends AbstractService {	@Autowired    private InsUploadDao insUploadDao;	@Autowired	private InsUploadDayService insUploadDayService;	@Autowired	private InsProfessionTypeService insProfessionTypeService;	@Autowired	private PersonalauthenService personalauthenService;	private static Integer _20190101 = 43466;	private AtomicInteger step = new AtomicInteger();	private String times ;	public InsUploadService() {		super();	}	@Override	public InsUploadDao getDao() {		return this.insUploadDao;	}	private synchronized String generalBatch(){	    String times = DateUtils.getCurrTime();	    if(times.equals(this.times)){            this.step.addAndGet(1);        }else{            this.step.set(1);	        this.times=times;        }        return this.times+this.step.get();	}	@Transactional(rollbackFor=Exception.class)	public InsUpload insuranceUpload(CommonsMultipartFile file)throws Exception{		InsUpload insUpload = new InsUpload();		insUpload.setBatch(generalBatch());		insUpload.setStatus(Boolean.FALSE);		insUpload.setName( file.getOriginalFilename());		insUpload.setType(0);        Map<String,InsProfessionType> professmap  = new HashMap<String,InsProfessionType>();		this.add(insUpload);		String[] clsname  = new String[]{"投保人姓名","投保人身份证","投保人职业","企业全称","起参时间（年月日）","参保类型"};		List<String[]> list = ReadExcelUtil.readExcel(file,clsname);		if(list.size()>0){			for(int i=0;i<list.size();i++){				String[] strs = list.get(i);				Boolean flag = false;				if(strs.length>=clsname.length){					for(String str : strs){  //如果里面有一项不为空，为有效数据						if(StringUtils.isNotEmptyString(str)){							flag = true;							break;						}					}				}else{					throw  new IJobException("第"+(i+1)+"条数据错误,缺少必填项");				}				if(flag==false)continue;				String name  = strs[0];				String idCard = strs[1];				String professor = strs[2];				String enterprise = strs[3];				String date = strs[4];				String type = strs[5];				if(StringUtils.isEmptyString(type)||StringUtils.isEmptyString(date)||StringUtils.isEmptyString(name)||StringUtils.isEmptyString(idCard)||StringUtils.isEmptyString(professor)||StringUtils.isEmptyString(enterprise)){					throw  new IJobException("第"+(i+1)+"条数据包含未填写数据");				}				if(!checkIDCard(idCard)){					throw  new IJobException("第"+(i+1)+"条数据身份证格式错误");				}                InsProfessionType insProfessionType = professmap.get(professor);				if(insProfessionType==null){                    QueryParam queryParam = new QueryParam();                    queryParam.put("name",professor);                    insProfessionType = insProfessionTypeService.one(queryParam);                    if(insProfessionType==null){                        throw  new IJobException("第"+(i+1)+"条数据职位名称找不到对应编码，请检查");                    }else{                        if(insProfessionType.getRisk()>=6){                            throw  new IJobException("第"+(i+1)+"条数据职位名称‘"+insProfessionType.getName()+"’属于高危行业，拒保");                        }else{                            professmap.put(professor,insProfessionType);                        }                    }                }				InsUploadDay insUploadDay = new InsUploadDay();				insUploadDay.setCardID(idCard);				insUploadDay.setDate(getDateByDay(date));				insUploadDay.setEnterprise(enterprise);				insUploadDay.setProfessor(professor);				insUploadDay.setName(name);				insUploadDay.setSex(getSexByCardID(idCard));				insUploadDay.setProfessorCode(insProfessionType.getCode());				insUploadDay.setType(getTypeByStr(type));				insUploadDay.setUploadID(insUpload.getId());				insUploadDay.setAge(getAgeByCardID(idCard));				String str =  checkDate(insUploadDay.getDate());				if(StringUtils.isNotEmptyString(str)){                    throw  new IJobException(str);                }                try{					insUploadDayService.add(insUploadDay);				}catch (DuplicateKeyException e){					throw  new IJobException("第"+(i+1)+"条数据重复，已存在该身份证，日期，职业都相同的数据");				}//				insUpload.add(insUploadDay);			}			//发工资的文件需要保存起来			File tempFile = new File(DictCacheService.UploadPath + File.separator + "iJob/file/ins" );			if (!tempFile.exists()) {				tempFile.mkdirs();			}			File newFile = new File(tempFile.getPath()+ File.separator +insUpload.getId()+"."+file.getOriginalFilename().split("\\.")[file.getOriginalFilename().split("\\.").length-1]);			file.transferTo(newFile);		}else{			throw  new IJobException("请不要上传空数据模板");		}		return  insUpload;	}	private String checkDate(Date date){	    Date now = new Date();      	Integer day1 = (int)Math.ceil(now.getTime()/(24*3600000));		Integer day2 = (int)Math.ceil(date.getTime()/(24*3600000));	    if(now.getHours()>15||(now.getHours()==15&&now.getMinutes()>=58)){  //如果大于下午3:58点 不能上传明天的数据了 只能后天的数据            if(day2-day1<2){                return "下午4点后上传文件起参日期只能是后天或后天以后";            }        }else{  //4点之前，可以上传明天的数据            if(day2-day1<1){                return "起参日期只能是明天或明天以后";            }        }        return null;    }	private Boolean checkIDCard(String IdCard){		String regEx = "^\\d{6}(18|19|20)?\\d{2}(0[1-9]|1[012])(0[1-9]|[12]\\d|3[01])\\d{3}(\\d|X|x)$";		Pattern pattern = Pattern.compile(regEx);		Matcher matcher = pattern.matcher(IdCard);		// 字符串是否与正则表达式相匹配		return  matcher.matches();	}	private Integer getSexByCardID(String card){		return Integer.parseInt(card.charAt(16)+"")%2;	}	private Integer getTypeByStr(String str){		return str.equals("30万保额".equalsIgnoreCase(str))?0:1;	}	private Integer getAgeByCardID(String card){		Integer year = Integer.parseInt(card.substring(6, 10));		Integer month = Integer.parseInt(card.substring(10,12));		Integer day = Integer.parseInt(card.substring(12,14));		Date now = new Date();		Integer y = now.getYear()+1900;		Integer m = now.getMonth()+1;		Integer d = now.getDate();		System.out.println(y);		Integer age = 0;		age = y-year;		if(m<month || m==month&&d<day){			age --;		}		return age;	}	private Boolean checkPhone(String IdCard){		String regEx = "^[1][3,4,5,7,8,9][0-9]{9}$";		Pattern pattern = Pattern.compile(regEx);		Matcher matcher = pattern.matcher(IdCard);		// 字符串是否与正则表达式相匹配		return  matcher.matches();	}	private   Date getDateByDay(String days){		Integer day = Integer.parseInt(days.split("\\.")[0]);		Integer cday = day-_20190101;		SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");		Calendar c = Calendar.getInstance();		c.set(2019,0,1);		c.add(Calendar.DAY_OF_MONTH, cday);		return c.getTime();	}	public  List<InsTest> general(Integer page)throws Exception{		List<Personalauthen> personalauthens  =  personalauthenService.findList(new QueryParam());		Date now = new Date();		String enname = "湖南一生科技有限公司";		String pros = "机修钳工";		List<InsTest> list = new ArrayList<>();		for(Personalauthen personalauthen :personalauthens){			InsTest insTest = new InsTest();			insTest.setCardID(personalauthen.getPersonIDCard());			insTest.setDate(now);			insTest.setEnterprise(enname);			insTest.setName(personalauthen.getRealName());			insTest.setProfessor(pros);			list.add(insTest);		}		return list;	}	public void testpush(){		QueryParam queryParam = new QueryParam("date",new Date(new Date().getTime()+24*3600000));		queryParam.put("status",Boolean.TRUE);		try {			List<InsTest> addlist=new ArrayList<>();			List<InsTest> dellist=new ArrayList<>();			List<InsTest> today = insUploadDayService.findByDate(queryParam);			queryParam.put("date",new Date());			List<InsTest> yesterday = insUploadDayService.findByDate(queryParam);			if(CollectionUtils.isEmpty(yesterday)){				addlist = today;			}else {				for(InsTest insTest : yesterday){					Boolean flag = false;					for(InsTest insTest1 : today){						if(insTest.getCardID().equals(insTest1.getCardID()) && insTest.getProfessor().equals(insTest1.getProfessor())){							flag = true;							break;						}					}					if(!flag){						dellist.add(insTest);					}				}				for(InsTest insTest : today){					Boolean flag = false;					for(InsTest insTest1 : yesterday){						if(insTest.getCardID().equals(insTest1.getCardID()) && insTest.getProfessor().equals(insTest1.getProfessor())){							flag = true;							break;						}					}					if(!flag){						addlist.add(insTest);					}				}			}			String datestr = DateUtils.format(new Date(), "yyyy-MM-dd");			String filepath =  DictCacheService.UploadPath + File.separator + "iJob/file/insurance"  ;			com.yskj.utils.excel.ExcelExportUtil.general(filepath,addlist, datestr+"新增人员");			com.yskj.utils.excel.ExcelExportUtil.general(filepath,dellist, datestr+"删除人员");			com.yskj.utils.excel.ExcelExportUtil.general(filepath,today, datestr+"上传投保人员");			String[] filenames = new String[3];			filenames[0] = datestr+"新增人员.xlsx";			filenames[1] = datestr+"删除人员.xlsx";			filenames[2] = datestr+"上传投保人员.xlsx";			String context = "相对今日投保人员，明日投保人员统计：\n\r新增"+addlist.size()+"人\n\r删除"+dellist.size()+"人\n\r同投保"+today.size()+"人";			com.yskj.utils.excel.ExcelExportUtil.sendMailAndAtta("3406835354@qq.com", DateUtils.formatYMd(new Date())+"保险推送",context,filenames,filepath);            com.yskj.utils.excel.ExcelExportUtil.sendMailAndAtta("867037120@qq.com", DateUtils.formatYMd(new Date())+"保险推送",context,filenames,filepath);		} catch (Exception e) {			e.printStackTrace();		}	}}