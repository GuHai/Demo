package com.yskj.service;import com.yskj.dao.PartnerDao;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.service.base.AbstractService;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;@Servicepublic class PartnerService extends AbstractService {	@Autowired    private PartnerDao partnerDao;	@Autowired	private WxorderService wxorderService;	@Autowired	private PartnerUserService partnerUserService;	@Autowired	private PartnerBillService partnerBillService;	@Autowired	private PartnerRebateService partnerRebateService;	@Autowired	private PartnerRewardService partnerRewardService;	@Autowired	private AccountService accountService;	public PartnerService() {		super();	}	@Override	public PartnerDao getDao() {		return this.partnerDao;	}	@Transactional(rollbackFor=Exception.class)    public PartnerUser partnerCallback(Wxorder wxorder)throws Exception{		PartnerUser pu = partnerUserService.get(wxorder.getRefID());		//判断是升级还是第一次 如果partID是空的话 ，肯定是第一次买，不是升级		Boolean isFirst = StringUtils.isEmpty(pu.getPartID());		BigDecimal currFee = BigDecimal.ZERO;		if(isFirst==false){			currFee = ((Partner)this.getDao().get(pu.getPartID())).getFee();		}		pu.setPartID(pu.getUpgradePartID());		pu.setStatus(Boolean.TRUE);		partnerUserService.update(pu);		//新增订单		Partner partner = this.getDao().get(pu.getPartID());		PartnerBill partnerBill = new PartnerBill();		partnerBill.setFee(new BigDecimal(wxorder.getFee()).divide(new BigDecimal(100)));		partnerBill.setOrderNumber(wxorder.getCode());		partnerBill.setUserID(pu.getUserID());		partnerBill.setPartID(pu.getPartID());		partnerBill.setRemark(wxorder.getDescription());		partnerBillService.add(partnerBill);		//修改订单已回调状态为已经执行回调		wxorder.setStatus(4);		wxorderService.update(wxorder);		//判断钱是不是够数 大于0是需要交的钱大于你交的钱和已经有的钱 肯定是没有交够啊        if(partner.getFee().compareTo(partnerBill.getFee().add(currFee))>0){            throw new IJobException("付款金额不对");        }		if(isFirst){			//判断第一级，如果不为空 ，给人头费			PartnerUser parent1  = partnerUserService.get(pu.getShareID());			if(parent1!=null && parent1.getStatus()==Boolean.TRUE){				addRebate(parent1,pu,1,wxorder.getCode());				PartnerUser parent2 = partnerUserService.get(parent1.getShareID());				if(parent2!=null && parent2.getStatus()==Boolean.TRUE){					addRebate(parent2,pu,2,wxorder.getCode());					PartnerUser parent3 = partnerUserService.get(parent2.getShareID());					if(parent3!=null && parent3.getStatus()==Boolean.TRUE){						addRebate(parent3,pu,3,wxorder.getCode());					}				}			}		}		pu.setPartner(partner);		return pu;	}	//给钱和账户金额加钱	private void addRebate(PartnerUser parent ,PartnerUser pu,Integer level,String orderCode)throws Exception{		String partstr = "黄金:铂金:钻石";		String partname = partstr.split(":")[Integer.parseInt(pu.getPartID())-1];		String yourpartname = partstr.split(":")[Integer.parseInt(parent.getPartID())-1];		PartnerRebate partnerRebate = new PartnerRebate();		partnerRebate.setFee(getRewardFee(parent.getPartID(),pu.getPartID(),level));		partnerRebate.setLayer(level);		partnerRebate.setPartID(pu.getPartID());		partnerRebate.setUpartID(Integer.parseInt(parent.getPartID()));		partnerRebate.setShareUserID(pu.getUserID());		partnerRebate.setUserID(parent.getUserID());		partnerRebate.setOrderNumber(orderCode);		partnerRebate.setRemarks("成功邀请加入合伙人计划，对方成为"+partname+"会员。您获得"+(level==1?"推荐奖":(level==2?"推广奖":"团队奖"))+partnerRebate.getFee()+"元");		partnerRebateService.add(partnerRebate);		accountService.addPartnerShareRebate(partnerRebate);	}	private BigDecimal getRewardFee(String sharePartID,String becomePartID,Integer level)throws Exception{		QueryParam queryParam = new QueryParam();		queryParam.put("level",level);		queryParam.put("partID",sharePartID);		PartnerReward  partnerReward  = partnerRewardService.one(queryParam);		if("1".equals(becomePartID)){			return partnerReward.getReward1();		}else if("2".equals(becomePartID)){			return partnerReward.getReward2();		}else if("3".equals(becomePartID)){			return partnerReward.getReward3();		}		return BigDecimal.ZERO;	}}