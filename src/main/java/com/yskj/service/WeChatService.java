package com.yskj.service;import com.github.wxpay.sdk.WXPay;import com.yskj.dao.AccountDao;import com.yskj.dao.WeixinDao;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.models.enums.ActiveStatus;import com.yskj.redis.RedisUtil;import com.yskj.service.auth.UserService;import com.yskj.service.base.AbstractService;import com.yskj.service.base.DictCacheService;import com.yskj.utils.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;import java.util.*;@Servicepublic class WeChatService extends AbstractService {	@Autowired    private WeixinDao weixinDao;	@Autowired    private AccountDao accountDao;	@Autowired	private UserService userService;	@Autowired    private InformationService informationService;	@Autowired	private WxorderService wxorderService;	@Autowired	private RefundService refundService;	@Autowired	private SettlementService settlementService;	private final static Logger logger = LoggerFactory.getLogger(WeChatService.class);	public WeChatService() {		super();	}	@Override	public WeixinDao getDao() {		return this.weixinDao;	}	public HashMap<String,Integer> realTimeRegsiterData(QueryParam queryParam)throws Exception{		return this.getDao().realTimeRegsiterData(queryParam);	}	@Transactional	public Weixin saveWeixinAndCreateUser(Weixin weixin) throws Exception{		System.out.println("调用saveWeixinAndCreateUser："+weixin);		User user = createUserByWeixin(weixin);		System.out.println("User:"+user);        createInformationByUser(user);		weixin.setUserID(user.getId());		weixin.setActiveNo(ActiveStatus.Promotion.getNo());		this.add(weixin);		return weixin;	}	private User createUserByWeixin(Weixin weixin)throws Exception{		User user = new User();		user.setNickName(weixin.getNickname());		user.setAccountNo(weixin.getOpenid());//		String ps = MD5Tools.getMD5Hash(weixin.getOpenid(), IJobUtils.toHanyuPinyin(weixin.getNickname()));		String ps = MD5Tools.getMD5Hash(weixin.getOpenid(), MD5Tools.MD5(weixin.getOpenid()));		user.setPassword(ps);        user.setLocked(false);        user.setWeChatNo(weixin.getOpenid());        user.setPinyin(IJobUtils.toHanyuPinyinFirstChar(weixin.getNickname()));		user.setSex(weixin.getSex());//		user.setUserSig(QcloudUtil.createUserSig(weixin.getOpenid()));		try {			userService.add(user);		} catch (Exception e) {			e.printStackTrace();			throw  new Exception("创建用户失败"+e.getMessage());		}		return user;	}	private void createInformationByUser(User user)throws Exception{        Information information = new Information();        information.setIdentityType(Information.JOB_SEEKER);        information.setUserID(user.getId());        information.setAuthentication(false);        informationService.add(information);    }	private void addSettlement(Wxorder wxorder)throws Exception{		Settlement settlement = new Settlement();		settlement.setLaunchTime(new Date());		settlement.setPlatformState(false);		settlement.setRefID(wxorder.getRefID());		settlement.setUserID(wxorder.getUserID());		settlement.setRemarks(wxorder.getDescription());		settlement.setMoney(new BigDecimal(wxorder.getFee()/100D));		settlement.setThirdPlatform(Settlement.WXGZH);		settlement.setSettlementOrderNumber(wxorder.getCode());		settlement.setSettlementState(Settlement.DZF);		settlement.setType(wxorder.getType());		if(wxorder.getPayType()!=null&&wxorder.getPayType()==2){ //如果是余额支付，则设置为虚拟类			settlement.setIsVirtual(Boolean.TRUE);		}		settlementService.add(settlement);	}	public  Map<String,String>  getOrder(String code)throws Exception{		MyConfig config = new MyConfig();		WXPay wxpay = new WXPay(config);		Map<String, String> resp  = null;		Map<String, String> data = new HashMap<String, String>();		data.put("out_trade_no", code);		try {			resp = wxpay.orderQuery(data);		} catch (Exception e) {			e.printStackTrace();		}		return resp;	}	public String isValidWaitRefund(Account account)throws Exception{//		"trade_state": "SUCCESS",  订单状态 REFUND已经退款  SUCCESS成功//		"result_code": "SUCCESS",  交易结果 成功还是失败		String msg   = "";		if(StringUtils.isNotEmpty(account.getOrderNo())){			Map<String,String> resp =  this.getOrder(account.getOrderNo());			//NOTPAY  SUCCESS  如果是成功的，则为已经支付了，没有点确认			String  orderstatus = resp.get("result_code");			String  paystatus = resp.get("trade_state");			if("SUCCESS".equals(orderstatus) ){				if( "SUCCESS".equals(paystatus)){					msg =  "";				}else{					msg = resp.get("trade_state_desc");				}			}else{				msg =  resp.get("err_code_des");			}			if(StringUtils.isNotEmpty(msg)){ //如果不是空，则是没有找到订单，试着去余额里面找找看				QueryParam queryParam = new QueryParam();				queryParam.put("orderNo",account.getOrderNo());				queryParam.put("type",Account.YU_E_PAY);				queryParam.put("isPass",Boolean.TRUE);				Account zfaccount  = accountDao.one(queryParam);				if(zfaccount!=null && zfaccount.getMoney()!=null){					if(zfaccount.getMoney().compareTo(account.getMoney())<0){						msg = "入账订单余额为："+zfaccount.getMoney()+"元，异常数据";					}else{ //订单符合提现需求						msg  = "";					}				}			}		}else {			msg = "订单号不存在";		}		return msg;	}	public Boolean hasAlreadyPaid(String code)throws Exception{		Map<String,String> resp =  this.getOrder(code);		//NOTPAY  SUCCESS  如果是成功的，则为已经支付了，没有点确认		String  paystatu = resp.get("trade_state");		if("SUCCESS".equals(paystatu)){			return true;		}		return false;	}	@Transactional	public Map<String,String> payOrderByBalance(String orderID)throws Exception{		Wxorder order = wxorderService.get(orderID);		Map<String, String> resp = new HashMap<String, String>();		if(order.getStatus()==1){			order.setStatus(2);			order.setPayType(2);			order.setPrepayID("YUE"+DateUtils.getCurrTime()+ SignUtils.getRandomStringByLength(15));			//更新微信订单状态，然后生成一个支付订单，状态待支付			wxorderService.update(order);			addSettlement(order);			//扣款            Account account = new Account();            account.setOrderNo(order.getCode());            account.setMark("使用余额支付"+new BigDecimal(order.getFee()/100D).setScale(2, BigDecimal.ROUND_HALF_UP).toString()+"元");            account.setUserID(IJobSecurityUtils.getLoginUserId());            account.setType(Account.YU_E_PAY);            account.setIsIn(Boolean.FALSE);            account.setMoney(new BigDecimal(order.getFee()/100D));            account.setIsPass(Boolean.FALSE);            account.setId(UUIDGenerator.randomUUID());            account.addPre();            accountDao.add(account);		}        resp.put("prepay_id",order.getPrepayID());		return resp;	}	//去微信下支付订单，更新微信订单表，更新入账表    @Transactional    public Map<String, String> payOrder(String orderID, String url)throws Exception{		Wxorder order = wxorderService.get(orderID);		Map<String, String> resp = new HashMap<String, String>();		if(order.getStatus()==1){			MyConfig config = new MyConfig();			WXPay wxpay = new WXPay(config);			Map<String, String> data = new HashMap<String, String>();			data.put("body", order.getDescription());			data.put("out_trade_no", order.getCode());			data.put("device_info", "WEB");			data.put("fee_type", "CNY");			data.put("total_fee", order.getFee().toString());			data.put("spbill_create_ip", url);			data.put("notify_url", DictCacheService.Site+"/api/WeixinController/callBackPaySignature");			data.put("trade_type", "JSAPI");//JSAPI 公众号支付、 NATIVE 扫码支付、APP APP支付			data.put("openid", RedisUtil.getTokens(RedisUtil.OPENID));			data.put("product_id", order.getId());			resp = wxpay.unifiedOrder(data);			if ("SUCCESS".equals(resp.get("result_code"))) {				order.setStatus(2);				order.setPayType(1);				order.setPrepayID(resp.get("prepay_id"));				//更新微信订单状态，然后生成一个支付订单，状态待支付				wxorderService.update(order);				addSettlement(order);			}else{				throw new Exception("调用微信统一下单接口失败:"+resp.get("return_msg"));			}		}else{			resp.put("prepay_id",order.getPrepayID());		}        return resp;	}	//更新支付订单 更新入账表 加入保证金表	@Transactional	public Wxorder payOk(String prepayID)throws Exception{		QueryParam queryParam = new QueryParam("prepayID",prepayID);		Wxorder wxorder = wxorderService.one(queryParam);		wxorder.setStatus(3);		wxorderService.update(wxorder);		queryParam.clear();		queryParam.put("settlementOrderNumber",wxorder.getCode());		Settlement settlement = settlementService.one(queryParam);		settlement.setSettlementState(Settlement.ZFCG);		settlement.setPayTime(new Date());		settlement.setThirdOrderNumber(prepayID);		settlement.setPlatformState(true);		settlementService.update(settlement);		if(wxorder.getPayType()!=null && wxorder.getPayType()==2){//如果是余额支付，则需要新增account 扣款			queryParam.clear();			queryParam.put("userID",IJobSecurityUtils.getLoginUserId());			queryParam.put("type",Account.YU_E_PAY);			queryParam.put("orderNo",wxorder.getCode());			Account account  = accountDao.one(queryParam);			account.setIsPass(Boolean.TRUE);			account.setVersion(account.getVersion()+1);			account.updatePre();			accountDao.update(account);		}		return wxorder;	}	//生成微信退款订单，去微信下退款订单，修改微信支付订单	public void refundOrder(String orderId)throws Exception{		QueryParam queryParam = new QueryParam("id",orderId);		Wxorder wxorder = wxorderService.one(queryParam);		if(wxorder.getPayType()!=null&&2==wxorder.getPayType()){ //如果是余额支付，则直接物理删除            queryParam.clear();            queryParam.put("type",Account.YU_E_PAY);            queryParam.put("orderNo",wxorder.getCode());            Account account = accountDao.one(queryParam);            if(account!=null){				accountDao.del(account);			}            wxorder.setStatus(6);            wxorderService.update(wxorder);        }else{            Refund refund = new Refund();            refund.setCode(refundService.getNextCode(wxorder.getType()));            refund.setOrderID(wxorder.getId());            refund.setReason("回调失败退回付款");            refund.setRefundFee(wxorder.getFee());            refund.setWxorder(wxorder);            refundService.add(refund);            MyConfig config = new MyConfig();            WXPay wxpay = new WXPay(config);            Map<String, String> data = new HashMap<String, String>();            data.put("appid", DictCacheService.AppID);            data.put("mch_id", DictCacheService.MerchantNo);            data.put("nonce_str", SignUtils.getRandomStringByLength(16));            data.put("out_trade_no", refund.getWxorder().getCode());            data.put("out_refund_no", refund.getCode());            data.put("total_fee", refund.getWxorder().getFee().toString());            data.put("refund_fee", refund.getRefundFee().toString());            Map<String, String> resp = wxpay.refund(data);//        {nonce_str=nHWR98EGTZHRWrIx,//        appid=wx16b6988ce660defc, sign=D5988C34AB99FA9945151A24510AF10C,//       err_code=NOTENOUGH, return_msg=OK, result_code=FAIL,//       err_code_des=交易未结算资金不足，请使用可用余额退款, mch_id=1497262142, return_code=SUCCESS}            logger.info(resp.toString());            if ("SUCCESS".equals(resp.get("result_code"))) {                wxorder.setStatus(5);                wxorderService.update(wxorder);            }else{                //记录失败原因，然后删除                refund.setReason(resp.get("err_code_des"));                refund.setDeleted(Boolean.TRUE);                refundService.update(refund);                throw new Exception("调用微信退款接口失败"+resp.get("return_msg"));            }        }	}	//提取现金	public Map withdrawCash(Withdrawals withdrawals,String ip,String check_name)throws Exception{		Map resultMap = null;		try {			//准备企业付款所需参数			MyConfig config = new MyConfig();			String appid = config.getAppID();  //微信公众号的appid			String mch_id = config.getMchID(); //商户号			String nonce_str = SignUtils.getRandomStringByLength(16); //生成随机数			String partner_trade_no = withdrawals.getSettlementOrderNumber(); //商户订单号,避免重复提现			String openid = withdrawals.getUser().getWeChatNo(); // 支付给用户openid//			String check_name = "FORCE_CHECK"; //	NO_CHECK：不校验真实姓名  FORCE_CHECK：强校验真实姓名			String re_user_name = withdrawals.getUser().getMainName();   //收款用户姓名			String amount = (int)(withdrawals.getPrice().doubleValue()*100)+"";              //企业付款金额，单位为分			//String desc = withdrawals.getRemarks();   //企业付款操作说明信息。必填。			String desc = "I Job平台余额提现";			String spbill_create_ip = ip;			SortedMap<String , String> packageParams = new TreeMap<String, String>();			packageParams.put("mch_appid", appid);         //微信公众号的appid			packageParams.put("mchid", mch_id);       //商务号			packageParams.put("nonce_str",nonce_str);  //随机生成后数字，保证安全性			packageParams.put("partner_trade_no",partner_trade_no); //生成商户订单号			packageParams.put("openid",openid);            // 支付给用户openid			packageParams.put("check_name",check_name);    //是否验证真实姓名呢			packageParams.put("re_user_name",re_user_name);//收款用户姓名			packageParams.put("amount",amount);            //企业付款金额，单位为分			packageParams.put("desc",desc);                //企业付款操作说明信息。必填。			packageParams.put("spbill_create_ip",spbill_create_ip); //调用接口的机器Ip地址			//生成签名（微信需要进行签名验证）			String sign  = SignUtils.getSignatureByMD5toUpperCase(packageParams);			packageParams.put("sign", sign);			//将参数转换成XML格式			String requestParamsXML = JSONBeanToXml.JsonBean2XmlString(packageParams);			//获取需要发送的url地址			String wxUrl = "https://api.mch.weixin.qq.com/mmpaymkttransfers/promotion/transfers";			//发送请求			String weixinPost = ClientCustomSSL.doRefund(wxUrl, requestParamsXML).toString();			System.out.println(weixinPost);			resultMap = JSONBeanToXml.xmlToMap(weixinPost);		}catch (Exception e){			e.printStackTrace();			throw new IJobException(e.getMessage());		}		return resultMap ;	}	//查询支付订单	public Map getIJobPayOrder(String code)throws Exception{		Map resultMap = null;		try {			//准备企业付款所需参数			MyConfig config = new MyConfig();			String appid = config.getAppID();  //微信公众号的appid			String mch_id = config.getMchID(); //商户号			String nonce_str = SignUtils.getRandomStringByLength(16); //生成随机数			String partner_trade_no = code; //商户订单号,避免重复提现			SortedMap<String , String> packageParams = new TreeMap<String, String>();			packageParams.put("appid", appid);         //微信公众号的appid			packageParams.put("mch_id", mch_id);       //商务号			packageParams.put("nonce_str",nonce_str);  //随机生成后数字，保证安全性			packageParams.put("partner_trade_no",partner_trade_no); //生成商户订单号			//生成签名（微信需要进行签名验证）			String sign  = SignUtils.getSignatureByMD5toUpperCase(packageParams);			packageParams.put("sign", sign);			//将参数转换成XML格式			String requestParamsXML = JSONBeanToXml.JsonBean2XmlString(packageParams);			//获取需要发送的url地址			String wxUrl = "https://api.mch.weixin.qq.com/mmpaymkttransfers/gettransferinfo";			//发送请求			String weixinPost = ClientCustomSSL.doRefund(wxUrl, requestParamsXML).toString();			System.out.println(weixinPost);			resultMap = JSONBeanToXml.xmlToMap(weixinPost);		}catch (Exception e){			e.printStackTrace();		}		return resultMap ;	}}