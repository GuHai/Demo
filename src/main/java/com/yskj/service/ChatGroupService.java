package com.yskj.service;import com.example.demo.type.Group;import com.yskj.dao.ChatGroupDao;import com.yskj.redis.RedisUtil;import com.yskj.service.base.AbstractService;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.StringUtils;import com.yskj.utils.UUIDGenerator;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.*;@Servicepublic class ChatGroupService extends AbstractService {	@Autowired    private ChatGroupDao chatGroupDao;	public ChatGroupService() {		super();	}	@Override	public ChatGroupDao getDao() {		return this.chatGroupDao;	}	public String getAndSetChat(String userID,Boolean isGroup){ //一对一聊天//		List<Object> groups = RedisUtil.hGetAll("U2GID:"+IJobSecurityUtils.getLoginUserId());        Map<Object,Long> groupmap  = RedisUtil.mget("U2GID:"+IJobSecurityUtils.getLoginUserId());        List<Object> groups = new ArrayList<Object>();        groupmap.entrySet().forEach(entity->{            groups.add(entity.getKey());        });		List<Group> list  = RedisUtil.hGetAll("GroupInfo",groups);		String groupID=null ;		for(Group group : list){			if(group.getIsGroup()==isGroup){				if(group.getUserID().contains(userID)&&group.getUserID().contains(IJobSecurityUtils.getLoginUserId())){					groupID =  group.getId();					break;				}			}		}		if(StringUtils.isEmptyString(groupID)){			groupID = UUIDGenerator.getRandomString(8);			Group group = new Group();			group.setId(groupID);			group.setIsGroup(isGroup);			group.setUserID(IJobSecurityUtils.getLoginUserId()+";"+userID);			Date now = new Date();			Long code = now.getTime();			RedisUtil.hset("U2GID:"+IJobSecurityUtils.getLoginUserId(),groupID,code);			RedisUtil.hset("U2GID:"+userID,groupID,code);			RedisUtil.hset("GroupInfo",groupID,group);		}		return groupID;	}	public String getAndSetChat(String selfID,String userID,Boolean isGroup){ //一对一聊天		Map<Object,Long> groupmap  = RedisUtil.mget("U2GID:"+selfID);		List<Object> groups = new ArrayList<Object>();		groupmap.entrySet().forEach(entity->{			groups.add(entity.getKey());		});		List<Group> list  = RedisUtil.hGetAll("GroupInfo",groups);		String groupID=null ;		for(Group group : list){			if(group.getIsGroup()==isGroup){				if(group.getUserID().contains(userID)&&group.getUserID().contains(selfID)){					groupID =  group.getId();					break;				}			}		}		if(org.springframework.util.StringUtils.isEmpty(groupID)){			groupID = UUIDGenerator.getRandomString(8);			Group group = new Group();			group.setId(groupID);			group.setIsGroup(isGroup);			group.setUserID(selfID+";"+userID);			Date now = new Date();			Long code = now.getTime();			RedisUtil.hset("U2GID:"+selfID,groupID,code);			RedisUtil.hset("U2GID:"+userID,groupID,code);			RedisUtil.hset("GroupInfo",groupID,group);		}		return groupID;	}}