package com.yskj.service;import com.google.gson.Gson;import com.yskj.dao.AccountDao;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.models.excel.WeeklyIn;import com.yskj.service.auth.UserService;import com.yskj.service.base.AbstractService;import com.yskj.utils.*;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Async;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.CollectionUtils;import java.math.BigDecimal;import java.util.*;@Servicepublic class AccountService extends AbstractService {	@Autowired    private AccountDao accountDao;	@Autowired	private WithdrawalsService withdrawalsService;	@Autowired	private BondtransactioncpeService bondtransactioncpeService;	@Autowired	private PersonalauthenService personalauthenService;	@Autowired	private SettlementService settlementService;	@Autowired	private TxTaskService txTaskService;	@Autowired	private TxAdminService txAdminService;	@Autowired	private WeChatService weChatService ;	@Autowired	private MessageTemplateService messageTemplateService;	@Autowired	private UserService userService;	@Autowired	private RedPacketService redPacketService ;	@Autowired	private TaxService taxService;	@Autowired	private WxorderService wxorderService;	public AccountService() {		super();	}	@Override	public AccountDao getDao() {		return this.accountDao;	}	public HashMap getTotalSalary(QueryParam queryParam){		return this.getDao().getTotalSalary(queryParam);	}    public HashMap getTotalBond(QueryParam queryParam){	    return this.getDao().getTotalBond(queryParam);    }    public PageParam billPage(PageParam pageParam){		pageParam.setList(this.getDao().billPage(pageParam));		return  pageParam;	}	public List<HashMap> billList(QueryParam queryParam){		return this.getDao().billList(queryParam);	}	public List<WeeklyIn> weeklyReportForA(QueryParam queryParam){		return this.getDao().weeklyReportForA(queryParam);	}	public List<WeeklyIn> weeklyReportForB(QueryParam queryParam){		return this.getDao().weeklyReportForB(queryParam);	}	@Transactional	public void applyWithdraw(Withdrawals withdrawals)throws Exception{		withdrawals.setSettlementOrderNumber(withdrawalsService.getNextCode());		withdrawals.setPresentParty(IJobSecurityUtils.getLoginUserId());		withdrawals.setLaunchTime(new Date());		withdrawals.setSettlementState(1);		withdrawals.setDeleted(false);//防止他们恶意传删除值		withdrawals.setReceivableAccount(IJobSecurityUtils.getLoginUser().getWeChatNo());		BigDecimal sxf = withdrawals.getPrice().multiply(new BigDecimal(0.6)).divide(new BigDecimal(100)).setScale(2,BigDecimal.ROUND_UP);		if(sxf.compareTo(new BigDecimal(0.01))<0){			sxf = new BigDecimal(0.01).setScale(2,BigDecimal.ROUND_HALF_UP);		}		withdrawals.setRemarks("提现"+withdrawals.getPrice().setScale(2,BigDecimal.ROUND_HALF_UP)+"元，手续费扣除"+sxf+"元");		//新增提现表		withdrawalsService.add(withdrawals);		//account 新增提现记录 先判断这个订单号有无重复  提现金额		Account account = new Account();		account.setIsIn(false);		account.setMoney(withdrawals.getPrice());		account.setType(Account.TX);		account.setIsPass(false);		account.setOrderNo(withdrawals.getSettlementOrderNumber());		account.setUserID(IJobSecurityUtils.getLoginUserId());		account.setMark("提现"+withdrawals.getPrice().setScale(2,BigDecimal.ROUND_HALF_UP)+"元");		this.add(account);		//手续费金额		Account account1 = new Account();		account1.setIsIn(false);		account1.setMoney(sxf);		account1.setType(Account.TX_SXF);		account1.setIsPass(false);		account1.setOrderNo(withdrawals.getSettlementOrderNumber());		account1.setUserID(IJobSecurityUtils.getLoginUserId());		account1.setMark("提现手续费"+sxf+"元");		this.add(account1);		/*TxAdmin txAdmin = txAdminService.one(new QueryParam());		if(txAdmin!=null){			User user = userService.get(txAdmin.getUserID());			QueryParam queryParam = new QueryParam();			queryParam.put("userID",withdrawals.getPresentParty());			Personalauthen personalauthen = personalauthenService.one(queryParam);			//加入提现任务			TxTask txTask = new TxTask();			txTask.setCode(UUIDGenerator.getRandomString(16));			txTask.setAdminID(txAdmin.getId());			txTask.setStatus(Boolean.FALSE);			txTask.setTxID(withdrawals.getId());			txTask.setMoney(withdrawals.getPrice());			txTask.setName(personalauthen.getRealName());			txTask.setPhone(personalauthen.getPersonPhoneNumber());			txTask.setUserID(withdrawals.getPresentParty());			txTaskService.add(txTask);			//推送给提现管理员			messageTemplateService.ptTxtz(withdrawals,user,personalauthen,txTask);		}*/	}	//删除所有未提现的任务，重新生成	@Transactional	public Map<String,Object> generalUnTxTask()throws Exception{		//删除		txTaskService.deleteAll();		QueryParam queryParam = new QueryParam();		queryParam.put("settlementState",1);		queryParam.setOrderByClause(" order by w.createTime ");		List<Withdrawals> withdrawalsList = withdrawalsService.findList(queryParam);		queryParam.clear();		TxAdmin txAdmin = txAdminService.one(new QueryParam());		User user = userService.get(txAdmin.getUserID());		String names = "";		String phones= "";		String moneys= "";		int num =0;		for(Withdrawals withdrawals : withdrawalsList){			queryParam.clear();			queryParam.put("userID",withdrawals.getPresentParty());			Personalauthen personalauthen = personalauthenService.one(queryParam);			TxTask txTask = new TxTask();//			txTask.setCode(UUIDGenerator.getRandomString(16));			String str = "000000000"+(num++);			txTask.setCode(str.substring(str.length()-10,str.length()));			txTask.setAdminID(txAdmin.getId());			txTask.setStatus(Boolean.FALSE);			txTask.setTxID(withdrawals.getId());			txTask.setMoney(withdrawals.getPrice());			String errmsg = "";			Set<String> errlist = new HashSet<String>();			if(personalauthen!=null){				txTask.setName(personalauthen.getRealName());				txTask.setPhone(personalauthen.getPersonPhoneNumber());				/*names += personalauthen.getRealName()+",";				phones += personalauthen.getPersonPhoneNumber().substring(6)+",";*/				if(StringUtils.isEmptyString(names)){					names = personalauthen.getRealName()+"...";				}				if(StringUtils.isEmptyString(phones)){					names = personalauthen.getPersonPhoneNumber()+"...";				}			}else{//				errmsg+= "未进行实名认证;";                errlist.add("未进行实名认证");			}			txTask.setUserID(withdrawals.getPresentParty());			queryParam.clear();			queryParam.put("userID",withdrawals.getPresentParty());//			queryParam.put("isPass",Boolean.TRUE);			List<Account> accountLIst  = this.findList(queryParam);			BigDecimal in = BigDecimal.ZERO;			BigDecimal out = BigDecimal.ZERO;			BigDecimal allout = BigDecimal.ZERO;			Boolean isCheck = true;			for(Account account : accountLIst){				if(account.getIsIn()){					in = in.add(account.getMoney());				}else{				    if(null!=account.getIsPass() &&  Boolean.TRUE==account.getIsPass()){                        out = out.add(account.getMoney());                    }                    allout = allout.add(account.getMoney());				}				if(null!=account.getIsCheck() && Boolean.FALSE==account.getIsCheck()){                    errlist.add(account.getErrmsg());				}			}			if(errlist.size()>0){				isCheck = false;			}			if(in.compareTo(allout)<0){                isCheck = false;//                errmsg+="总收入大于总支出（包括提现中金额）";                errlist.add("总收入小于总支出（包括提现中金额）");            }            errmsg = String.join("；", CollectionUtils.arrayToList(errlist.toArray()));			txTask.setIna(in);			txTask.setOuta(out);			txTask.setIsCheck(isCheck);			txTask.setErrmsg(errmsg);			txTaskService.add(txTask);//			moneys += withdrawals.getPrice().toString()+",";			if(StringUtils.isEmptyString(moneys)){				moneys = withdrawals.getPrice().toString()+"(元)...";			}		}		Map<String,Object> map = new HashMap();		map.put("user",user);		map.put("name",StringUtils.isNotEmpty(names)?names:"");		map.put("phone",StringUtils.isNotEmpty(phones)?phones:"");		map.put("money",StringUtils.isNotEmpty(moneys)?moneys:"");		return map;//		messageTemplateService.ptTxtz2(user,names,phones,moneys);	}	//检查账号是不是正常的	@Async	public void chechAccount(String userID){		QueryParam queryParam = new QueryParam();		queryParam.put("nocheck",true);		if(StringUtils.isNotEmptyString(userID)){			queryParam.put("userID",userID);		}		try {			List<Account> list = this.findList(queryParam);			for(Account account : list){				String code = account.getOrderNo();				Integer type = account.getType();				Settlement settlement = null;				if(StringUtils.isNotEmptyString(code)){					queryParam.clear();					queryParam.put("settlementOrderNumber",code);					queryParam.put("settlementState",2);					List<Settlement> settlementList = settlementService.findList(queryParam);					if(!CollectionUtils.isEmpty(settlementList)){						settlement = settlementList.get(0);						if(settlementList.size()>1){							for(int i=1;i<settlementList.size();i++){								settlement.setMoney(settlement.getMoney().add(settlementList.get(i).getMoney()));							}						}					}				}				if(type==1 || type==3 || type==6 || type==7){//保证金退回 保证金赔付					//检查来源是不是已经退款了，或者订单有么有问题					String result = weChatService.isValidWaitRefund(account);					if(StringUtils.isEmpty(result)){						if(settlement!=null){ //如果保证金能查询到							if(settlement.getMoney().compareTo(account.getMoney())<0){//小于当前账户里面的钱，账户异常								account.updateCheck("保证金订单余额为："+settlement.getMoney()+"元，异常数据",false);							}else{								account.updateCheck("比对成功，数据正常",true);							}						}else{							account.updateCheck("保证金订单不存在，异常数据",false);						}					}else{						account.updateCheck(result,false);					}                    this.update(account);				}else if(type==2||type==Account.QZ_SCAN_SALARY){//求职者薪资收入					//检查来源是不是已经退款了，或者订单有么有问题					String result = weChatService.isValidWaitRefund(account);					queryParam.clear();					queryParam.put("orderNo",account.getOrderNo());					BigDecimal total = this.getDao().getTotalByOrderNo(queryParam);					if(StringUtils.isEmpty(result)){						if(settlement!=null){							if(settlement.getMoney().compareTo(total)<0){								account.updateCheck("实际发放薪资"+settlement.getMoney()+"小于总获取工资"+total+"，异常数据",false);							}else{								account.updateCheck("比对成功，数据正常",true);							}						}else{							account.updateCheck("薪资订单不存在，异常数据",false);						}					}else{						account.updateCheck(result,false);					}                    this.update(account);				}else if(type==8){ //分享合伙人奖励                    String result = weChatService.isValidWaitRefund(account);                    if(StringUtils.isEmpty(result)){                        if(settlement!=null){                            account.updateCheck("比对成功，数据正常",true);                        }else{                            account.updateCheck("合伙人订单不存在，异常数据",false);                        }                    }else{                        account.updateCheck("合伙人订单不存在，异常数据",false);                    }                    this.update(account);                }else if(type==5 ){ //提现相关  去微信查询					if(Boolean.TRUE!=account.getIsPass()) {//如果是待支付需要校验						Map<String,String> resp =  weChatService.getIJobPayOrder(account.getOrderNo());						String status = resp.get("status");						String result_code = resp.get("result_code");						if("SUCCESS".equals(result_code) && "SUCCESS".equals(status)){ //参数正常  订单成功							account.updateCheck("该订单已经支付了，数据异常",false);						}else{							account.updateCheck("数据正常",true);						}					}else{						account.updateCheck("数据正常",true);					}                    this.update(account);				}else if(type==9){					account.updateCheck("数据正常",true);					this.update(account);				}else if(type==16){					account.updateCheck("数据正常",true);					this.update(account);				}else if(type==Account.REDPACKET||type==Account.REDPACKETRETURN){					String result = weChatService.isValidWaitRefund(account);					if(StringUtils.isEmpty(result)){						if(settlement!=null){ //如果保证金能查询到							if(settlement.getMoney().compareTo(account.getMoney())<0){//小于当前账户里面的钱，账户异常								account.updateCheck("红包订单余额为："+settlement.getMoney()+"元，异常数据",false);							}else{								account.updateCheck("比对成功，数据正常",true);							}						}else{							account.updateCheck("红包订单不存在，异常数据",false);						}					}else{						account.updateCheck(result,false);					}					this.update(account);				}else {					account.updateCheck("数据正常",true);					this.update(account);				}			}		} catch (Exception e) {			e.printStackTrace();		}	}	public void returnQzBond(Wxorder wxorder,Bondtransaction bondtransaction,String userID,Integer type)throws Exception{		//需要先检查订单是不是已经被恶意退回了  只有查询到订单存在并且在状态为4：已执行回调函数才能把保证金余额存入到账户		if(wxorder!=null&& wxorder.getStatus()==4){			qzBond(bondtransaction,userID,type,"保证金退回");		}	}	private void qzBond(Bondtransaction bondtransaction,String userID,Integer type ,String mark)throws Exception{		Account account = new Account();		account.setIsIn(true);		account.setMoney(bondtransaction.getPremiumMoney());		account.setType(type);		account.setIsPass(true);		account.setOrderNo(bondtransaction.getOrderNumber());		account.setUserID(userID);		account.setMark(mark);		this.add(account);	}	//赔付保证金	public void compensateZpBond(Wxorder wxorder,Bondtransaction bondtransaction,String fromUserID,String userID)throws Exception{		//需要先检查订单是不是已经被恶意退回了  只有查询到订单存在并且在状态为4：已执行回调函数才能把保证金余额存入到账户		if(wxorder!=null && wxorder.getStatus()==4){			qzBond(bondtransaction,userID,6,"保证金违约赔付");			//赔付完保证金后需要为招聘者生成保证金订单			addCompensateBond(bondtransaction,fromUserID,userID);		}		//告诉人家钱到账了		QueryParam queryParam  = new QueryParam("userID",userID);		Weixin weixin = weChatService.one(queryParam);		messageTemplateService.zpWypf(weixin.getOpenid(),bondtransaction);	}	public void addCompensateBond(Bondtransaction bondtransaction,String fromUserID,String toUserID)throws Exception{		Bondtransactioncpe bondtransactioncpe = new Bondtransactioncpe();		bondtransactioncpe.setUserID(toUserID);		bondtransactioncpe.setIsReturn(true);		bondtransactioncpe.setOrderNumber(bondtransaction.getOrderNumber());		bondtransactioncpe.setPositionID(bondtransaction.getPositionID());		bondtransactioncpe.setPayerType(bondtransaction.getPayerType());		bondtransactioncpe.setPremiumMoney(bondtransaction.getPremiumMoney());		bondtransactioncpe.setWxorderID(bondtransaction.getWxorderID());		bondtransactioncpe.setCpeID(fromUserID);		bondtransactioncpe.setId(UUIDGenerator.randomUUID());		bondtransactioncpe.setCreateTime(bondtransaction.getCreateTime());		bondtransactioncpe.setUpdateTime(new Date());		bondtransactioncpeService.getDao().add(bondtransactioncpe);	}	public void addSalary(Settlementperson settlementperson ,Wxorder wxorder,Position position)throws Exception{	/*	QueryParam queryParam  = new QueryParam("refID",settlementperson.getSettlementID());		Wxorder wxorder = wxorderService.one(queryParam);*/		Account account = new Account();		account.setIsIn(true);		account.setMoney(settlementperson.getSettlementMoney());		account.setType(2); //求职者薪资收入		account.setIsPass(true);		if(wxorder!=null){			account.setOrderNo(wxorder.getCode());			account.setMark(position.getTitle()+"岗位薪资发放"+settlementperson.getSettlementMoney()+"元");		}		account.setUserID(settlementperson.getUserID());		this.add(account);	}	@Transactional	public void addPartnerShareRebate( PartnerRebate partnerRebate)throws Exception{		Account account = new Account();		account.setIsIn(true);		account.setMoney(partnerRebate.getFee());		account.setType(Account.PARTNER_REBATE);		account.setIsPass(true);		account.setOrderNo(partnerRebate.getOrderNumber());		account.setUserID(partnerRebate.getUserID());		account.setMark(partnerRebate.getRemarks());		this.add(account);	}	@Transactional(rollbackFor=Exception.class)	public void processHistoryData()throws Exception{		QueryParam queryParam  = new QueryParam();		queryParam.in("type",Arrays.asList("5,9,13,16".split(",")));		queryParam.put("isPass",Boolean.TRUE);		queryParam.put("notExtract",Boolean.TRUE);		try {			List<Account> accounts = this.findList(queryParam);			for(Account tx : accounts){				queryParam.clear();				queryParam.put("userID",tx.getUserID());				queryParam.put("isIn",Boolean.TRUE);				queryParam.put("isPass",Boolean.TRUE);				queryParam.put("hasExtract",Boolean.TRUE);				if(tx.getType()==16){ //如果是余额支付，首先使用充值支付//					queryParam.put("yueAble",Boolean.TRUE);					queryParam.setOrderByClause(" order by a.type desc  ");				}else {					queryParam.put("withAble",Boolean.TRUE);				}				List<Account> inacccounts = this.findList(queryParam);				BigDecimal withmoney  = tx.getMoney();				String accID="";				for(Account a :  inacccounts){					if(withmoney.compareTo(BigDecimal.ZERO)>0){						Map json = StringUtils.isEmpty(a.getAccID())?new HashMap():new Gson().fromJson(a.getAccID(),HashMap.class);						BigDecimal extract = a.getExtract()==null?BigDecimal.ZERO:a.getExtract(); //当前提取金额						BigDecimal extractaSurplus = a.getMoney().subtract(extract);  //剩余提取金额						BigDecimal extractable = withmoney.min(extractaSurplus);      //这个单的可以提取金额						withmoney = withmoney.subtract(extractable);  //提现剩余金额						BigDecimal extracted = extract.add(extractable);   //提现后提取金额						accID += a.getId()+",";						json.put(tx.getId(),extractable);						a.setExtract(extracted);						a.setAccID(new Gson().toJson(json));						a.setVersion(a.getVersion()+1);						a.setUpdateTime(tx.getUpdateTime());						this.getDao().update(a);					}else{                        break;					}				}                tx.setAccID(accID);                tx.setVersion(tx.getVersion()+1);                this.getDao().update(tx);			}		} catch (Exception e) {			e.printStackTrace();			throw new IJobException("执行历史数据异常");		}	}	/**	 * 悬赏金记录	 * @param rewardSettlement 悬赏结算对象	 * @param wxorder 微信订单对象	 * @param position 职位对象	 * @throws Exception 异常	 */	public void addRewardMoney(RewardSettlement rewardSettlement,Wxorder wxorder,Position position) throws Exception{		Account account = new Account();		account.setIsIn(true);		account.setMoney(rewardSettlement.getRewardMoney());		account.setType(Account.REWARD); //代理悬赏金收入		account.setIsPass(true);		if(wxorder!=null){			account.setOrderNo(wxorder.getCode());			account.setMark(position.getTitle()+"岗位提成发放"+rewardSettlement.getRewardMoney()+"元");		}		account.setUserID(rewardSettlement.getGetRewardUser());		this.add(account);	}	public void addRedPacket(RedPacketReceive redPacketReceive) throws Exception{		Account account = new Account();		account.setIsIn(true);		account.setMoney(redPacketReceive.getMoney());		account.setType(Account.REDPACKET); //红包收入		account.setIsPass(true);		account.setMark("红包发放"+ redPacketReceive.getMoney()+"元");		account.setUserID(redPacketReceive.getUserId());		RedPacket redPacket = redPacketService.get(redPacketReceive.getRedPacketId());		account.setOrderNo(redPacket.getOrderNumber());		this.add(account);	}	@Transactional(rollbackFor=Exception.class)	public void redPacketBack(RedPacket redPacket) throws Exception{		if(StringUtils.isNotEmptyString(redPacket.getOrderNumber())){ //必须检查红包是不是有订单号码			Account account = new Account();			account.setIsIn(true);			account.setMoney(redPacket.getOneOfMoney().multiply(new BigDecimal(redPacket.getResidueCount())));			account.setType(12); //红包退还			account.setIsPass(true);			account.setMark("红包退款："+ redPacket.getOneOfMoney().multiply(new BigDecimal(redPacket.getResidueCount()))+"元");			account.setUserID(redPacket.getCreateBy());			account.setOrderNo(redPacket.getOrderNumber());			this.add(account);		}else {			throw  new IJobException("订单存在问题");		}	}	public Map getNoSureRedPacket(QueryParam queryParam){		return accountDao.getNoSureRedPacket(queryParam);	}	public Long add(Account account) throws Exception{		BigDecimal money = account.getMoney();		if(account.getIsIn()==true && account.needTax()){//如果是收入并且是需要扣税的金额，则查询是不是要交税了			processTaxByLevel(account);		}		account.setMoney(money);		Long flag =  super.add(account);		if(account.getIsIn().equals(Boolean.TRUE)){            this.chechAccount(account.getUserID()); //检查当前加入的账单是不是正确的        }		return flag;	}	public void processTaxByLevel(Account account)throws Exception{		QueryParam queryParam = new QueryParam();		queryParam.put("userID",account.getUserID());		queryParam.in("type", CollectionUtils.arrayToList("2,6,7,8,10,11,14,17".split(",")));		BigDecimal currMoney = getDao().getSalaryByThisMonth(queryParam);		queryParam.clear();		queryParam.setOrderByClause(" order by t.level ");		List<Tax> taxList = taxService.findList(queryParam);		for(Tax tax : taxList){			if(account.getMoney().compareTo(BigDecimal.ZERO)>0){				if(currMoney.compareTo(tax.getStart())>=0 && currMoney.compareTo(tax.getEnd())<=0){ //当前金额大于起征点的时候小于界限的时候,开始征税					//获取当前档可纳税的剩余金额  纳税界限-当前金额					BigDecimal cm =  tax.getEnd().subtract(currMoney);					//比较剩余金额和当前金额最小值 乘以税率					BigDecimal min = cm.min(account.getMoney());					BigDecimal taxMoney = min.multiply(tax.getTax());					if(taxMoney.compareTo(BigDecimal.ZERO)>0){ //如果税大于0，保存起来						taxMoney = taxMoney.setScale(2,BigDecimal.ROUND_UP);						Account taxacc = new Account();						taxacc.setIsPass(Boolean.TRUE);						taxacc.setMark("阶梯等级"+tax.getLevel()+"级，缴税比例"+tax.getTax()+"，缴税金额"+min.toString()+",缴纳税额："+taxMoney+"元");						taxacc.setMoney(taxMoney);						taxacc.setUserID(account.getUserID());						taxacc.setType(Account.TAX);						taxacc.setIsIn(Boolean.FALSE);						super.add(taxacc);					}					account.setMoney(account.getMoney().subtract(min));					currMoney = currMoney.add(min);				}			}else{				break;			}		}	}	public Map accountInfo(QueryParam queryParam)throws Exception{		return this.getDao().accountInfo(queryParam);	}	public void rechargeBack(Recharge recharge) throws Exception{		Account account = new Account();		account.setIsIn(true);		account.setMoney(recharge.getMoney());		account.setType(Account.RECHARGE); //充值		account.setIsPass(true);		account.setMark("余额充值："+ recharge.getMoney()+"元");		account.setUserID(recharge.getUserID());		account.setOrderNo(recharge.getOrderNumber());		this.add(account);	}	public void refundAuto(QueryParam queryParam)throws Exception{		List<Wxorder> list  = wxorderService.findList(queryParam);		for(Wxorder wxorder : list){			if(wxorder.getPayType()!=null&&2==wxorder.getPayType()){//余额支付				weChatService.refundOrder(wxorder.getId());			}else{				Account account = new Account();				account.setMoney(new BigDecimal(wxorder.getFee()/100D));				account.setOrderNo(wxorder.getCode());				String msg = weChatService.isValidWaitRefund(account);				if(StringUtils.isEmpty(msg)){					weChatService.refundOrder(wxorder.getId());				}else{					wxorderService.physicalDelete(wxorder);				}			}		}	}	public BigDecimal getRechargeSum(String userID){		return getDao().getRechargeSum(userID);	}	public BigDecimal getMySettle(String userID){		return  getDao().getMySettle(userID);	}	@Transactional	public void addJieSuanMine(BigDecimal money) throws Exception{		//将钱从充值金额中剔除		Account account = new Account();		account.setId(UUIDGenerator.randomUUID());		account.addPre();		account.setIsIn(false);		account.setMoney(money);		account.setType(Account.JS_MINE_OUT); //充值		account.setIsPass(true);		account.setMark("充值金额支出："+ money+"元");		account.setUserID(IJobSecurityUtils.getLoginUserId());		String order = "J"+DateUtils.getCurrTime()+ SignUtils.getRandomStringByLength(17);		account.setOrderNo(order);		rechargeMoneyOut(account);		//将钱存进余额中		account = new Account();		account.setIsIn(true);		account.setMoney(money);		account.setType(Account.JS_MINE_IN); //充值		account.setIsPass(true);		account.setMark("可提现余额收入："+ money+"元");		account.setUserID(IJobSecurityUtils.getLoginUserId());		account.setOrderNo(order);  //同一笔收支使用同一个code		this.add(account);	}	@Transactional	public void giveOtherMoney(BigDecimal money,String userID) throws Exception{	    User user = userService.get(userID);		//将钱从充值金额中剔除		Account account = new Account();		account.setId(UUIDGenerator.randomUUID());		account.addPre();		account.setIsIn(false);		account.setMoney(money);		account.setType(Account.TRANS_OUT); //充值		account.setIsPass(true);		account.setMark("转账给"+user.getMainName()+"："+ money+"元");		account.setUserID(IJobSecurityUtils.getLoginUserId());		String order = "Z"+DateUtils.getCurrTime()+ SignUtils.getRandomStringByLength(17);		account.setOrderNo(order);		rechargeMoneyOut(account);		//将钱存进余额中		account = new Account();		account.setIsIn(true);		account.setMoney(money);		account.setType(Account.TRANS_IN); //充值		account.setIsPass(true);		account.setMark("收到"+IJobSecurityUtils.getLoginUser().getMainName()+"的转账："+ money+"元");		account.setUserID(userID);		account.setOrderNo(order);		this.add(account);	}	@Transactional	public void rechargeMoneyOut(Account account) throws Exception {		QueryParam queryParam = new QueryParam();		List typeList = new ArrayList();		typeList.add(Account.RECHARGE);		typeList.add(Account.TRANS_IN);		queryParam.put("userID",IJobSecurityUtils.getLoginUserId());		queryParam.put("isIn",Boolean.TRUE);		queryParam.put("isPass",Boolean.TRUE);		queryParam.put("hasExtract",Boolean.TRUE);		queryParam.in("type",typeList);		queryParam.setOrderByClause(" order by a.type desc  "); //先从充值开始支付		List<Account> accounts = accountDao.findList(queryParam);		BigDecimal withmoney  = account.getMoney().setScale(2,BigDecimal.ROUND_HALF_UP);		String accID="";		for(Account a :  accounts){			if(withmoney.compareTo(BigDecimal.ZERO)>0){				Map json = StringUtils.isEmpty(a.getAccID())?new HashMap():new Gson().fromJson(a.getAccID(),HashMap.class);				BigDecimal extract = a.getExtract()==null?BigDecimal.ZERO:a.getExtract(); //当前提取金额				BigDecimal extractaSurplus = a.getMoney().subtract(extract);  //剩余提取金额				BigDecimal extractable = withmoney.min(extractaSurplus);      //这个单的可以提取金额				withmoney = withmoney.subtract(extractable);  //提现剩余金额				BigDecimal extracted = extract.add(extractable);   //提现后提取金额				accID += a.getId()+",";				json.put(account.getId(),extractable);				a.setExtract(extracted);				a.setAccID(new Gson().toJson(json));				a.setVersion(a.getVersion()+1);				a.setUpdateTime(account.getUpdateTime());				accountDao.update(a);			}else{				break;			}		}		if(StringUtils.isEmptyString(accID)){ //如果是空，则提示余额不足			throw new IJobException("余额不足");		}else{			account.setAccID(accID);			this.add(account);		}	}}