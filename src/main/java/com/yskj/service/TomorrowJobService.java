package com.yskj.service;import com.yskj.dao.TomorrowJobDao;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.service.auth.UserService;import com.yskj.service.base.AbstractService;import com.yskj.utils.DateUtils;import com.yskj.utils.UUIDGenerator;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.Date;import java.util.List;@Servicepublic class TomorrowJobService extends AbstractService {	@Autowired    private TomorrowJobDao tomorrowJobDao;	@Autowired	private BeenrecruitedService beenrecruitedService;	@Autowired	private MessageTemplateService messageTemplateService;	@Autowired	private PositionService positionService;	@Autowired	private UserService userService;	@Autowired	private LocaltioninfoService localtioninfoService;	@Autowired	private PersonalauthenService personalauthenService;	public TomorrowJobService() {		super();	}	@Override	public TomorrowJobDao getDao() {		return this.tomorrowJobDao;	}	@Transactional	public void generalTomorrowJob()throws Exception{		this.getDao().deleteAll();		QueryParam queryParam  = new QueryParam();		queryParam.put("isDeleted",false);		queryParam.put("state",4);		List<Beenrecruited> list =  beenrecruitedService.findList(queryParam);		for(Beenrecruited beenrecruited : list){			if(DateUtils.isWorkDayByTomorrow(beenrecruited.getWorkDate())){				TomorrowJob tomorrowJob = new TomorrowJob();				tomorrowJob.setPositionID(beenrecruited.getPositionID());				tomorrowJob.setUserID(beenrecruited.getCreateBy());				tomorrowJob.setBeenID(beenrecruited.getId());				tomorrowJob.setId(UUIDGenerator.randomUUID());				tomorrowJob.setCreateTime(new Date());				tomorrowJob.setUpdateTime(tomorrowJob.getCreateTime());				this.getDao().add(tomorrowJob);				User user = userService.get(beenrecruited.getCreateBy());				Position position = positionService.get(beenrecruited.getPositionID());				Localtioninfo localtioninfo = localtioninfoService.get(position.getAggregate());				position.setGather(localtioninfo);				queryParam.clear();				queryParam.put("userID",position.getUserID());				Personalauthen personalauthen = personalauthenService.one(queryParam);				position.setPersonalauthen(personalauthen);				messageTemplateService.qzMrgz(position,user);			}		}	}}