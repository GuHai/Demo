package com.yskj.service;import com.yskj.dao.BondtransactionDao;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.service.base.AbstractService;import com.yskj.utils.DateUtils;import com.yskj.utils.IJobSecurityUtils;import org.junit.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.scheduling.annotation.Async;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.math.BigDecimal;import java.util.Date;import java.util.List;@Servicepublic class BondtransactionService extends AbstractService {	@Autowired    private BondtransactionDao bondtransactionDao;	@Autowired	private AccountService accountService;	@Autowired	private SettlementService settlementService;	@Autowired	private BeenrecruitedService beenrecruitedService;	@Autowired	private WxorderService wxorderService;	@Autowired	private IndemnityService indemnityService;	@Autowired	private WeChatService weChatService;	public BondtransactionService() {		super();	}	@Override	public BondtransactionDao getDao() {		return this.bondtransactionDao;	}	public Double getBondMoney(String id ){ return bondtransactionDao.getBondMoney(id); }	@Transactional	public Bondtransaction createBond(Wxorder wxorder,Position position)throws Exception{		QueryParam queryParam = new QueryParam("settlementOrderNumber",wxorder.getCode());//		Settlement settlement  = settlementService.one(queryParam);		//新增保证金		Bondtransaction bond = new Bondtransaction();		bond.setOrderNumber(wxorder.getCode());		bond.setPositionID(wxorder.getRefID());		bond.setUserID(wxorder.getUserID());		bond.setPremiumMoney(new BigDecimal(wxorder.getFee()/100D));		bond.setWxorderID(wxorder.getId());		bond.setIsReturn(false);		if(position.getUserID().equals(IJobSecurityUtils.getLoginUserId())){			bond.setPayerType(2);		}else{			bond.setPayerType(1);		}        this.add(bond);		return bond;	}	@Transactional	public void returnQzBond(String positionID,String UserID,Integer type ) throws Exception{		QueryParam queryParam  =  new QueryParam();		queryParam.put("userID",UserID);		queryParam.put("positionID",positionID);		queryParam.put("isReturn",false);		queryParam.put("status",0);		Indemnity indemnity =  indemnityService.one(queryParam);		if(indemnity!=null) { //如果先违约后赔付为真，则删除			indemnityService.physicalDelete(indemnity);		}else{			List<Bondtransaction> bondtransactions =  this.findList(queryParam);			//如果能找到这个职位这个人还未退回的保证金，则退回			for(Bondtransaction bondtransaction : bondtransactions){				if(bondtransaction!=null){					Wxorder wxorder = wxorderService.get(bondtransaction.getWxorderID());					//检查这个是不是有效的订单					Boolean flag = Boolean.TRUE;					if(wxorder.getPayType()==null||1==wxorder.getPayType()){						flag = weChatService.hasAlreadyPaid(bondtransaction.getOrderNumber());					}					if(flag){						accountService.returnQzBond(wxorder,bondtransaction,UserID,type);						bondtransaction.setIsReturn(true);						wxorder.setStatus(6);						wxorderService.update(wxorder);						this.update(bondtransaction);					}				}			}		}	}	@Transactional	public void compensateZpBond(String positionID,String fromUserID,String toUserID) throws Exception{		QueryParam queryParam  =  new QueryParam();		queryParam.put("userID",fromUserID);		queryParam.put("positionID",positionID);		queryParam.put("status",0);		queryParam.put("isReturn",false);		Indemnity indemnity =  indemnityService.one(queryParam);		if(indemnity!=null){ //如果先违约后赔付为真,激活赔付			indemnity.setStatus(1);			indemnityService.update(indemnity);		}else{			List<Bondtransaction> bondtransactions =  this.findList(queryParam);			//如果能找到这个职位这个人还未退回的保证金，则退回			for(Bondtransaction bondtransaction : bondtransactions){				if(bondtransaction!=null){					Wxorder wxorder = wxorderService.get(bondtransaction.getWxorderID());					//检查这个是不是有效的订单					Boolean flag = Boolean.TRUE;					if(wxorder.getPayType()==null||1==wxorder.getPayType()){						flag = weChatService.hasAlreadyPaid(bondtransaction.getOrderNumber());					}					if(flag){						accountService.compensateZpBond(wxorder,bondtransaction,fromUserID,toUserID);						bondtransaction.setIsReturn(true);						wxorder.setStatus(7);						wxorderService.update(wxorder);						this.update(bondtransaction);					}				}			}		}	}	//关闭职位的时候，退还报名者那些没有退还保证金的	public void closePositionAndReturnBeenBond(Position position)throws Exception{		//查出所有没有辞退的人 可能里面包含了已经结账的用户		QueryParam queryParam = new QueryParam();		queryParam.put("positionID",position.getId());		queryParam.put("dismiss",null);		List<Beenrecruited> beenrecruitedList = beenrecruitedService.findList(queryParam);		for(Beenrecruited beenrecruited : beenrecruitedList){			//判断保证金是不是退回了，如果有未退回的保证金，则修改状态			queryParam.clear();			queryParam.put("userID",beenrecruited.getCreateBy());			queryParam.put("positionID",position.getId());			queryParam.put("isReturn",false);			Bondtransaction bondtransaction  = this.one(queryParam);			if(bondtransaction!=null){				beenrecruited.setDismiss(true); //辞退				beenrecruitedService.update(beenrecruited);				//退保证金				this.returnQzBond(beenrecruited.getPositionID(),beenrecruited.getCreateBy(),Account.RE_QZ_BOND);			}		}	}}