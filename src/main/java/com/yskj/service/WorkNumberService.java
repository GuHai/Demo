package com.yskj.service;import com.yskj.dao.WorkNumberDao;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.models.enums.Examine;import com.yskj.service.auth.UserService;import com.yskj.service.base.AbstractService;import com.yskj.service.base.DictCacheService;import com.yskj.utils.DateUtils;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.CollectionUtils;import java.io.File;import java.io.FileOutputStream;import java.io.InputStream;import java.net.URL;import java.util.Date;import java.util.List;import java.util.Map;@Servicepublic class WorkNumberService extends AbstractService {	@Autowired    private WorkNumberDao workNumberDao;	@Autowired	private SchoolService schoolService;	@Autowired	private AttentionService attentionService;	@Autowired	private InformationService informationService;	@Autowired	private WorkManagerService workManagerService;	@Autowired	private WorkPositionService workPositionService;	@Autowired	private WorkListService workListService;	@Autowired	private MessageTemplateService messageTemplateService;	@Autowired	private UserService userService;	@Autowired	private AttachmentService attachmentService;	@Autowired	private TxAdminService txAdminService;	public WorkNumberService() {		super();	}	@Override	public WorkNumberDao getDao() {		return this.workNumberDao;	}	//修改information	@Transactional(rollbackFor=Exception.class)	public void bindingSchool(School school)throws Exception{		Information information = new Information();		Information existInfor = informationService.get(IJobSecurityUtils.getLoginUser().getInformation().getId());		information.setSchool(school.getId());		information.setIsStudents(school.getIsStudents());		information.setId(IJobSecurityUtils.getLoginUser().getInformation().getId());		information.setVersion(existInfor.getVersion());		informationService.update(information);		IJobSecurityUtils.getLoginUser().getInformation().setIsStudents(information.getIsStudents());		IJobSecurityUtils.getLoginUser().getInformation().setSchool(information.getSchool());		IJobSecurityUtils.getLoginUser().getInformation().setVersion(information.getVersion());		bindingWorkNumber(school);	}	public List<School> getSchoolList(String keyword)throws Exception{		QueryParam queryParam  = new QueryParam("name",keyword);		List<School> schools  = schoolService.findList(queryParam);		return schools;	}	//绑定工作号	private void bindingWorkNumber(School school)throws Exception{		QueryParam queryParam = new QueryParam();		WorkNumber workNumber = addWorkNumber(school);		queryParam.put("workID",workNumber.getId());		queryParam.put("concernID",IJobSecurityUtils.getLoginUserId());		addAttention(queryParam);	}	private void addAttention(QueryParam queryParam)throws Exception{		Attention exist = attentionService.one(queryParam);		if(exist==null){			exist = new Attention();			exist.setConcernID(IJobSecurityUtils.getLoginUserId());			exist.setWorkID(queryParam.getCondition().get("workID").toString());			attentionService.add(exist);		}	}	//添加学校	@Transactional(rollbackFor=Exception.class)	public void addSchool(School school)throws Exception{		QueryParam queryParam = new QueryParam();		queryParam.put("name",school.getName());		School exist = schoolService.one(queryParam);		if(exist!=null){			throw  new IJobException("该学校已经存在");		}		schoolService.persistenceAndChild(school);		addWorkNumber(school);	}	//根据学校信息添加工作号	private WorkNumber addWorkNumber(School school)throws Exception{		QueryParam queryParam = new QueryParam();		queryParam.put("schoolID",school.getId());		WorkNumber workNumber = workNumberDao.one(queryParam);		if(workNumber==null){			workNumber = new WorkNumber();			workNumber.setSchoolID(school.getId());			workNumber.setName(school.getName());			if(StringUtils.isNotEmptyString(school.getBadge())){				saveBadge(school.getBadge());				Attachment attachment = new Attachment();				attachment.setType(5);				attachment.setName(school.getBadge()+".jpg");				attachment.setPath("iJob/images/badge");				attachment.setDatestr("original");				attachmentService.add(attachment);				workNumber.setHeadImage(attachment.getId());			}			this.add(workNumber);		}		return workNumber;	}	public List<School> attachedSchoolPage(PageParam queryParam)throws Exception{		List<School> list = schoolService.attachedSchoolPage(queryParam);		return list;	}	@Transactional	public Boolean attention(String id)throws Exception{		QueryParam queryParam = new QueryParam();		queryParam.put("schoolID",id);		WorkNumber workNumber = this.one(queryParam);		queryParam.clear();		queryParam.put("workID",workNumber.getId());		queryParam.put("concernID",IJobSecurityUtils.getLoginUserId());		Attention attention  = attentionService.one(queryParam);		if(attention!=null){			attentionService.physicalDelete(attention);			return false;		}else{			addAttention(queryParam);			return true;		}	}	public List<WorkNumber> myAttentionList(QueryParam queryParam)throws Exception{		return this.getDao().myAttentionList(queryParam);	}	public List<WorkNumber> myManagerWorkList(QueryParam queryParam)throws Exception{		return this.getDao().myManagerWorkList(queryParam);	}	public void pushToWorkNumber(Position position)throws Exception{		if(!CollectionUtils.isEmpty(position.getPushList())){			for(String str : position.getPushList()){				QueryParam queryParam = new QueryParam();				queryParam.put("workID",str);				queryParam.put("positionID",position.getId());				WorkPosition workPosition = workPositionService.one(queryParam);				if(workPosition==null){					workPosition  = new WorkPosition();					workPosition.setPositionID(position.getId());					workPosition.setWorkID(str);					workPosition.setStatus(2);					workPositionService.add(workPosition);				}			}		}	}    public WorkNumber findWorkNumber(QueryParam queryParam){        return this.getDao().findWorkNumber(queryParam);    }	@Transactional(rollbackFor=Exception.class)	public void applyForPromotion(WorkPosition workPosition)throws Exception{		QueryParam queryParam = new QueryParam();		queryParam.put("workID",workPosition.getWorkID());		WorkManager workManager = workManagerService.one(queryParam);		if(workManager!=null){			//添加职位和工作号关联的ID			workPosition.setStatus(1);			workPositionService.add(workPosition);			//添加工单			WorkList workList = new WorkList();			workList.updateType(Examine.Extension);			workList.setStatus(1);			workList.setAuditor(workManager.getUserID());			workList.setCallback("/api/WorkNumberController/extensionCallback");			workList.setRefID(workPosition.getId());			workList.setUrl("/h5/qz/index/position_exmaine?data.position.id="+workPosition.getPositionID());			User userAdmin = userService.get(workManager.getUserID());			messageTemplateService.ptGdxx(userAdmin.getWeChatNo(),workList);		}else{//没有就推送给总管理员  ，现在改成没有管理员就不管了			/*TxAdmin adminUser = txAdminService.one(new QueryParam());			workPosition.setStatus(1);			workPositionService.add(workPosition);			//添加工单			WorkList workList = new WorkList();			workList.updateType(Examine.Extension);			workList.setStatus(1);			workList.setAuditor(adminUser.getUserID());			workList.setCallback("/api/WorkNumberController/extensionCallback");			workList.setRefID(workPosition.getId());			workList.setUrl("/h5/qz/index/position_exmaine?data.position.id="+workPosition.getPositionID());			User userAdmin = userService.get(adminUser.getUserID());			messageTemplateService.ptGdxx(userAdmin.getWeChatNo(),workList);*///			throw  new IJobException("该公众号暂时还没有管理人员"); 如果没有工作号管理人员，直接通过		}	}	@Transactional(rollbackFor=Exception.class)	public void extensionCallback(WorkList workList)throws Exception{		WorkPosition workPosition = workPositionService.get(workList.getRefID());		if(workList.getStatus()==3){ //如果是不通过			User user  = userService.get(workList.getCreateBy());			messageTemplateService.ptShtz(user.getWeChatNo(),"推广申请",workList.getMsg());			workPosition.setStatus(3);		}else{			workPosition.setStatus(2);		}		workPositionService.update(workPosition);	}	public List<WorkPosition> myapplyPromotionResult(String positionID)throws Exception{	    QueryParam queryParam = new QueryParam();	    queryParam.put("createBy",IJobSecurityUtils.getLoginUserId());	    queryParam.put("positionID",positionID);	    List<WorkPosition> list = workPositionService.findList(queryParam);        return list;    }    private void saveBadge(String badgeIndex)throws Exception{		String url  = "https://gkcx.eol.cn/upload/schoollogo/"+badgeIndex+".jpg";		URL uri = new URL(url);		InputStream in = uri.openStream();		File fold = new File(DictCacheService.UploadPath+File.separator+"iJob"+File.separator+"images"+File.separator+"badge"+File.separator+"original");		if (!fold.exists()) {			fold.mkdirs();		}		String filename = badgeIndex+".jpg";		FileOutputStream fo = new FileOutputStream(new File(fold.getPath()+File.separator+filename));		byte[] buf = new byte[1024];		int length = 0;		while ((length = in.read(buf, 0, buf.length)) != -1) {			fo.write(buf, 0, length);		}		in.close();		fo.close();	}	public List<Map> resultlist()throws Exception{		return this.getDao().resultlist();	}	public List<Map> managerPhoneList()throws Exception{		return this.getDao().managerPhoneList();	}}