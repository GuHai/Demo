package com.yskj.service;import com.yskj.dao.PersonalauthenDao;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.redis.RedisUtil;import com.yskj.service.auth.UserService;import com.yskj.service.base.AbstractService;import com.yskj.utils.DateUtils;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;import java.util.Map;@Servicepublic class PersonalauthenService extends AbstractService {	@Autowired    private PersonalauthenDao personalauthenDao;	@Autowired	private ResumeService resumeService;	@Autowired	private UserService userService;	@Autowired	private BeenrecruitedService beenrecruitedService;	@Autowired	private ScanSettleService scanSettleService;	public PersonalauthenService() {		super();	}	@Override	public PersonalauthenDao getDao() {		return this.personalauthenDao;	}	public Personalauthen mapOne(QueryParam queryParam) throws Exception {		return  this.getDao().mapOne(queryParam);	}	public Boolean isValidNumber(String number){		QueryParam queryParam  =new QueryParam();		queryParam.put("personPhoneNumber",StringUtils.isNotEmptyString(number)?number:"999没有号码");		Personalauthen personalauthen   = this.getDao().one(queryParam);		return personalauthen==null||personalauthen.getUserID().equals(IJobSecurityUtils.getLoginUserId());	}	public Boolean isOneValidNumber(Personalauthen personalauthenarg){		QueryParam queryParam  =new QueryParam();		if(StringUtils.isNotEmpty(personalauthenarg.getPersonPhoneNumber())){			queryParam.put("personPhoneNumber",StringUtils.isNotEmptyString(personalauthenarg.getPersonPhoneNumber())?personalauthenarg.getPersonPhoneNumber():"99999没有号码");			Personalauthen personalauthen   = this.getDao().one(queryParam);			return personalauthen==null||(personalauthen.getUserID().equalsIgnoreCase(personalauthenarg.getUserID())||false);		}else{			return true;		}	}	public Boolean isOneValidIDCard(Personalauthen personalauthenarg){		QueryParam queryParam  =new QueryParam();		if(StringUtils.isNotEmpty(personalauthenarg.getPersonIDCard())){			queryParam.put("personIDCard",StringUtils.isNotEmptyString(personalauthenarg.getPersonIDCard())?personalauthenarg.getPersonIDCard():"99999没有号码");			Personalauthen personalauthen   = this.getDao().one(queryParam);			return personalauthen==null||(personalauthen.getUserID().equalsIgnoreCase(personalauthenarg.getUserID())||false);		}else{			return true;		}	}	public Personalauthen checkPersonalauthen()throws Exception{		QueryParam queryParam  =  new QueryParam();		queryParam.put("userID", IJobSecurityUtils.getLoginUserId());		Personalauthen personalauthen = this.one(queryParam);		if(personalauthen==null){			personalauthen = new Personalauthen();			personalauthen.setIsVerified(false);			return personalauthen;		}else if(personalauthen.getStatus()!=1){			personalauthen.setIsVerified(false);		}else if(StringUtils.isEmptyString(personalauthen.getPersonIDCard())){			personalauthen.setIsVerified(false);		}		personalauthen.setSex(IJobSecurityUtils.getLoginUser().getSex());		personalauthen.setBirthday(IJobSecurityUtils.getLoginUser().getBirthday());		//获取简历信息		Resume resume = resumeService.one(queryParam);		if(resume==null){			personalauthen.setIsVerified(false);			personalauthen.setSex(null);			personalauthen.setRealName(null);			return personalauthen;		}		return personalauthen;	}	public Boolean signUpCondition()throws Exception{		QueryParam queryParam  =  new QueryParam();		queryParam.put("userID", IJobSecurityUtils.getLoginUserId());		Personalauthen personalauthen = this.one(queryParam);		if(personalauthen!=null){			if(StringUtils.isNotEmptyString(personalauthen.getRealName())					&&StringUtils.isNotEmptyString(personalauthen.getPersonPhoneNumber())					&&StringUtils.isNotEmptyString(personalauthen.getPersonIDCard())){				return Boolean.TRUE;			}		}		return Boolean.FALSE;	}	public Boolean isVerified()throws Exception{		QueryParam queryParam  =  new QueryParam();		queryParam.put("userID", IJobSecurityUtils.getLoginUserId());		Personalauthen personalauthen = this.one(queryParam);		//如果手机号码为空也需要跳转 如果为1也是不通过		if(personalauthen==null  || StringUtils.isEmptyString(personalauthen.getPersonPhoneNumber()) || 1!=personalauthen.getStatus()){			return false;		}		//获取简历信息		Resume resume = resumeService.one(queryParam);		if(resume==null){			return false;		}		return true;	}	public String getResumeID()throws Exception{		QueryParam queryParam  =  new QueryParam();		queryParam.put("userID", IJobSecurityUtils.getLoginUserId());		Resume resume = resumeService.one(queryParam);		return resume.getId();	}	@Transactional(rollbackFor=Exception.class)	public void generalPersonalAndResume(Personalauthen personalauthen)throws Exception{		QueryParam queryParam  =  new QueryParam();		queryParam.put("userID", IJobSecurityUtils.getLoginUserId());		Personalauthen savePersonalauthen = this.one(queryParam);		if(savePersonalauthen!=null){		    //如果不等于1，并且有上传过身份证		    if(savePersonalauthen.getStatus()!=null && savePersonalauthen.getStatus()!=1 && StringUtils.isNotEmptyString(savePersonalauthen.getPersonIDCardJustOriginal())){                if(savePersonalauthen.getStatus()==0){                    throw new IJobException("你的实名认证还在审核，不能进行个人信息完善");                }            }			personalauthen.setId(savePersonalauthen.getId());			personalauthen.setVersion(savePersonalauthen.getVersion());		}		personalauthen.setUserID(IJobSecurityUtils.getLoginUserId());		personalauthen.setPersonIDCard(personalauthen.getPersonIDCard());		personalauthen.setBirthday(IJobSecurityUtils.getLoginUser().getBirthday());		if(!this.isOneValidNumber(personalauthen)){			throw new IJobException("手机号码已经使用");		}		if(!this.isOneValidIDCard(personalauthen)){			throw new IJobException("身份证号码已经使用");		}		personalauthen.setStatus(1); //直接设置为审核通过		this.persistence(personalauthen);		Resume resume = resumeService.one(queryParam);		if(resume!=null){			/*resume.setId(personalauthen.getId());			resume.setVersion(personalauthen.getVersion());*/		}else{			resume = new Resume();		}		if(personalauthen.getSex()!=null)resume.setSex(personalauthen.getSex());		if(StringUtils.isNotEmpty(personalauthen.getRealName()))resume.setResumeName(personalauthen.getRealName());		if(StringUtils.isNotEmpty(personalauthen.getPersonPhoneNumber()))resume.setPhoneNumber(personalauthen.getPersonPhoneNumber());		resume.setUserID(IJobSecurityUtils.getLoginUserId());		resume.setIsDefault(Boolean.TRUE);		resume.setState(Boolean.TRUE);		resumeService.persistence(resume);		User user  = new User();		user.setId(IJobSecurityUtils.getLoginUserId());		user.setVersion(IJobSecurityUtils.getLoginUser().getVersion());		user.setSex(personalauthen.getSex());		user.setRealName(personalauthen.getRealName());		if(personalauthen.getAge()!=null){		    user.setBirthday(DateUtils.getBirthdayByAge(personalauthen.getAge()));		    IJobSecurityUtils.getLoginUser().setBirthday(user.getBirthday());        }        user.setPhoneNumber(personalauthen.getPersonPhoneNumber());        if(StringUtils.isNotEmpty(personalauthen.getPersonIDCard())){ //如果有身份证，则用身份证为主			String IDNo  = personalauthen.getPersonIDCard();			String date = IDNo.substring(6,10)+"-"+IDNo.substring(10,12)+"-"+IDNo.substring(12,14);			user.setBirthday(DateUtils.getDateFromString( date));			user.setIDCard(personalauthen.getPersonIDCard());			IJobSecurityUtils.getLoginUser().setBirthday(user.getBirthday());		}		if(StringUtils.isNotEmpty(user.getRealName())){			IJobSecurityUtils.getLoginUser().setRealName(user.getRealName());		}		userService.update(user);		//验证后把所有为2的改为1  简历关联上		queryParam.put("state",2);		queryParam.put("createBy", IJobSecurityUtils.getLoginUserId());		List<Beenrecruited> beenrecruitedList = beenrecruitedService.findList(queryParam);		for(Beenrecruited beenrecruited : beenrecruitedList){			beenrecruited.setState(1);			beenrecruited.setResumeID(resume.getId());			beenrecruitedService.update(beenrecruited);            beenrecruitedService.bmtxHandler(beenrecruited);		}		//同步到redis		Map<String,String> userinfo =  userService.userInfo(user.getId());		RedisUtil.hset("UserSimpleInfo",user.getId(),userinfo);		//更新所有的扫描信息		scanSettleService.updatePersonal(this.get(personalauthen.getId()));	}	public List<InsPerson>loadThreeDays(PageParam pageParam){		return getDao().loadThreeDays(pageParam);	}	public String getCheckName(String userID)throws Exception{		//	NO_CHECK：不校验真实姓名  FORCE_CHECK：强校验真实姓名;		String check  = "NO_CHECK";		Personalauthen personalauthen = this.one(new QueryParam("userID",userID));		if (personalauthen == null  || StringUtils.isEmptyString(personalauthen.getPersonIDCard()) || StringUtils.isEmptyString(personalauthen.getPersonIDCardJustOriginal())){			check = "FORCE_CHECK";		}else if(personalauthen.getStatus()==null||personalauthen.getStatus()==2){			check = "FORCE_CHECK";		}else if(personalauthen.getStatus()==0){			check = "FORCE_CHECK";		}		return check;	}}