package com.yskj.api;import com.google.gson.Gson;import com.yskj.controller.base.BaseController;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.models.enums.ActiveStatus;import com.yskj.models.enums.ApproveStatus;import com.yskj.redis.RedisUtil;import com.yskj.service.*;import com.yskj.service.auth.UserService;import com.yskj.service.base.DictCacheService;import com.yskj.utils.*;import org.apache.shiro.SecurityUtils;import org.apache.shiro.authc.LockedAccountException;import org.apache.shiro.authc.UsernamePasswordToken;import org.apache.shiro.subject.Subject;import org.apache.shiro.util.CollectionUtils;import org.dom4j.DocumentHelper;import org.dom4j.Element;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.io.BufferedReader;import java.io.InputStreamReader;import java.io.PrintWriter;import java.io.UnsupportedEncodingException;import java.math.BigDecimal;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;@Controller@RequestMapping(value = "/api/WeixinController")public class ApiWeixinController extends BaseController{    @Autowired    private WeChatService weChatService;    @Autowired    private WxorderService wxorderService;    @Autowired    private PayerrLogService payerrLogService;    @Autowired    private FollowService followService;    @Autowired    private PartnerGzhService partnerGzhService;    @Autowired    private TemplateTaskService templateTaskService;    @Autowired    private InformationService informationService;    @Autowired    private UserService userService;    @Autowired    private SigninService signinService;    @Autowired    private ShareService shareService;    @Autowired    private ScanSettleService scanSettleService ;    @Autowired    private JumpService jumpService;    @Autowired    private PersonalauthenService personalauthenService ;    @Autowired    private ArticleService articleService;    @Autowired    private WorkListService workListService;    @Autowired    private AccountService accountService;    @Autowired    private MylocaltionService mylocaltionService ;    @Autowired    private TxAdminService txAdminService;    @Autowired    private ApproveService approveService;	private final static Logger logger = LoggerFactory.getLogger(ApiWeixinController.class);    public WeChatService getService() {         return this.weChatService;     }   /*如果为空        调用接口去检查微信是否关注             如果没有关注                返回没有关注             关注了                保存已经关注 返回已经关注      如果不为空         返回已经关注*/    @RequestMapping(value = "/checkSubscribe", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result checkSubscribe(HttpServletRequest request){        Result result = new Result();//        Object openId = request.getSession().getAttribute("openId");        String openId = IJobSecurityUtils.getLoginUser().getAccountNo();        if(StringUtils.isNotEmpty(openId)){            QueryParam queryParam = new QueryParam();            queryParam.put("openID",openId);            try {                Follow follow  = followService.one(queryParam);                if(follow==null){                    String url = "https://api.weixin.qq.com/cgi-bin/user/info?access_token="+DictCacheService.getAccessToken()+"&openid="+openId+"&lang=zh_CN";                    Map<String,Object> map   =  HttpUtils.getObjectResult(url);                    //subscribe	用户是否订阅该公众号标识，值为0时，代表此用户没有关注该公众号，拉取不到其余信息。                    if(map.get("errcode")==null){                        if(0D==Double.parseDouble(map.get("subscribe").toString())){                            result.setMsg("您还没有关注，请先关注");                            result.setCode("403");                        }else{                            Follow follow1 = new Follow();                            follow1.setOpenID(openId);                            follow1.setZw(Boolean.TRUE);                            followService.add(follow1);                        }                    }else{//失败了还有一次机会的 ，重新刷新，然后重新获取                        DictCacheService.refreshAccessToken();                        url = "https://api.weixin.qq.com/cgi-bin/user/info?access_token="+DictCacheService.getAccessToken()+"&openid="+openId+"&lang=zh_CN";                        map   =  HttpUtils.getObjectResult(url);                        if(map.get("errcode")==null){                            if(0D==Double.parseDouble(map.get("subscribe").toString())){                                result.setMsg("您还没有关注，请先关注");                                result.setCode("403");                            }else{                                Follow follow1 = new Follow();                                follow1.setOpenID(openId);                                follow1.setZw(Boolean.TRUE);                                followService.add(follow1);                            }                        }else{                            result.error("获取微信查询用户信息接口失败");                        }                    }                }            } catch (Exception e) {                e.printStackTrace();                result.error("获取订阅信息错误");            }        }        if(IJobSecurityUtils.getLoginUser().getInformation().getIdentityType()== 1){            if("200".equals(result.getCode())){ //如果是正常的，去检查学校是不是存在                if(StringUtils.isEmptyString(IJobSecurityUtils.getLoginUser().getInformation().getSchool())){                    result.setCode("404");                    result.setMsg("您还没有选择学校，请选选择");                }            }        }        return result;    }    private Boolean checkSubscribeHandler(){        String openId = IJobSecurityUtils.getLoginUser().getAccountNo();        if(StringUtils.isNotEmpty(openId)){            QueryParam queryParam = new QueryParam();            queryParam.put("openID",openId);            try {                Follow follow  = followService.one(queryParam);                if(follow==null){                    String url = "https://api.weixin.qq.com/cgi-bin/user/info?access_token="+DictCacheService.getAccessToken()+"&openid="+openId+"&lang=zh_CN";                    Map<String,Object> map   =  HttpUtils.getObjectResult(url);                    //subscribe	用户是否订阅该公众号标识，值为0时，代表此用户没有关注该公众号，拉取不到其余信息。                    if(map.get("errcode")==null){                        if(0D==Double.parseDouble(map.get("subscribe").toString())){                            return false;                        }                    }else{                       return false;                    }                }            } catch (Exception e) {                e.printStackTrace();                return false;            }        }        return true;    }     //关注    @RequestMapping(value = "/follow", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public void  follow(HttpServletRequest request, HttpServletResponse response){        // 微信加密签名        String signature = request.getParameter("signature");        // 时间戳        String timestamp = request.getParameter("timestamp");        // 随机数        String nonce = request.getParameter("nonce");        // 随机字符串        String echostr = request.getParameter("echostr");        PrintWriter out = null;        try{            out = response.getWriter();            // 通过检验signature对请求进行校验，若校验成功则原样返回echostr，表示接入成功，否则接入失败            //hnyskj > insurance            if (SignUtils.check(signature, timestamp, nonce,DictCacheService.AppToken)) {                out.print(echostr);            }            out.close();            out = null;        }catch (Exception e){            e.printStackTrace();        }finally {            out.close();            out = null;        }    }    @RequestMapping(value = "/follow", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public void  followForMessage(HttpServletRequest request, HttpServletResponse response)throws Exception {        request.setCharacterEncoding("UTF-8");        response.setCharacterEncoding("UTF-8");        BufferedReader in = new BufferedReader(new InputStreamReader(request.getInputStream(),"UTF-8"));        StringBuilder stb = new StringBuilder();        String line = null;        while ((line = in.readLine()) != null) {            stb.append(line);        }        logger.info(stb.toString());        Map<String,String> map = new HashMap<String,String>();        //递归遍历父节点下的所有子节点        try {            org.dom4j.Document doc = DocumentHelper.parseText(stb.toString()); // 将字符串转为XML            Element rootElt = doc.getRootElement(); // 获取根节点            List<Element> eleList = rootElt.elements();            for (Element ele : eleList) {                map.put(ele.getName(), ele.getTextTrim());            }        }catch (Exception e){            e.printStackTrace();        }        //如果是关注则推送消息        String robotUrl = "http://api.qingyunke.com/api.php?key=free&appid=0&msg=";        String reviceTemp = "<xml><ToUserName><![CDATA[${toUser}]]></ToUserName><FromUserName><![CDATA[${fromUser}]]></FromUserName> <CreateTime>${CreateTime}</CreateTime><MsgType><![CDATA[text]]></MsgType><Content><![CDATA[${msg}]]></Content></xml>";        String subTemp = "<xml><ToUserName><![CDATA[${toUser}]]></ToUserName><FromUserName><![CDATA[${fromUser}]]></FromUserName><CreateTime>${CreateTime}</CreateTime><MsgType><![CDATA[news]]></MsgType><ArticleCount>1</ArticleCount><Articles><item><Title><![CDATA[${title}]]></Title><Description><![CDATA[${description}]]></Description><PicUrl><![CDATA[${picUrl}]]></PicUrl><Url><![CDATA[${url}]]></Url></item></Articles></xml>";        String subsTemp = "<xml><ToUserName><![CDATA[${toUser}]]></ToUserName><FromUserName><![CDATA[${fromUser}]]></FromUserName><CreateTime>${CreateTime}</CreateTime><MsgType><![CDATA[news]]></MsgType><ArticleCount>${count}</ArticleCount><Articles>${items}</Articles></xml>";        String itemTemp = "<item><Title><![CDATA[${title}]]></Title><Description><![CDATA[${description}]]></Description><PicUrl><![CDATA[${picUrl}]]></PicUrl><Url><![CDATA[${url}]]></Url></item>";        String realTimeDataTemp = "<xml><ToUserName><![CDATA[${toUser}]]></ToUserName><FromUserName><![CDATA[${fromUser}]]></FromUserName> <CreateTime>${CreateTime}</CreateTime><MsgType><![CDATA[text]]></MsgType><Content><![CDATA[${msg}]]></Content></xml>";        String respTemp = "";        try {            if(StringUtils.isNotEmpty(map.get("Event"))){                if ("subscribe".equals(map.get("Event"))) {                    QueryParam queryParam = new QueryParam();                    queryParam.put("openID",map.get("FromUserName"));                    PartnerGzh partnerGzh = partnerGzhService.pumapOne(queryParam);                    Date now = new Date();                    if(partnerGzh!=null &&( now.getTime()-partnerGzh.getUpdateTime().getTime()<=7200000)){ //如果合伙人不为空，则通过合伙人身份进来的，推送合伙人相关信息  2个小时之内                        //var link="http://${site}/share/PD/"+result.data.list[0].position.id;                        if("02".equals(partnerGzh.getType())){                            subTemp = subTemp.replace("${toUser}", map.get("FromUserName")).                                    replace("${fromUser}", map.get("ToUserName")).                                    replace("${CreateTime}", new Date().getTime()  + "").                                    replace("${title}", "欢迎来到I JOB平台").                                    replace("${description}","小伙伴分享了一个职位给你"  ).                                    replace("${picUrl}",DictCacheService.Site+"/static/images/wxbanner.png").                                    replace("${url}",DictCacheService.Site+"/share/PD/"+partnerGzh.getCode());                            respTemp = subTemp;                        }else{                            subTemp = subTemp.replace("${toUser}", map.get("FromUserName")).                                    replace("${fromUser}", map.get("ToUserName")).                                    replace("${CreateTime}", new Date().getTime()  + "").                                    replace("${title}", "欢迎来到I JOB平台").                                    replace("${description}",(partnerGzh.getPartnerUser()!=null?partnerGzh.getPartnerUser().getUser().getNickName():"小伙伴")+"邀请你成为IJob合伙人，一起赢奖金"  ).                                    replace("${picUrl}",DictCacheService.Site+"/static/images/partner.png").                                    replace("${url}",DictCacheService.Site+"/api/PartnerController/partnerPlan?openID="+map.get("FromUserName"));                            respTemp = subTemp;                        }                    }else{                       /* subTemp = subTemp.replace("${toUser}", map.get("FromUserName")).                                replace("${fromUser}", map.get("ToUserName")).                                replace("${CreateTime}", new Date().getTime()  + "").                                replace("${title}", "《I Job》让天下没有难找的兼职").                                replace("${description}","史上最好的兼职平台").                                replace("${picUrl}","http://"+DictCacheService.Site+"/static/images/wxbanner1.png").                                replace("${url}","http://"+DictCacheService.Site+"/UeditorController/news");                        respTemp = subTemp;*/                       //主要的框架格式                        queryParam.clear();                        queryParam.setGroupByClause(" group by a.posi ");                        queryParam.setOrderByClause(" order by a.posi ");                        List<Article> articleList = articleService.findList(queryParam);                        String items = itemTemp.replace("${title}", "《I Job》让天下没有难找的兼职").                                replace("${description}","史上最好的兼职平台").                                replace("${picUrl}",DictCacheService.Site+"/static/images/wxbanner1.png").                                replace("${url}",DictCacheService.Site+"/UeditorController/news");                        if(!CollectionUtils.isEmpty(articleList)){                            for(Article article : articleList){                                String image = StringUtils.isNotEmpty(article.getImage())?article.getImage():"http://"+DictCacheService.Site+"/static/images/wxbanner1.png";                                String url = article.getType()==1?DictCacheService.Site+"/UeditorController/article/"+article.getPosi():article.getContent();                                items += itemTemp.replace("${title}", article.getTitle()).                                        replace("${description}",article.getDescription()).                                        replace("${picUrl}",image).                                        replace("${url}",url);                            }                        }                        subsTemp  = subsTemp.replace("${toUser}", map.get("FromUserName")).                                replace("${fromUser}", map.get("ToUserName")).                                replace("${CreateTime}", new Date().getTime()  + "").                                replace("${count}",(articleList.size()+1)+"").                                replace("${items}",items);                        respTemp = subsTemp;                        logger.info(respTemp);                    }                    Follow follow = new Follow();                    follow.setOpenID( map.get("FromUserName"));                    follow.setZw(Boolean.TRUE);                    followService.add(follow);                    //需要判断有没有点赞，有的话，加个点赞                    Weixin weixin = weChatService.one(new QueryParam("openid",map.get("FromUserName")));                    Approve approve  = approveService.one(new QueryParam("unionid",weixin.getUnionid()));                    approve.setIsnew(weixin.getActiveNo()== ActiveStatus.Promotion.getNo()?true:false);                    if(approve!=null){                        if(approve.getTask().charAt(1)=='b'){  //未关注过                            approveService.updateTask(ApproveStatus.Follow,approve); //关注+4                            approveService.updateTask(ApproveStatus.Valid,approve);                        }else if(approve.getTask().charAt(2)=='c'){ //关注过，但是取关了                            approveService.updateTask(ApproveStatus.Valid,approve);                        }                    }                } else if("unsubscribe".equals(map.get("Event"))) {                    respTemp = "success";                    QueryParam queryParam = new QueryParam();                    queryParam.put("openID", map.get("FromUserName"));                    List<Follow> follows = followService.findList(queryParam);                    for(Follow follow : follows){                        followService.physicalDelete(follow);                    }                    Weixin weixin = weChatService.one(new QueryParam("openid",map.get("FromUserName")));                    Approve approve  = approveService.one(new QueryParam("unionid",weixin.getUnionid()));                    approve.setIsnew(weixin.getActiveNo()== ActiveStatus.Promotion.getNo()?true:false);                    if(approve!=null){                        if(approve.getTask().charAt(2)=='C'){  //如果是已经关注了的，取关，扣钱                            approveService.cancelTask(ApproveStatus.Valid,approve);  //取关 -2                        }                    }                }else if("TEMPLATESENDJOBFINISH".equals(map.get("Event"))){  //现在不处理这些东西了，发布过去算了，不发了                   /* QueryParam queryParam = new QueryParam();                    queryParam.put("openID",map.get("FromUserName"));                    queryParam.put("status",1);                    queryParam.setOrderByClause(" order by t.createTime desc ");                    TemplateTask templateTask  = templateTaskService.one(queryParam);                    if("success".equals(map.get("Status"))){ //如果成功了，直接删除掉                        templateTaskService.physicalDelete(templateTask);                    }else{ //如果没有成功，填写没有成功的原因                        templateTask.setStatus(2);                        templateTask.setErrmsg(map.get("Status"));                        templateTaskService.update(templateTask);                        //刷新一下token                      *//*  DictCacheService.refreshAccessToken();                        if(templateTask.getVersion()<10){                            messageTemplateService.runTemplateTask(templateTask);                        }*//*                    }*/                }else {                    respTemp = "success";                }            }else{                String content  = map.get("Content");                if(StringUtils.isEmpty(content)){                    content = "";                }                content = content.trim();                Pattern p=Pattern.compile("^\\d+[h|d]$",Pattern.CASE_INSENSITIVE);                Matcher m = p.matcher(content);                if(m.find()){                    content = content.toLowerCase();                    String num = content.replaceAll("[h|d]","");                    String unit = content.replaceAll("\\d","");                    QueryParam queryParam = new QueryParam();                    queryParam.put("num",Integer.parseInt(num));                    queryParam.put("unit",unit.equalsIgnoreCase("h")?"hour":"day");                    HashMap<String,Integer> datas = weChatService.realTimeRegsiterData(queryParam);                    String datastr = num+(unit.equalsIgnoreCase("h")?"小时":"天")+"内\n\r平台注册数据"+datas.get("wnum")+"条\n\r个人认证数据"+datas.get("pnum")+"条\n\r企业认证数据"+datas.get("enum")+"条\n\r公众号关注数"+datas.get("fnum")+"条";                    realTimeDataTemp = realTimeDataTemp.replace("${toUser}", map.get("FromUserName")).                            replace("${fromUser}", map.get("ToUserName")).                            replace("${CreateTime}", new Date().getTime()  +"").                            replace("${msg}",datastr);                    respTemp = realTimeDataTemp;                }else if("TD".equalsIgnoreCase(content)){                    QueryParam queryParam = new QueryParam();                    queryParam.put("openID", map.get("FromUserName"));                    Follow follow = followService.one(queryParam);                    follow.setZw(Boolean.FALSE);                    followService.update(follow);                    reviceTemp = IJobUtils.getTemplate(reviceTemp,map,"退订成功，如果想继续订阅，请回复\"DY\" ");                    respTemp = reviceTemp;                }else if("DY".equalsIgnoreCase(content)){                    QueryParam queryParam = new QueryParam();                    queryParam.put("openID", map.get("FromUserName"));                    Follow follow = followService.one(queryParam);                    follow.setZw(Boolean.TRUE);                    followService.update(follow);                    reviceTemp = IJobUtils.getTemplate(reviceTemp,map,"订阅成功！");                    respTemp = reviceTemp;                }else if(content.matches("^identity\\s+-i[1-3]+\\s+-pLum_\\*#i-job#\\*$")){                    String pattern =  "^identity\\s+-i(\\d+)\\s+-p.+$";                    // 创建 Pattern 对象                    Pattern r = Pattern.compile(pattern);                    // 现在创建 matcher 对象                    Matcher mi = r.matcher(content);                    Integer it= 0;                    if (mi.find()) {                        it = Integer.parseInt(mi.group(1));                    }                    QueryParam queryParam = new QueryParam();                    queryParam.put("weChatNo",map.get("FromUserName"));                    User user = userService.one(queryParam);                    if(user!=null){                        queryParam.clear();                        queryParam.put("userID",user.getId());                        Information information  = informationService.one(queryParam);                        information.setIdentityType(it);                        informationService.update(information);                        String str = "求职者,招聘者,管理员,VIP管理员";                        reviceTemp = IJobUtils.getTemplate(reviceTemp,map,"当前职位为："+str.split(",")[information.getIdentityType()-1]);                    }else{                        reviceTemp = IJobUtils.getTemplate(reviceTemp,map,"请先登录系统！");                    }                    respTemp = reviceTemp;                }else{                    if(RedisUtil.getStringValue("FromUserName:"+map.get("FromUserName"))==null){//                        reviceTemp = IJobUtils.getTemplate(reviceTemp,map,"您好，如果您有任何疑问或者建议，请留言，我们工作人员稍后会给您答复。");//                        RedisUtil.setStringValue("FromUserName:"+map.get("FromUserName"),"1",1800L);  //半个小时内重新发送//                        respTemp = reviceTemp;                        TxAdmin txAdmin = txAdminService.get("11");                        subTemp = subTemp.replace("${toUser}", map.get("FromUserName")).                                replace("${fromUser}", map.get("ToUserName")).                                replace("${CreateTime}", new Date().getTime()  + "").                                replace("${title}", "欢迎来到I JOB平台").                                replace("${description}","点击进入与客服聊天界面"  ).                                replace("${picUrl}",DictCacheService.Site+"/static/images/wxbanner.png").                                replace("${url}",DictCacheService.Site+"/share/LT/"+txAdmin.getUserID());                        respTemp = subTemp;                    }                }            }        }catch (IJobException e){            e.printStackTrace();        }catch (Exception e){            e.printStackTrace();        }        PrintWriter out = null;        try{            out = response.getWriter();            out.print(respTemp);        }catch (Exception e){            e.printStackTrace();        }finally {            out.close();        }    }    @RequestMapping(value="/checkOpenId",method=RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String checkOpenId(Model model,HttpServletResponse response,HttpServletRequest request,String menu,String id,String type,String userID){         String redirectUrl = DictCacheService.RedirectUri;         if(StringUtils.isNotEmpty(menu)){             if(menu.equals("findJob")){                 redirectUrl = DictCacheService.FindJob;                 request.getSession().setAttribute("type",type);             }else if(menu.equals("information")){                 redirectUrl = DictCacheService.Information;             }else if(menu.equals("personal")){                 redirectUrl = DictCacheService.Personal;             }else if(menu.equals("follow")){//                 redirectUrl = "http://www.jianzhipt.cn/api/WeixinController/menu/follow";                 redirectUrl = DictCacheService.Follow;                 request.getSession().setAttribute("userID",id);             }else if(menu.equals("share")){                 redirectUrl = DictCacheService.Share;                 request.getSession().setAttribute("refID",id);                 request.getSession().setAttribute("type",type);                 request.getSession().setAttribute("userID",userID);             }else if(menu.equals("gzh")){                 redirectUrl = DictCacheService.Gzh;                 request.getSession().setAttribute("type",type);             }else{                 menu  = "login";             }         }//	     Object openId = request.getSession().getAttribute("openId");//         Object openId = RedisService.get(request.getSession().getId());//         Cookie openIdCookie = CookieUtil.getCookieByName(request,"openId");        try {            redirectUrl = java.net.URLEncoder.encode(redirectUrl, "utf-8");        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        Object openId = request.getSession().getAttribute("openId");        System.out.println("cookieOpenID = "+CookieUtil.getCookieByName(request,"openId"));         if(StringUtils.isNotEmptyString(openId)){             logger.info("openId="+openId);             CookieUtil.setCookie(response,"openId",openId.toString(),-1);         }else{             logger.info("get OpenId");         }        //进来的时候判断下，如有有openID的话，直接去登录，没有的话调用授权页面	     if(openId!=null&&StringUtils.isNotEmpty((String)openId)){             return "forward:/api/WeixinController/loginByOpenId/"+openId+"/"+menu;         }else{	         if(type!=null && type.equals("tg")){  //如果是推广也可以直接登录                 try {                     Weixin weixin = weChatService.one(new QueryParam("unionid",id));                     if(weixin!=null){                         return "forward:/api/WeixinController/loginByOpenId/"+weixin.getOpenid()+"/"+menu;                     }else{                         String url = "https://open.weixin.qq.com/connect/oauth2/authorize?state="+DictCacheService.STATE+"&appId="+DictCacheService.AppID+"&redirect_uri="+redirectUrl+"&response_type="+DictCacheService.RESPONSE_TYPE+"&scope="+DictCacheService.SCOPE+"&connect_redirect=1#wechat_redirect";                         return "redirect:"+url;                     }                 } catch (Exception e) {                     e.printStackTrace();                     model.addAttribute("result",e.getMessage());                 }                 return "h5/error";             }else{                 String url = "https://open.weixin.qq.com/connect/oauth2/authorize?state="+DictCacheService.STATE+"&appId="+DictCacheService.AppID+"&redirect_uri="+redirectUrl+"&response_type="+DictCacheService.RESPONSE_TYPE+"&scope="+DictCacheService.SCOPE+"&connect_redirect=1#wechat_redirect";                 return "redirect:"+url;             }//             return "redirect:https://open.weixin.qq.com/connect/oauth2/authorize?state="+DictCacheService.STATE+"&appId="+DictCacheService.AppID+"&redirect_uri="+redirectUrl+"&response_type="+DictCacheService.RESPONSE_TYPE+"&scope="+DictCacheService.SCOPE+"&connect_redirect=1#wechat_redirect";         }    }    /**     * 查询页面 微信主调用     * @param     * @return Result     */    @RequestMapping(value = "/index", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model,String code,String state,HttpServletRequest request,HttpServletResponse response){        return indexHandler(model,code,"login",request,response);    }    @RequestMapping(value = "/menu/findJob", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String findJob(Model model,String code,String state,HttpServletRequest request,HttpServletResponse response){        return indexHandler(model,code,"findJob",request,response);    }    @RequestMapping(value = "/menu/information", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String information(Model model,String code,String state,HttpServletRequest request,HttpServletResponse response){        return indexHandler(model,code,"information",request,response);    }    @RequestMapping(value = "/menu/personal", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String personal(Model model,String code,String state,HttpServletRequest request,HttpServletResponse response){        return indexHandler(model,code,"personal",request,response);    }    @RequestMapping(value = "/menu/follow", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String follow(Model model,String code,String state,HttpServletRequest request,HttpServletResponse response){        return indexHandler(model,code,"follow",request,response);    }    @RequestMapping(value = "/menu/share", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String share(Model model,String code,String state,HttpServletRequest request,HttpServletResponse response){        return indexHandler(model,code,"share",request,response);    }    @RequestMapping(value = "/menu/gzh", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String gzh(Model model,String code,String state,HttpServletRequest request,HttpServletResponse response){        return indexHandler(model,code,"gzh",request,response);    }    private String indexHandler(Model model,String code,String menu,HttpServletRequest request,HttpServletResponse response){        String url = "https://api.weixin.qq.com/sns/oauth2/access_token?appid="+DictCacheService.AppID+"&secret="+DictCacheService.AppSecret+"&code="+code+"&grant_type=authorization_code";        Map<String,String> map   =  HttpUtils.getWinxinResult(url);        if("false".equals(map.get("ok"))){            /*Object time = request.getSession().getAttribute("grantNum");            int num = 1;            if(time!=null){                num = (Integer)time+1;            }            if(num>=2){                model.addAttribute("result","服务器权限校验失败:"+map.get("response"));                return "h5/error";            }else{                request.getSession().setAttribute("grantNum",num);                return "redirect:/";            }*/            if(StringUtils.isNotEmptyString(request.getSession().getAttribute("openId"))){                logger.info("服务器请求了多次，因为此前请求成功了，所以还是转正常跳转");//                return getUserInfo(response,request,model,map,menu);                return "forward:/api/WeixinController/loginByOpenId/"+request.getSession().getAttribute("openId").toString()+"/"+menu;            }else{                logger.info("服务器请求了多次，code被使用，跳转到主页");                model.addAttribute("result","服务器权限校验失败:"+map.get("response"));                return "redirect:/ijob/";            }        }        String openId = map.get("openid");        if(StringUtils.isNotEmpty(openId)){            request.getSession().setAttribute("openId",(String)openId);            request.getSession().setAttribute("accessToken",(String)map.get("access_token"));            //这里改成用Redis保存openID//            RedisService.set(request.getSession().getId(),openId);        }        return getUserInfo(response,request,model,map,menu);    }    public String getUserInfo(HttpServletResponse response,HttpServletRequest request,Model model,Map map,String menu){        String url = "https://api.weixin.qq.com/sns/userinfo?access_token="+map.get("access_token")+"&openid="+map.get("openid")+"&lang=zh_CN";        Map<String,String> resultMap = HttpUtils.getWinxinResult(url);        if("false".equals(resultMap.get("ok"))){            model.addAttribute("result","获取用户信息失败:"+resultMap.get("response"));            return "h5/error";        }        try {            String json = new String(resultMap.get("response").getBytes("ISO-8859-1"), "UTF-8");            Gson gson = new Gson();            Weixin weixin  = gson.fromJson(json, Weixin.class);            if(weixin==null||StringUtils.isEmpty(weixin.getOpenid())){                model.addAttribute("result","获取用户信息失败:"+resultMap.get("response"));                return "h5/error";            }            QueryParam queryParam  = new QueryParam();            queryParam.put("openid",weixin.getOpenid());            Weixin saveWeixin  = weChatService.one(queryParam);            if(saveWeixin!=null){                //如果不为空，则更新下登录updateTime 即登录时间 version 登录次数                saveWeixin.uploadToken((String)map.get("access_token"),(String)map.get("refresh_token"),weixin.getUnionid());                weChatService.update(saveWeixin);            }else{                weixin.uploadToken((String)map.get("access_token"),(String)map.get("refresh_token"),weixin.getUnionid());                saveWeixin  =  weChatService.saveWeixinAndCreateUser(weixin);            }            return login(response,request,model,saveWeixin,menu);        }catch (LockedAccountException e) {            model.addAttribute("result","由于你多次出现违规现象，系统已将你的账户进行冻结，请联系管理员！</br>联系电话：0731-89566256");        }catch (Exception e) {            e.printStackTrace();            model.addAttribute("result","登录失败："+e.getMessage());        }        return "/h5/error";    }    @RequestMapping(value = "/loginByOpenId/{openId}/{menu}", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String loginByOpenId(HttpServletResponse response,HttpServletRequest request,Model model,@PathVariable  String openId,@PathVariable  String menu){        logger.info("========================loginByOpenId==================");        QueryParam queryParam = new QueryParam();        queryParam.put("openid",openId);        try {            Weixin weixin = weChatService.one(queryParam);            //如果找不到对应的对象，则重新获取权限并且注册            if(weixin!=null){                return login(response,request,model,weixin,menu);            }else{                return "redirect:https://open.weixin.qq.com/connect/oauth2/authorize?state="+DictCacheService.STATE+"&appId="+DictCacheService.AppID+"&redirect_uri="+DictCacheService.RedirectUri+"&response_type="+DictCacheService.RESPONSE_TYPE+"&scope="+DictCacheService.SCOPE+"#wechat_redirect";            }        }catch (LockedAccountException e) {            model.addAttribute("result","由于你严重违规现象，系统已将你的账户进行冻结，请联系管理员！</br>联系电话：0731-89566256");        } catch (Exception e) {            model.addAttribute("result","登录失败"+e.getMessage());            e.printStackTrace();        }        return "/h5/error";    }    private String login(HttpServletResponse response,HttpServletRequest request,Model model,Weixin weixin,String menu) throws Exception{        model.addAttribute("site",DictCacheService.Site);        UsernamePasswordToken token = new UsernamePasswordToken(weixin.getOpenid(),MD5Tools.MD5(weixin.getOpenid()));        Subject subject = SecurityUtils.getSubject();//        token.setRememberMe(true);        try {            if(IJobSecurityUtils.getLoginUser()==null){                subject.login(token);            }            if("follow".equals(menu)){                //保存到分享页面，看是谁分享进来的                String id = request.getSession().getAttribute("userID").toString();                QueryParam queryParam = new QueryParam();                queryParam.put("userID",weixin.getUserID());                queryParam.put("fromUserID",id);                queryParam.put("type",1);                Share saveShare = shareService.one(queryParam);                if(saveShare==null){                    saveShare =  new Share();                    saveShare.setUserID(weixin.getUserID());                    saveShare.setFromUserID(id);                    saveShare.setType(1);                }                shareService.persistence(saveShare);                model.addAttribute("mylocaltion",mylocaltionService.one(new QueryParam("createBy",IJobSecurityUtils.getLoginUserId())));                model.addAttribute("id",id);                return "/h5/transfer";            }else if("share".equals(menu)){                String type =  request.getSession().getAttribute("type").toString();                String refID = request.getSession().getAttribute("refID").toString();                String userID = request.getSession().getAttribute("userID").toString();                if("PD".equals(type)){                    PartnerGzh partnerGzh = new PartnerGzh();                    QueryParam queryParam  = new QueryParam();                    queryParam.put("openID",weixin.getOpenid());//                    queryParam.put("type","02");                    PartnerGzh existgzh = partnerGzhService.one(queryParam);                    if(existgzh!=null){ //如果能查到旧数据，那么用当前数据替换旧数据的code                        partnerGzh.setId(existgzh.getId());                        partnerGzh.setVersion(existgzh.getVersion());                    }                    partnerGzh.setCode(refID);                    partnerGzh.setOpenID(weixin.getOpenid());                    partnerGzh.setType("02");                    partnerGzhService.persistence(partnerGzh);                    model.addAttribute("req","path");                    model.addAttribute("url","/h5/qz/index/part_time_detail_share?data.position.id="+refID+"&data.position.userID="+userID);                    return "/h5/share";                }else if("ZZ".equals(type)){                    model.addAttribute("req","path");                    model.addAttribute("url","/h5/cash?rechargeJs.userID="+refID+"&rechargeJs.type=1");                    return "/h5/share";                }else if("PN".equals(type)){                    PartnerGzh partnerGzh = new PartnerGzh();                    QueryParam queryParam  = new QueryParam();                    queryParam.put("openID",weixin.getOpenid());//                    queryParam.put("isPartner",true);                    PartnerGzh existgzh = partnerGzhService.one(queryParam);                    if(existgzh!=null){ //如果能查到旧数据，那么用当前数据替换旧数据的code                        partnerGzh.setId(existgzh.getId());                        partnerGzh.setVersion(existgzh.getVersion());                    }                    partnerGzh.setCode(refID);                    partnerGzh.setOpenID(weixin.getOpenid());                    partnerGzh.setType("01");                    partnerGzhService.persistence(partnerGzh);                    /*model.addAttribute("req","path");                    model.addAttribute("url","/h5/qz/mine/partnerPlan?data.partneruser.code="+refID);                    return "h5/share";*/                    return "forward:/api/PartnerController/partnerPlan?openID="+weixin.getOpenid();                }else if("TX".equals(type)){                    return "/h5/gl/withdrawlist";                }else if("BM".equals(type)){                    model.addAttribute("req","path");                    model.addAttribute("url","/h5/qz/index/part_time_detail_share?data.position.id="+refID+"&data.position.userID="+userID);                    return "/h5/share";                }else if("BMRQ".equals(type)){ //报名日期选择                    model.addAttribute("req","path");                    model.addAttribute("url","/h5/qz/index/scan_select_date?data.position.id="+refID);                    return "/h5/share";                }else if("QD".equals(type)){ //签到                    try {                        Personalauthen personalauthen = personalauthenService.checkPersonalauthen();                        if (personalauthen.getIsVerified().equals(Boolean.FALSE)){                            model.addAttribute("req","path");                            model.addAttribute("url","h5/qz/index/personalInform?data.jobtype=QD&data.posiid="+refID);                            return "/h5/share";                        }else{                            Jump jump = jumpService.get(refID);                            Map json = new Gson().fromJson(jump.getJson(),Map.class);                            Beenrecruited beenrecruited = signinService.signByScan(json.get("positionID").toString(),json.get("workDate").toString());                            if(DateUtils.isWorkDay(beenrecruited.getWorkDate(),new Date()) && beenrecruited.getState()==4 && beenrecruited.getDismiss()==null ){                                return "forward:/api/SigninController/signIn/" + beenrecruited.getId();                            }else{                                model.addAttribute("req","path");                                model.addAttribute("url","h5/qz/myjob/my_part_time_job?data.menu=personal:part:2");                                return "/h5/share";                            }                        }                    }catch (IJobException e) {                        model.addAttribute("result",e.getMessage());                        return "/h5/error";                    }catch (Exception e) {                        model.addAttribute("result",e.getMessage());                        return "/h5/error";                    }                }else if("JS".equals(type)){ //结算                    try {                        model.addAttribute("req","path");                        Personalauthen personalauthen = personalauthenService.checkPersonalauthen();                        if (personalauthen.getIsVerified()==Boolean.TRUE){                            Result result = scanSettleService.newSettleByScan(refID);                            model.addAttribute("url","h5/qz/myjob/my_part_time_job?data.menu=personal:part:3");                        }else{                            model.addAttribute("url","h5/qz/index/personalInform?data.jobtype=JS&data.posiid="+refID);                        }                        if("money".equals(userID)){                            if (personalauthen.getIsVerified()==Boolean.TRUE){                                Result result = scanSettleService.newSettleByScan(refID);                                model.addAttribute("url","/h5/zp/paysalary/getSalaryInfo?data.jobtype=JS&data.homepageType=1&data.posiid="+refID);                            }else{                                model.addAttribute("url","h5/qz/index/personalInform?data.jobtype=JS&data.homepageType=1&data.posiid="+refID);                            }                        }                        return "/h5/share";                    }catch (IJobException e) {                        if(e.getCode().equals("001")){                            model.addAttribute("req","path");                            model.addAttribute("url","h5/qz/myjob/my_part_time_job?data.menu=personal:part:3");                            if("money".equals(userID)){                                model.addAttribute("url","/h5/zp/paysalary/getSalaryInfo?data.jobtype=JS&data.homepageType=1&data.posiid="+refID);                            }                            return "/h5/share";                        }else{                            model.addAttribute("result",e.getMessage());                            if("money".equals(userID)){                                model.addAttribute("type","1");                            }                            return "/h5/error";                        }                    }                }else if("TJ".equals(type)){ //全职推荐                    try {                        model.addAttribute("req","path");                        model.addAttribute("url","h5/qz/myjob/full_time_detail?full.id="+refID+"&broker.code="+userID);                        return "/h5/share";                    }catch (Exception e) {                        model.addAttribute("result",e.getMessage());                        return "/h5/error";                    }                }else if("Full".equals(type)){ //全职推荐                    try {                        model.addAttribute("req","path");                        model.addAttribute("url","/h5/qz/myjob/full_time_detail?full.id="+refID+"&from="+userID);                        return "/h5/share";                    }catch (Exception e) {                        model.addAttribute("result",e.getMessage());                        return "/h5/error";                    }                }else if("INS".equals(type)){ //全职推荐                    try {                        model.addAttribute("req","path");                        model.addAttribute("url","/h5/zp/insurance/add_insurance?insRecord.id="+refID+"&data.type=3");                        return "/h5/share";                    }catch (Exception e) {                        model.addAttribute("result",e.getMessage());                        return "/h5/error";                    }                }else if("GDSH".equals(type)) {                    WorkList workList = workListService.get(refID);                    if (workList != null) {                        model.addAttribute("req", "path");                        model.addAttribute("workList",workList);                        model.addAttribute("url", workList.getUrl());                        return "h5/examine";                    } else {                        model.addAttribute("result", "工单不存在或者已经删除");                        return "h5/error";                    }                }else if("LOGIN".equalsIgnoreCase(type)){                    IJobSecurityUtils.getLoginUser().setAuthCode(refID);//保存授权码为这个对象                    RedisUtil.setStringValue("AUTHCODE:"+refID,"",60L); //redis中保存30秒钟                    return "/h5/login";                }else if("PAY".equalsIgnoreCase(type)){                    model.addAttribute("code",refID);                    return "/h5/topay";                }else if("LT".equalsIgnoreCase(type)){                    model.addAttribute("userID",refID);                    return "/h5/toChat";                }else if("tg".equals(type)){                    return "h5/coupon/promotion";                }else{                    model.addAttribute("result", "找不到模块");                    return "h5/error";                }            }else if("gzh".equalsIgnoreCase(menu)){                String type =  request.getSession().getAttribute("type").toString();                return "redirect:/ijob/indexMain?menu="+type;            }else{                String type =  StringUtils.isNotEmptyString(request.getSession().getAttribute("type"))? request.getSession().getAttribute("type").toString():"";                if(IJobSecurityUtils.getLoginUser().getInformation().getIdentityType()==null || 1==IJobSecurityUtils.getLoginUser().getInformation().getIdentityType() || 2==IJobSecurityUtils.getLoginUser().getInformation().getIdentityType()){                    if("ZP".equals(type)){                        IJobSecurityUtils.getLoginUser().getInformation().setIdentityType(2);                    }else{                        IJobSecurityUtils.getLoginUser().getInformation().setIdentityType(1);                    }                }                informationService.update( IJobSecurityUtils.getLoginUser().getInformation());                return "redirect:/indexMain?menu="+menu;//                return WeixinUtil.indexMain(model,menu,request);            }        } catch (LockedAccountException e) {            throw new LockedAccountException();        } catch (Exception e) {            e.printStackTrace();            throw new Exception("登录失败:"+e.getMessage());        }    }//===========================================================微信支付相关=================================================    @RequestMapping(value = "/pay", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String toPay(){        return "/h5/pay";    }    @RequestMapping(value = "/map", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String toMap(){        return "/h5/map2";    }    @RequestMapping(value = "/gaode", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String toGaode(){        return "/h5/gaode";    }    @RequestMapping(value = "/localtion", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String localtion(){        return "/h5/map3";    }    @RequestMapping(value = "/order", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String toOrder(Model model){        QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());        Map map = accountService.getTotalSalary(queryParam);        IJobSecurityUtils.getLoginUser().getInformation().setMoney( new BigDecimal(map.get("money").toString()));        model.addAttribute("information",IJobSecurityUtils.getLoginUser().getInformation());        return "/h5/order";    }    @RequestMapping(value = "/getJSAuthSignature", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getSignature(String url){        logger.info("======================getJSAuthSignature======================");        Result result = new Result();        try {            String ticket = RedisUtil.getTokens(RedisUtil.TICKET);            if(StringUtils.isNotEmpty(ticket)){                String noncestr = SignUtils.getRandomStringByLength(16);                String jsapi_ticket = ticket;                Map<String,String> param = new HashMap<String,String>();                param.put("noncestr",noncestr);                param.put("jsapi_ticket",jsapi_ticket);                param.put("timestamp",Long.toString(System.currentTimeMillis() / 1000));                param.put("url",url);                param.put("signature",SignUtils.getSignatureBySHA1(param));                param.put("appId",DictCacheService.AppID);                result.setData( param);            };        }catch (Exception e){            result.error("不能获取ticket");        }        return result;    }    @RequestMapping(value = "/getPaySignature", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getPaySignature(String prepay_id){        Result result  = new Result();        Map<String,String> map = new HashMap<String, String>();        map.put("appId",DictCacheService.AppID);        map.put("timeStamp",Long.toString(System.currentTimeMillis() / 1000));        map.put("nonceStr",SignUtils.getRandomStringByLength(16));        map.put("package","prepay_id="+prepay_id);        map.put("signType","MD5");        String sign = SignUtils.getSignatureByMD5toUpperCase(map);        map.put("paySign",sign);        result.setData(map);        return result;    }    @RequestMapping(value = "/callBackPaySignature", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public void  callBackPaySignature(){        logger.info("=====================微信回调了我的接口=========================");    }    @RequestMapping(value = "/refund", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result refundOrder( String orderId){        Result result   = new Result();        try{            weChatService.refundOrder(orderId);        }catch (Exception e){            logger.error("退款失败："+e.getMessage());            result.error("退款失败："+e.getMessage());        }        return result;    }    @RequestMapping(value = "/getPayOrderList", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getPayOrderList( HttpServletRequest request){        QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());        try {            return super.getObject2List(wxorderService.findList(queryParam));        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    @RequestMapping(value = "/payOk", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result payOk( String prepayID ){        Result result = new Result();        try {            Wxorder wxorder  = weChatService.payOk(prepayID);            result.setData(wxorder);        } catch (Exception e) {            logger.error(e.getMessage());            result.error("更新订单错误"+prepayID);            PayerrLog log = new PayerrLog();            log.setType(PayerrLog.BZJZF);            log.setJson("{\"prepayID\":\""+prepayID+"\"}");            try {                payerrLogService.add(log);            } catch (Exception e1) {                e1.printStackTrace();            }        }        return result;    }    @RequestMapping(value = "/payOrder", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result payOrder( @RequestBody Wxorder wxorder, HttpServletRequest request){        Result result   = new Result();        String url = SignUtils.getIpAddress(request);        try {            if(wxorder.getStatus()!=null&&wxorder.getStatus()!=1&&wxorder.getStatus()!=2){                throw new IJobException("订单已经支付");            }            if(wxorder.getPayType()!=null&&wxorder.getPayType()==2) { //余额支付)                QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());                Map map = accountService.getTotalSalary(queryParam);                if( new BigDecimal(map.get("money").toString()).multiply(new BigDecimal(100)).setScale(0,BigDecimal.ROUND_HALF_UP).intValue()>=wxorder.getFee()){//                if(new BigDecimal(map.get("money").toString()).compareTo(new BigDecimal(wxorder.getFee()/100.0).setScale(2,BigDecimal.ROUND_UP))>=0){                    Map<String, String> resp = weChatService.payOrderByBalance(wxorder.getId());                    result.setData(resp);                }else{                    throw new IJobException("余额不足");                }            }else{ //微信支付                Map<String, String> resp = weChatService.payOrder(wxorder.getId(),url);                result.setData(resp);            }        } catch (IJobException e) {            logger.error(e.getMessage());            result.error("提交订单错误："+e.getMessage());        } catch (Exception e) {            logger.error(e.getMessage());            result.error("提交订单错误："+e.getMessage());        }        return result;    }    @RequestMapping(value = "/getPayOrder", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getPayOrder(@RequestBody Wxorder wxorder){        Result result = new Result();        QueryParam queryParam = new QueryParam();        queryParam.put("userID",IJobSecurityUtils.getLoginUserId());        queryParam.put("refID",wxorder.getRefID());        queryParam.in("status", CollectionUtils.asList("4".split(",")));        queryParam.setOrderByClause( "  order by w.updateTime desc ");        try {            //如果是已经缴纳，则不需要再缴纳了呀            List<Wxorder> saveWxorders = wxorderService.findList(queryParam);            if(!CollectionUtils.isEmpty(saveWxorders)){                Integer pay = 0;                for(Wxorder wxorder1 : saveWxorders){                    pay += wxorder1.getFee();                }                if(wxorder.getFee()-pay>=1){                    if(StringUtils.isEmpty(wxorder.getId())){                        wxorder.setCode(wxorderService.getNextCode(wxorder.getType()));                        wxorder.setName(wxorderService.getTypeName(wxorder.getType()));                        wxorder.setNotice(wxorderService.getNotice(wxorder.getType()));                        wxorder.setUserID(IJobSecurityUtils.getLoginUserId());                        wxorder.setStatus(1);                        wxorder.setDescription(wxorder.getDescription()+"(补交"+(wxorder.getFee()-pay)/100.0+"元)");                        wxorder.setFee(wxorder.getFee()-pay);                        wxorderService.add(wxorder);                    }                    saveWxorders.add(wxorder);                    result = super.getObject2List(saveWxorders);                }else if(pay==wxorder.getFee()){                    result.error("应支付金额应该大于0元");                }            }else{                if(wxorder.getFee()>=1){                    if(StringUtils.isEmpty(wxorder.getId())){                        wxorder.setCode(wxorderService.getNextCode(wxorder.getType()));                        wxorder.setName(wxorderService.getTypeName(wxorder.getType()));                        wxorder.setNotice(wxorderService.getNotice(wxorder.getType()));                        wxorder.setUserID(IJobSecurityUtils.getLoginUserId());                        wxorder.setStatus(1);                        wxorderService.add(wxorder);                    }                    result = super.getObject2List(wxorder);                }else{                    result.error("应支付金额应该大于0元");                }            }        } catch (Exception e) {            logger.error(e.getMessage());            result.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/payError", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result payError( @RequestBody Wxorder wxorder ) {        Result result = new Result();        QueryParam queryParam = new QueryParam();        if(StringUtils.isNotEmptyString(queryParam.getCondition().get("id"))){            queryParam.put("id",wxorder.getId());        }else{            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            queryParam.put("refID",wxorder.getRefID());//            queryParam.put("status",wxorder.getStatus());            queryParam.in("status",CollectionUtils.asList("3,2".split(",")));        }        //查询所有下了订单未支付的单子，也不知道是不是真的支付了，所以要去微信查看订单        queryParam.setOrderByClause( "  order by w.updateTime desc ");        try {            List<Wxorder> saveWxorders = wxorderService.findList(queryParam);            for(Wxorder wxorder1 : saveWxorders){                if(2==wxorder1.getStatus()){                    Map<String,String> resp =  weChatService.getOrder(wxorder1.getCode());                    //NOTPAY  SUCCESS  如果是成功的，则为已经支付了，没有点确认                    String  paystatu = resp.get("trade_state");                    if("SUCCESS".equals(paystatu)){                        result.setData(wxorder1);                        result.setCode("202");                        break;                    }                }else if(3==wxorder1.getStatus()){                    result.setData(wxorder1);                    result.setCode("203");                    break;                }            }        } catch (Exception e) {            e.printStackTrace();        }       return result;    }/*    @RequestMapping(value = "/testOrderInfo/{code}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result payError( @PathVariable String code ) {        Result result = new Result();        try {            Map map =  weChatService.getOrder(code);            result.setData(map);        } catch (Exception e) {            e.printStackTrace();            result.error(e.getMessage());        }        return result;    }*/}