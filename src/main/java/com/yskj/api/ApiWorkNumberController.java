package com.yskj.api;import com.yskj.controller.base.BaseController;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.service.*;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.Result;import com.yskj.utils.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import java.util.List;import java.util.Map;@Controller@RequestMapping(value = "/api/WorkNumberController")public class ApiWorkNumberController extends BaseController {    @Autowired    private WorkNumberService workNumberService;    @Autowired    private SchoolService schoolService;    @Autowired    private UniversityService universityService;    private final static Logger logger = LoggerFactory.getLogger(ApiWorkNumberController.class);    public WorkNumberService getService() {        return this.workNumberService;    }    @RequestMapping(value = "/addSchool" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result addSchool(@RequestBody School school){        Result result  = new Result();        try {            //新增学校            String name = school.getName();            QueryParam queryParam = new QueryParam();            if(name.contains("(")||name.contains("（")){                name  =  name.substring(0,Math.max(name.indexOf("("),name.indexOf("（")));            }            queryParam.put("name",name);            University university  = universityService.one(queryParam);            if(university!=null){                school.setBadge(university.getBadge());                school.setName(university.getName());                workNumberService.addSchool(school);                result.setData(school);            }else{                result.error("只能添加大学");            }        } catch (IJobException e) {            result.error(e.getMessage());        }catch (Exception e) {            e.printStackTrace();            result.error("添加失败");        }        return result;    }    @RequestMapping(value = "/getSchoolList/{keyword}" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getSchoolList(@PathVariable String keyword){        Result result = new Result();        try{            result.listData(workNumberService.getSchoolList(keyword));        }catch (Exception e){            e.printStackTrace();            result.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/bindingSchool" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result bindingSchool(@RequestBody School school){        Result result = new Result();        try{            workNumberService.bindingSchool(school);        }catch (Exception e){            e.printStackTrace();            result.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/attachedSchoolList" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result attachedSchoolList(@RequestBody PageParam queryParam){        Result result = new Result();        try{            if(StringUtils.isEmptyString(queryParam.getCondition().get("name"))){                School school  = schoolService.get(IJobSecurityUtils.getLoginUser().getInformation().getSchool());                if(school!=null && StringUtils.isNotEmpty(school.getName())){                    queryParam.getCondition().put("name",school.getName());                }            }            List<School> list = workNumberService.attachedSchoolPage(queryParam);            result.listData(list);        }catch (Exception e){            e.printStackTrace();            result.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/myAttentionList" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result myAttentionList(@RequestBody PageParam queryParam){        Result result = new Result();        try{            queryParam.put("concernID",IJobSecurityUtils.getLoginUserId());            List<WorkNumber> list = workNumberService.myAttentionList(queryParam);            result.listData(list);        }catch (Exception e){            e.printStackTrace();            result.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/searchAttentionList" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result searchAttentionList(@RequestBody QueryParam queryParam){        Result result = new Result();        try{            List<WorkNumber> list = workNumberService.findList(queryParam);            result.listData(list);        }catch (Exception e){            e.printStackTrace();            result.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/myManagerWorkList" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result myManagerWorkList(@RequestBody PageParam queryParam){        Result result = new Result();        try{            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            List<WorkNumber> list = workNumberService.myManagerWorkList(queryParam);            result.listData(list);        }catch (Exception e){            e.printStackTrace();            result.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/attention/{id}" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result attention(@PathVariable String id) {        Result result = new Result();        try{            Boolean flag = workNumberService.attention(id);            result.setData(flag);        }catch (Exception e){            e.printStackTrace();            result.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/applyPromotion" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result applyPromotion(@RequestBody WorkPosition workPosition){        Result result = new Result();        try{            workNumberService.applyForPromotion(workPosition);        }catch (IJobException e){            e.printStackTrace();            result.error(e.getMessage());        }catch (Exception e){            e.printStackTrace();            result.error("提交申请失败");        }        return result;    }    @RequestMapping(value = "/extensionCallback" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result extensionCallback(@RequestBody WorkList workList){        Result result = new Result();        try{           workNumberService.extensionCallback(workList);        }catch (Exception e){            e.printStackTrace();            result.error("回调失败");        }        return result;    }    @RequestMapping(value = "/myapplyPromotionResult/{positionID}" ,method = RequestMethod.GET ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result myapplyPromotionResult(@PathVariable String positionID){        Result result = new Result();        try{            List<WorkPosition> list = workNumberService.myapplyPromotionResult(positionID);            result.listData(list);        }catch (Exception e){            e.printStackTrace();            result.error("回调失败");        }        return result;    }    @RequestMapping(value = "/resultlist" ,method = RequestMethod.GET ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result resultlist(){        Result result = new Result();        try{            List<Map> list = workNumberService.resultlist();            result.listData(list);        }catch (Exception e){            e.printStackTrace();            result.error("回调失败");        }        return result;    }    @RequestMapping(value = "/managerPhoneList" ,method = RequestMethod.GET ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result managerPhoneList(){        Result result = new Result();        try{            List<Map> list = workNumberService.managerPhoneList();            result.listData(list);        }catch (Exception e){            e.printStackTrace();            result.error("回调失败");        }        return result;    }}