package com.yskj.api;import com.yskj.controller.base.BaseController;import com.yskj.models.Contentsendrecord;import com.yskj.models.PageParam;import com.yskj.models.Personalauthen;import com.yskj.models.QueryParam;import com.yskj.service.ContentsendrecordService;import com.yskj.service.PersonalauthenService;import com.yskj.utils.*;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import java.util.Date;@Controller@RequestMapping(value = "/api/ContentsendrecordController")public class ApiContentsendrecordController extends BaseController{	@Autowired	private ContentsendrecordService contentsendrecordService;	@Autowired    private PersonalauthenService personalauthenService ;	private final static Logger logger = LoggerFactory.getLogger(ApiContentsendrecordController.class);	 public ContentsendrecordService getService() {         return this.contentsendrecordService;     }	 /**     * 页面     * @return String     */    @RequiresPermissions("Contentsendrecord")    @RequestMapping(value = "",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model){        return "contentsendrecord";    }     /**     *新增     * @param contentsendrecord     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(Contentsendrecord contentsendrecord ){         return super.add(contentsendrecord);    }    /**     * 删除     * @param contentsendrecord     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(Contentsendrecord contentsendrecord ){        return super.delete(contentsendrecord);    }     /**     * 修改     * @param contentsendrecord     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(Contentsendrecord contentsendrecord ){        return super.update(contentsendrecord);    }    /**     * 查询页面     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){       return super.findPage(pageParam);    }     /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam ){        return super.findList(queryParam);    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id ){        return super.get(id);    }    /**     * 短信验证码发送接口     * @param contentsendrecord 电话号码等参数     * @return 一个操作结果对象     */    @RequestMapping(value = "/sendSMSCode", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result sendSMSCode(Contentsendrecord contentsendrecord){        Result result = new Result();        try {            Personalauthen personalauthen = personalauthenService.one(new QueryParam("personPhoneNumber",contentsendrecord.getPhoneNumber()));            if(personalauthen==null||personalauthenService.isOneValidNumber(personalauthen)){                sendSMSCodeObject(result,contentsendrecord);            }else{                result.put("511","该手机号码已经存在");            }        }catch(Exception e){            logger.error(e.getMessage());            e.printStackTrace();            contentsendrecord.setErroMsg(e.getMessage());            result.put("500",e.getMessage());        }        return result;    }    private void sendSMSCodeObject(Result result,Contentsendrecord contentsendrecord)throws Exception{        if (contentsendrecordService.getCountNow(IJobSecurityUtils.getLoginUserId()) < 5){            AliyunUtils.sendSMSCode(result,contentsendrecord);            if(result.getMsg().indexOf("触发分钟级流控")!=-1){                result.put("512","你请求验证码的次数太过频繁。");            }else if(result.getCode() == "500"){                result.put("510","次数达到上限");            }            contentsendrecordService.add(contentsendrecord);            IJobSecurityUtils.getSession().setAttribute("code",contentsendrecord.getMsgContent());            IJobSecurityUtils.getSession().setAttribute("phoneNo",contentsendrecord.getPhoneNumber());            result.setData(contentsendrecord);        }else{            result.put("510","次数达到上限");        }    }    @RequestMapping(value = "/sendSMSCodeByPayPass", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result sendSMSCodeByPayPass(Contentsendrecord contentsendrecord){        Result result = new Result();        try {            sendSMSCodeObject(result,contentsendrecord);        }catch(Exception e){            logger.error(e.getMessage());            e.printStackTrace();            contentsendrecord.setErroMsg(e.getMessage());            result.put("500",e.getMessage());        }        return result;    }    @RequestMapping(value = "/checkSMSCode/{msgContent}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result checkSMSCode(@PathVariable String msgContent){        Result result = new Result();        if(StringUtils.isNotEmptyString(msgContent)){            QueryParam queryParam = new QueryParam("createBy",IJobSecurityUtils.getLoginUserId());            queryParam.setOrderByClause(" order by c.createTime desc ");            try {                Contentsendrecord contentsendrecord = contentsendrecordService.one(queryParam);                if(contentsendrecord!=null){                    if(DateUtils.compare(new Date(),contentsendrecord.getCreateTime())>10*60){                        result.put("501","验证码已经过期");                    }else{                        if(!msgContent.equals(contentsendrecord.getMsgContent())){                            result.put("502","验证码错误");                        }                    }                }else{                    result.put("503","请先发送验证码");                }            } catch (Exception e) {                e.printStackTrace();                result.put("504","数据库异常");            }        }else{            result.put("505","请输入验证码");        }        return result;    }}