package com.yskj.api;import com.google.gson.Gson;import com.yskj.controller.base.BaseController;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.models.excel.PayInfo;import com.yskj.models.excel.Salary;import com.yskj.redis.RedisUtil;import com.yskj.service.*;import com.yskj.service.auth.UserService;import com.yskj.utils.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.commons.CommonsMultipartFile;import javax.servlet.http.HttpServletResponse;import java.math.BigDecimal;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;@Controller@RequestMapping(value = "/api/ApplySettlementController")public class ApiApplySettlementController extends BaseController{	@Autowired	private ApplySettlementService applySettlementService;    @Autowired    private WxorderService wxorderService;    @Autowired    private SettlementPersonGroupService settlementPersonGroupService;    @Autowired    private WeChatService weChatService;    @Autowired    private MessageTemplateService messageTemplateService;    @Autowired    private PositionService positionService;    @Autowired    private UserService userService;    @Autowired    private ScanSettleService scanSettleService;    @Autowired    private ScanSettleMemberService scanSettleMemberService;    @Autowired    private PersonalauthenService personalauthenService ;    @Autowired    private SalaryImportService salaryImportService;	private final static Logger logger = LoggerFactory.getLogger(ApiApplySettlementController.class);	 public ApplySettlementService getService() {         return this.applySettlementService;     }	 /**     * 页面     * @return String     *///    @RequiresPermissions("ApplySettlement")    @RequestMapping(value = "/list/{positionID}",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String list(Model model, @PathVariable String positionID){        model.addAttribute("positionID",positionID);        return "/h5/qz/myjob/settle_recode";    }     /**     *新增     * @param applySettlement     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(@RequestBody  ApplySettlement applySettlement ){        applySettlement.setUserID(IJobSecurityUtils.getLoginUserId());        return super.persistenceAndChild(applySettlement);    }    /**     *催结算     * @param positionID     * @return Result     */    @RequestMapping(value = "/urgeSettle/{positionID}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result urgeSettle(@PathVariable String positionID ){        QueryParam queryParam = new QueryParam("positionID",positionID);        queryParam.put("state",3);        queryParam.put("userID",IJobSecurityUtils.getLoginUserId());        ApplySettlement applySettlement  = null;        Result result  = new Result();        result.setMsg("提醒招聘者结算薪资成功");        try {            applySettlement = applySettlementService.one(queryParam);            if(applySettlement!=null){                //更新下催款日期                applySettlementService.update(applySettlement);            }else{                applySettlement  = new ApplySettlement();                applySettlement.setUserID(IJobSecurityUtils.getLoginUserId());                applySettlement.setState(3);                applySettlement.setPositionID(positionID);                applySettlementService.add(applySettlement);            }            Position position  = positionService.get(positionID);            User user = userService.get(position.getUserID());            messageTemplateService.zpCjs(position,IJobSecurityUtils.getLoginUser(),user.getWeChatNo());        } catch (Exception e) {            e.printStackTrace();            result.error("提醒招聘者结算薪资失败");        }        return result;    }    /**     * 删除     * @param applySettlement     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(ApplySettlement applySettlement ){        return super.delete(applySettlement);    }    /**     * 删除所有     * @param applySettlements     * @return Result     */    @RequestMapping(value = "/deleteByIds", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result deleteByIds(@RequestBody List<ApplySettlement> applySettlements ){        return super.deleteList(applySettlements);    }     /**     * 修改     * @param applySettlement     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(ApplySettlement applySettlement ){        return super.update(applySettlement);    }    /**     * 查询页面     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){        return super.findPage(pageParam);    }     /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList/{positionID}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam,@PathVariable String positionID ){        queryParam.put("userID",IJobSecurityUtils.getLoginUserId());        queryParam.put("positionID",positionID);        queryParam.setOrderByClause(" order by a.createTime desc");        return super.findList2List(queryParam);    }    /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findMyPositionWaitSettlement", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findMyPositionWaitSettlement(@RequestBody QueryParam queryParam ){        Result result = new Result();        queryParam.setOrderByClause(" order by a.createTime desc ");        try{            List<ApplySettlement> list = applySettlementService.mapList(queryParam);            result.listData(list);        }catch (Exception e){            logger.error(e.getMessage());            result.error(e.getMessage());        }        return  result;    }    @RequestMapping(value = "/toSettlement", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result toSettlement(@RequestBody List<ApplySettlement> applySettlements ){        Result result = new Result();        try {            //先检查是否支付成功，如果支付成功则返回支付订单            SettlementPersonGroup   settlementPersonGroup =  applySettlementService.toSettlement(applySettlements);            result.listData(settlementPersonGroup);        } catch (Exception e) {            logger.error(e.getMessage());            result.error("生成订单组错误");        }        return result;    }    @RequestMapping(value = "/settleCallback/{wxorderID}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result settleCallback(@PathVariable String wxorderID ){        Result result = new Result();        try {            //调用之前还是要检查一下，不能你说修改为已交保证金就交吧            Wxorder wxorder  = wxorderService.get(wxorderID);            if(wxorder!=null){                if(wxorder.getStatus()==3){                    applySettlementService.settleCallback(wxorder);                }else{                    result.error("请缴纳薪资余额");                }            }        } catch (Exception e) {            try {                weChatService.refundOrder(wxorderID);            } catch (Exception e1) {                e1.printStackTrace();            }            logger.error(e.getMessage());            result.error("修改订单状态失败");        }        return result;    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id ){        return super.get(id);    }    @RequestMapping(value = "/toScanSettlement", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result toScanSettlement(@RequestBody ScanSettle scanSettle ){        Result result = new Result();        try {            //先检查是否支付成功，如果支付成功则返回支付订单            scanSettle =  applySettlementService.toScanSettlement(scanSettle);            result.setData(scanSettle);        } catch (Exception e) {            logger.error(e.getMessage());            result.error("生成订单组错误");        }        return result;    }    @RequestMapping(value = "/toScanSettlementBySite", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result toScanSettlementBySite(@RequestBody ScanSettle scanSettle ){        Result result = new Result();        try {            //先检查是否支付成功，如果支付成功则返回支付订单            scanSettle =  applySettlementService.toScanSettlement(scanSettle);            ScanSettle existscan  = scanSettleService.get(scanSettle.getId());            existscan.setDailySalary(scanSettle.getDailySalary());            RedisUtil.setStringValue("SCANSETTLE:"+existscan.getCode(),new Gson().toJson(existscan),710L); //十分钟过期,为了安全多送10秒            result.setData(existscan);        } catch (Exception e) {            logger.error(e.getMessage());            result.error("生成订单组错误");        }        return result;    }    @RequestMapping(value = "/getPayParam/{code}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getPayParam(@PathVariable String code){        Result result = new Result();        String json  = RedisUtil.getStringValue("SCANSETTLE:"+code);        if(StringUtils.isNotEmptyString(json)){            if(!"success".equalsIgnoreCase(json)){                ScanSettle scanSettle = new Gson().fromJson(json,ScanSettle.class);                if(scanSettle.getCreateBy().equalsIgnoreCase(IJobSecurityUtils.getLoginUserId())){                    result.setData(scanSettle);                }else{                    result.error("当前登录用户与扫码用户不一致");                }            }else{                result.setCode("403");            }        }else{            result.error("找不到待支付订单");        }        return result;    }    @RequestMapping(value = "/getPayResult/{code}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getPayResult(@PathVariable String code){        Result result = new Result();        String json  = RedisUtil.getStringValue("SCANSETTLE:"+code);        if(StringUtils.isNotEmptyString(json)&&"success".equalsIgnoreCase(json)){            result.setData("success");        }else{            result.error("error");        }        return result;    }    @RequestMapping(value = "/scanSettleCallback/{wxorderID}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result scanSettleCallback(@PathVariable String wxorderID ){        Result result = new Result();        try {            //调用之前还是要检查一下，不能你说修改为已交保证金就交吧            Wxorder wxorder  = wxorderService.get(wxorderID);            if(wxorder!=null){                if(wxorder.getStatus()==3){                    applySettlementService.scanSettleCallback(wxorder);                }else{                    result.error("请缴纳薪资余额");                }            }        } catch (Exception e) {            try {                weChatService.refundOrder(wxorderID);            } catch (Exception e1) {                e1.printStackTrace();            }            logger.error(e.getMessage());            result.error("修改订单状态失败");        }        return result;    }    @RequestMapping(value = "/addScanSettle", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result addScanSettle(@RequestBody ScanSettle scanSettle){        Result result = new Result();        try {            scanSettle.setDays(1);            scanSettle.setOpen(Boolean.TRUE);            scanSettle.setCode(UUIDGenerator.getRandomString(8));            scanSettle.setStatus(Boolean.FALSE);            scanSettleService.add(scanSettle);        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    @RequestMapping(value = "/deleteScanSettle/{scanID}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result deleteScanSettle(@PathVariable String scanID){        Result result = new Result();        try {            scanSettleService.delete(scanSettleService.get(scanID));        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     * 获得二维码结算数据。     * @return     */    @RequestMapping(value = "/getQrcodeDJSInfo", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getQrcodeDJSInfo(@RequestBody QueryParam queryParam){        Result result = new Result();        queryParam.put("isDeleted",false);        queryParam.put("createBy", IJobSecurityUtils.getLoginUserId());        try {            if(queryParam.getCondition().get("id")!=null){                scanSettleMemberService.updateSettlementStatus(queryParam.getCondition().get("id").toString());            }            List<ScanSettle> scanSettles = scanSettleService.scanSettlemap(queryParam);            result.listData(scanSettles);        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     *     * 修改二维码结算职位     * @return     */    @RequestMapping(value = "/updateScanSettle", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result updateScanSettle(@RequestBody ScanSettle scanSettle){        Result result = new Result();        try {            scanSettleService.update(scanSettle);            result.setData(scanSettle);        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     * 获得二维码已结算数据。     * @return     */    @RequestMapping(value = "/getQrcodeYJSInfo", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getQrcodeYJSInfo(@RequestBody QueryParam queryParam){        Result result = new Result();        queryParam.put("createBy", IJobSecurityUtils.getLoginUserId());        queryParam.put("scanSettleMember",true);        queryParam.put("isDeleted",null);        int count = 0 ;        BigDecimal sum = new BigDecimal(0) ;        try {            List<ScanSettle> scanSettles = scanSettleService.scanSettlemap(queryParam);            if(queryParam.getCondition().get("id")!=null){                Map map = new HashMap<>();                map.put("list",scanSettles);                for (ScanSettleMember scanSettleMember : scanSettles.get(0).getScanSettleMemberList()){                    if(scanSettleMember.getStatus()==1){                        count += 1 ;                        sum = sum.add(scanSettleMember.getSalary());                    }                }                map.put("count",count);                map.put("sum",sum);                result.listData(map);            }else{                result.listData(scanSettles);            }        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     * 扫码待结算数据集     * @return     */    @RequestMapping(value = "/findWaitRushList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findWaitRushList(){        Result result = new Result();        QueryParam queryParam = new QueryParam("id",IJobSecurityUtils.getLoginUserId());        try {            result.listData(scanSettleMemberService.findWaitRushList(queryParam));        }catch (Exception e ){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     * 催结算。     * @param scanSettleMember     * @return     */    @RequestMapping(value = "/rushSettlement", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result rushSettlement(@RequestBody ScanSettleMember scanSettleMember){        Result result = new Result();        try {            scanSettleMemberService.update(scanSettleMember);        }catch (Exception e ){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     * 扫码待结算数目     * @return     */    @RequestMapping(value = "/findWaitRushListCount", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findWaitRushListCount(){        Result result = new Result();        QueryParam queryParam = new QueryParam("id",IJobSecurityUtils.getLoginUserId());        try {            result.setData(scanSettleMemberService.findWaitRushListCount(queryParam));        }catch (Exception e ){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     * 扫码已结算总数     * @return     */    @RequestMapping(value = "/findScanYJSListCount", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findScanYJSListCount(){        Result result = new Result();        QueryParam queryParam = new QueryParam("id",IJobSecurityUtils.getLoginUserId());        try {            result.setData(scanSettleMemberService.findScanYJSListCount(queryParam));        }catch (Exception e ){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     * 扫码已结算数据集     * @return     */    @RequestMapping(value = "/findScanYJSList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findScanYJSList(){        Result result = new Result();        QueryParam queryParam = new QueryParam("id",IJobSecurityUtils.getLoginUserId());        try {            result.listData(scanSettleMemberService.findScanYJSList(queryParam));        }catch (Exception e ){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    @RequestMapping(value = "/getMyHistoryPayInfo", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getMyHistoryPayInfo(){        Result result = new Result();        try {            result.listData(scanSettleService.getMyHistoryPayInfo(IJobSecurityUtils.getLoginUserId()));        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    @RequestMapping(value = "/getMyHistoryPayInfoDetails/{scanID}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getMyHistoryPayInfoDetails(@PathVariable String scanID){        Result result = new Result();        try {            scanSettleMemberService.updateSettlementStatus(scanID);            result.listData(scanSettleMemberService.getMyHistoryPayInfoDetails(scanID));        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    @RequestMapping(value = "/lastImportRecord", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result lastImportRecord(){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());            List<Salary> list = scanSettleService.toPayRecord(queryParam);            result.listData(list);        }catch (Exception e){            logger.error(e.getMessage());            result.error(e.getMessage());        }        return result ;    }    @RequestMapping(value = "/toPayAgain/{scanID}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result toPayAgain(@PathVariable String scanID){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam("scanID",scanID);            List<Salary> list = scanSettleService.toPayRecord(queryParam);            result.listData(list);        }catch (Exception e){            logger.error(e.getMessage());            result.error(e.getMessage());        }        return result ;    }    @RequestMapping(value = "/scanSettleUpload", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result  scanSettleUpload(@RequestParam("file") CommonsMultipartFile file,@RequestParam("Number") Integer number ,@RequestParam("Total") BigDecimal total,@RequestParam("PositionName") String positionName,@RequestParam("isEdit") Boolean isEdit) {        Result result = new Result();        try{            ScanSettle scanSettle =  scanSettleService.scanSettleUpload(file,number,total,positionName,isEdit);            result.setData(scanSettle);        }catch (Exception e){            e.printStackTrace();            result.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/salaryImportList/{scanID}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result  salaryImportList(@PathVariable String scanID) {        Result result = new Result();        try{            QueryParam queryParam  = new QueryParam();            queryParam.put("scanID",scanID);            result.listData(salaryImportService.salaryImportList(queryParam));        }catch (Exception e){            e.printStackTrace();            result.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/importPayInfo/{scanID}/{title}", method = RequestMethod.GET,produces = {"application/json; charset=utf-8"})    public void importPayInfo(@PathVariable String scanID,@PathVariable String title,HttpServletResponse response){        scanSettleMemberService.updateSettlementStatus(scanID);        List<PayInfo> payInfoList = scanSettleMemberService.getMyHistoryPayInfoDetails(scanID);        ExcelExportUtil.export(response,payInfoList,title+"工资表");    }    @RequestMapping(value = "/deleteSalaryInfo/{scanID}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result deleteSalaryInfo(@PathVariable String scanID){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam();            queryParam.put("status",1);            queryParam.put("scanID",scanID);            queryParam.put("isDeleted",null);            ScanSettleMember scanSettleMember = scanSettleMemberService.one(queryParam);            if(scanSettleMember!=null){                result.error("该职位已经产生过交易，无法删除。");                return result ;            }else{                scanSettleService.deleted(scanID,queryParam);            }        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     * 查询最近七天内已结算人员     * @return     */    @RequestMapping(value = "/loadRecentPay", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result loadRecentPay(@RequestBody QueryParam queryParam){        Result result = new Result();        queryParam.put("userID",IJobSecurityUtils.getLoginUserId());        String scanID = (String)queryParam.getCondition().get("scanID");        try {            List<Map> maps = scanSettleMemberService.loadRecentPay(queryParam);            for (Map map : maps){                if(map.get("isCheck")==null){                    map.put("isCheck",false);                }else{                    map.put("isCheck","checked");                }                queryParam.clear();                queryParam.put("createBy",map.get("id"));                queryParam.put("scanID",scanID);                queryParam.put("status",1);                ScanSettleMember scanSettleMember = scanSettleMemberService.one(queryParam);                if(scanSettleMember==null){                    map.put("status","0");                }            }            result.listData(maps);        }catch (Exception e){            logger.error(e.getMessage());            result.error("网络异常");        }        return result ;    }    /**     * 查询最近七天内已结算人员     * @return     */    @RequestMapping(value = "/addRecentSettleUser", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result addRecentSettleUser(@RequestBody List<ScanSettleMember> scanSettleMembers){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam();            ScanSettle scanSettle = scanSettleService.get(scanSettleMembers.get(0).getScanID());            if(scanSettle.getIsImport()==null||!scanSettle.getIsImport()){                scanSettleMemberService.deleteLoadRecentPay(scanSettle.getId());                if(scanSettleMembers.get(0).getCreateBy()!=null){                    for(ScanSettleMember scanSettleMember : scanSettleMembers){                        queryParam.put("scanID",scanSettleMember.getScanID());                        queryParam.put("createBy",scanSettleMember.getCreateBy());                        ScanSettleMember temp = scanSettleMemberService.one(queryParam);                        if(temp==null){                            scanSettleMember.setVersion(1);                            scanSettleMember.setCreateTime(new Date());                            scanSettleMember.setUpdateTime(new Date());                            scanSettleMember.setUpdateBy(IJobSecurityUtils.getLoginUserId());                            scanSettleMember.setStatus(0);                            scanSettleMember.setDays(1);                            scanSettleMember.setId(UUIDGenerator.randomUUID());                            scanSettleMember.setIsManualAdd(true);                            scanSettleMemberService.getDao().add(scanSettleMember);                        }                    }                }            }        }catch (Exception e){            logger.error(e.getMessage());            result.error("网络异常");        }        return result ;    }}