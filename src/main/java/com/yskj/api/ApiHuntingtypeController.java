package com.yskj.api;import com.yskj.controller.base.BaseController;import com.yskj.models.Huntingtype;import com.yskj.models.PageParam;import com.yskj.models.QueryParam;import com.yskj.redis.RedisUtil;import com.yskj.service.HuntingtypeService;import com.yskj.utils.Result;import org.apache.commons.collections.CollectionUtils;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import java.util.Collections;import java.util.List;import java.util.Map;@Controller@RequestMapping(value = "/api/HuntingtypeController")public class ApiHuntingtypeController extends BaseController{	@Autowired	private HuntingtypeService huntingtypeService;	private final static Logger logger = LoggerFactory.getLogger(ApiHuntingtypeController.class);	 public HuntingtypeService getService() {         return this.huntingtypeService;     }	 /**     * 页面     * @return String     */    @RequiresPermissions("Huntingtype")    @RequestMapping(value = "",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model){        return "huntingtype";    }     /**     *新增     * @param huntingtype     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(Huntingtype huntingtype ){         return super.add(huntingtype);    }    /**     * 删除     * @param huntingtype     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(Huntingtype huntingtype ){        return super.delete(huntingtype);    }     /**     * 修改     * @param huntingtype     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(Huntingtype huntingtype ){        return super.update(huntingtype);    }    /**     * 查询页面     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){       return super.findPage(pageParam);    }     /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam ){        return super.findList(queryParam);    }    /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findListOfListData", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findListOfListData(@RequestBody QueryParam queryParam ){        return super.findList2List(queryParam);    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id ){        return super.get(id);    }    @RequestMapping(value = "/h5/zp/getWorkTypeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getWorkTypeList(){        Result result = new Result();        QueryParam queryParam = new QueryParam("isDeleted",false);        try {            result.listData(huntingtypeService.findAllType(queryParam));        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","数据错误，请尽快联系客服解决问题！");        }        return result ;    }    /**     * 循环新增数据     * @param map     * @return     */    @RequestMapping(value = "/forEachInsert",method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result forEachInsert(@RequestBody Map map){        Result result = new Result();        try {            String str = (String) map.get("typeList");            String [] arg = str.split("、");            for (int i = 0; i<arg.length;i++){                Huntingtype huntingtype = new Huntingtype();                huntingtype.setName(arg[i]);                huntingtype.setState(false);                huntingtype.setHTFatCode("0");                huntingtype.setCodeGrade("00"+(i+1));                huntingtypeService.add(huntingtype);            }        }catch (Exception e){            e.printStackTrace();            result.put("500","服务器错误");        }        return result;    }    @RequestMapping(value = "/findAllType",method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findAllType(){        Long s  = System.currentTimeMillis();        List<Huntingtype> list  = RedisUtil.list(Huntingtype.class.getSimpleName());        System.out.println(System.currentTimeMillis()-s);        if(CollectionUtils.isEmpty(list)){            list  = huntingtypeService.findAllType(new QueryParam());            RedisUtil.lpush(Huntingtype.class.getSimpleName(),list);        }        return super.getObject2List(list);    }}