package com.yskj.api;import com.yskj.controller.base.BaseController;import com.yskj.models.Beenrecruited;import com.yskj.models.Evaluate;import com.yskj.models.PageParam;import com.yskj.models.QueryParam;import com.yskj.service.BeenrecruitedService;import com.yskj.service.EvaluateService;import com.yskj.service.PositionService;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.Result;import com.yskj.utils.StringUtils;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import java.util.*;@Controller@RequestMapping(value = "/api/EvaluateController")public class ApiEvaluateController extends BaseController{	@Autowired	private EvaluateService evaluateService;	@Autowired    private PositionService positionService;	@Autowired    private BeenrecruitedService beenrecruitedService ;	private final static Logger logger = LoggerFactory.getLogger(ApiEvaluateController.class);	 public EvaluateService getService() {         return this.evaluateService;     }	 /**     * 页面     * @return String     */    @RequiresPermissions("Evaluate")    @RequestMapping(value = "",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model){        return "evaluate";    }     /**     *新增     * @param evaluate     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(@RequestBody Evaluate evaluate){        Result result = new Result();        try {            if(StringUtils.isEmpty(evaluate.getId())){                Beenrecruited beenrecruited = beenrecruitedService.get(evaluate.getBeenrecruitedID());                beenrecruited.setState(6);                beenrecruitedService.update(beenrecruited);                evaluate.setState(false);                evaluate.setEvaluateTime(new Date());            }else{                evaluate.setState(true);            }            evaluateService.persistenceAndChild(evaluate);        }catch (Exception e ){            logger.error(e.getMessage());            e.printStackTrace();            result.put("500","参数错误！");        }         return result;    }    /**     *新增     * @param evaluate     * @return Result     */    @RequestMapping(value = "/addQzContent", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result addQzContent(@RequestBody Evaluate evaluate){        Result result = new Result();        try {            // e.evaluateContent, e.evaluateTime, e.evaluateLevel, e.userID, e.positionID, e.state, e.picture,            evaluateService.addQzContent(evaluate);        }catch (Exception e ){            logger.error(e.getMessage());            e.printStackTrace();            result.put("500","参数错误！");        }        return result;    }    /**     * 删除     * @param evaluate     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(Evaluate evaluate ){        return super.delete(evaluate);    }     /**     * 修改     * @param evaluate     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(Evaluate evaluate ){        return super.update(evaluate);    }    /**     * 查询页面  雇主获取对职位的评价     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){        return super.findPage(pageParam);    }     /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam ){        return super.findList(queryParam);    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id ){        return super.get(id);    }    @RequestMapping(value = "/zp/evaluate_no",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String evaluate_no(){        return "/h5/zp/evaluate_no";    }    @RequestMapping(value = "/zp/evaluate/{beenrecruitedID}/{positionID}/{userID}",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String evaluate(Model model , @PathVariable String beenrecruitedID,@PathVariable String positionID, @PathVariable String userID){        return "/h5/zp/evaluate";    }    /**     * 获得当前职位下已评价的用户信息     * @param positionID     * @return     */    @RequestMapping(value = "/zp/getNowUserWithEvaluate/{positionID}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getNowUserWithEvaluate(@PathVariable String positionID){        Result result = new Result();        QueryParam queryParam = new QueryParam();        queryParam.put("positionUserID", IJobSecurityUtils.getLoginUserId());        try {            if ("0".equals(positionID))                result.listData(evaluateService.getNowUserWithEvaluate(queryParam));            else{                queryParam.put("positionID", positionID);                result.listData(evaluateService.getNowUserWithEvaluate(queryParam));            }        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500","数据异常， 请尽快联系客服，进行解决！");        }        return result;    }    @RequestMapping(value = "/h5/zp/getEvaluateInfo/{id}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getEvaluateInfo(@PathVariable String id){      /*  Result result = new Result();        try {            QueryParam queryParam = new QueryParam();            queryParam.put("positionID",positionID);            queryParam.put("userID",userID);            queryParam.put("state",0);            Evaluate positionEvalute = evaluateService.getOneEvaluate(queryParam);            queryParam.put("state",1);            Evaluate userEvalute = evaluateService.getOneEvaluate(queryParam);            List list = new ArrayList();            Map<String ,Evaluate> map = new HashMap<String, Evaluate>();            map.put("position",positionEvalute);            map.put("user",userEvalute);            list.add(map);            result.listData(list);        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500","数据异常， 请尽快联系客服，进行解决！");        }        return result;*/        QueryParam queryParam = new QueryParam();        queryParam.put("id",id);        Evaluate positionEvalute = null;        try {            positionEvalute = evaluateService.replymapOne(queryParam);        } catch (Exception e) {            e.printStackTrace();        }        return super.getObject2List(positionEvalute);    }    @RequestMapping(value = "/h5/zp/deleteListEvaluate", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result deleteListEvaluate(@RequestBody List<Evaluate> evaluateList){        Result result = new Result();        try {            for (Evaluate evaluate : evaluateList){                evaluateService.delete(evaluate);            }        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","数据异常， 请尽快联系客服，进行解决！");        }        return result;    }}