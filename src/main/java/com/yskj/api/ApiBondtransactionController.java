package com.yskj.api;import com.yskj.controller.base.BaseController;import com.yskj.models.*;import com.yskj.service.BondtransactionService;import com.yskj.service.BondtransactioncpeService;import com.yskj.service.PositionService;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.Result;import com.yskj.utils.StringUtils;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;@Controller@RequestMapping(value = "/api/BondtransactionController")public class ApiBondtransactionController extends BaseController{	@Autowired	private BondtransactionService bondtransactionService;	@Autowired    private BondtransactioncpeService bondtransactioncpeService;	@Autowired    private PositionService positionService;	private final static Logger logger = LoggerFactory.getLogger(ApiBondtransactionController.class);	 public BondtransactionService getService() {         return this.bondtransactionService;     }	 /**     * 页面     * @return String     */    @RequiresPermissions("Bondtransaction")    @RequestMapping(value = "",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model){        return "bondtransaction";    }     /**     *新增     * @param bondtransaction     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(Bondtransaction bondtransaction ){         return super.add(bondtransaction);    }    /**     * 删除     * @param bondtransaction     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(Bondtransaction bondtransaction ){        return super.delete(bondtransaction);    }     /**     * 修改     * @param bondtransaction     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(Bondtransaction bondtransaction ){        return super.update(bondtransaction);    }    /**     * 查询页面     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){        Result result = new Result();        pageParam.put("userID",IJobSecurityUtils.getLoginUserId());        pageParam.setOrderByClause(" order by b.updateTime desc ");        try {            bondtransactionService.findPage(pageParam);        } catch (Exception e) {            e.printStackTrace();            result.error("获取保证金失败");        }        return super.getObject2List(pageParam);    }    /**     * 查询页面     * @param pageParam     * @return Result     */    @RequestMapping(value = "/find2Page", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result find2Page(@RequestBody PageParam pageParam ){        Result result = new Result();        pageParam.put("userID",IJobSecurityUtils.getLoginUserId());        pageParam.setOrderByClause(" order by b.updateTime desc ");        try {            bondtransactioncpeService.findPage(pageParam);        } catch (Exception e) {            e.printStackTrace();            result.error("获取保证金失败");        }        return super.getObject2List(pageParam);    }    /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam ){        return super.findList(queryParam);    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id ){        return super.get(id);    }    @RequestMapping(value = "/myBondDetail/{type}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result myBondDetail(@RequestBody QueryParam queryParam ,@PathVariable Integer type){        Result result = new Result();        queryParam.put("userID", IJobSecurityUtils.getLoginUserId());        queryParam.setOrderByClause(" order by b.createTime desc ");        try {            Bill bill = new Bill();            if(2==type){                if(StringUtils.isNotEmptyString(queryParam.getCondition().get("id"))){                    String id = queryParam.getCondition().get("id").toString();                    String name = queryParam.getCondition().get("name").toString();                    queryParam.clear();                    queryParam.put("id",id);                    queryParam.put("name",name);                }                Bondtransactioncpe bondtransaction = bondtransactioncpeService.one(queryParam);                bill.setCpename(bondtransaction.getCpeName());                bill.setArrival(bondtransaction.getUpdateTime());                bill.setEnsureTime(bondtransaction.getUpdateTime());                bill.setMoney(bondtransaction.getPremiumMoney());                bill.setCode(bondtransaction.getOrderNumber());                bill.setPayTime(bondtransaction.getUpdateTime());                bill.setName((String)(queryParam.getCondition().get("name").toString()));                bill.setSubmitTime(bondtransaction.getCreateTime());                bill.setArrival(bondtransaction.getUpdateTime());                bill.setType("保证金");                bill.setMark(bondtransaction.getMark());                if(bondtransaction.getIsReturn()){                    bill.setStatus(3);                }            }else{                Bondtransaction bondtransaction = bondtransactionService.one(queryParam);                bill.setArrival(bondtransaction.getUpdateTime());                bill.setEnsureTime(bondtransaction.getUpdateTime());                bill.setMoney(bondtransaction.getPremiumMoney());                bill.setCode(bondtransaction.getOrderNumber());                bill.setPayTime(bondtransaction.getUpdateTime());                bill.setName((String)(queryParam.getCondition().get("name").toString()));                bill.setSubmitTime(bondtransaction.getCreateTime());                bill.setArrival(bondtransaction.getUpdateTime());                bill.setType("保证金");                bill.setMark(bondtransaction.getMark());                if(bondtransaction.getIsReturn()){                    bill.setStatus(3);                }            }            result.listData(bill);        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    @RequestMapping(value = "/getBondDetail", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getBondDetail(@RequestBody QueryParam queryParam){        Result result = new Result();        Bill bill = new Bill();        try{            Position position = null;            if("1".equals(queryParam.getCondition().get("type").toString())){//保证金退回                queryParam.put("userID",IJobSecurityUtils.getLoginUserId());                Bondtransaction bondtransaction = bondtransactionService.one(queryParam);                queryParam.empty();                queryParam.put("id",bondtransaction.getPositionID());                position = positionService.one(queryParam);                bill.setArrival(bondtransaction.getUpdateTime());                bill.setEnsureTime(bondtransaction.getUpdateTime());                bill.setMoney(bondtransaction.getPremiumMoney());                bill.setCode(bondtransaction.getOrderNumber());                bill.setPayTime(bondtransaction.getUpdateTime());                bill.setName(position.getTitle());                bill.setSubmitTime(bondtransaction.getCreateTime());                bill.setArrival(bondtransaction.getUpdateTime());                bill.setType("保证金");                bill.setMark(bondtransaction.getMark());                if(bondtransaction.getIsReturn()){                    bill.setStatus(3);                }else{                    bill.setStatus(2);                }            }else{ //保证金赔付                Bondtransactioncpe bondtransaction = bondtransactioncpeService.one(queryParam);                queryParam.empty();                queryParam.put("id",bondtransaction.getPositionID());                position = positionService.one(queryParam);                bill.setCpename(bondtransaction.getCpeName());                bill.setArrival(bondtransaction.getUpdateTime());                bill.setEnsureTime(bondtransaction.getUpdateTime());                bill.setMoney(bondtransaction.getPremiumMoney());                bill.setCode(bondtransaction.getOrderNumber());                bill.setPayTime(bondtransaction.getUpdateTime());                bill.setName(position.getTitle());                bill.setSubmitTime(bondtransaction.getCreateTime());                bill.setArrival(bondtransaction.getUpdateTime());                bill.setType("保证金");                bill.setMark(bondtransaction.getMark());                if(bondtransaction.getIsReturn()){                    bill.setStatus(4);                }else{                    bill.setStatus(2);                }            }            result.listData(bill);        }catch (Exception e){            e.printStackTrace();        }        return result;    }    @RequestMapping(value = "/getBondDetail2", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getBondDetail2(@RequestBody QueryParam queryParam){        Result result = new Result();        Bill bill = new Bill();        try{            Position position = null;            Bondtransactioncpe bondtransaction = bondtransactioncpeService.one(queryParam);            if(bondtransaction!=null){                queryParam.empty();                queryParam.put("id",bondtransaction.getPositionID());                position = positionService.one(queryParam);                bill.setCpename(bondtransaction.getCpeName());                bill.setArrival(bondtransaction.getUpdateTime());                bill.setEnsureTime(bondtransaction.getUpdateTime());                bill.setMoney(bondtransaction.getPremiumMoney());                bill.setCode(bondtransaction.getOrderNumber());                bill.setPayTime(bondtransaction.getUpdateTime());                bill.setName(position.getTitle());                bill.setSubmitTime(bondtransaction.getCreateTime());                bill.setArrival(bondtransaction.getUpdateTime());                bill.setType("保证金赔付");                bill.setMark(bondtransaction.getMark());                if(bondtransaction.getIsReturn()){                    bill.setStatus(4);                }else{                    bill.setStatus(2);                }            }else{                Bondtransaction bondtransaction1 = bondtransactionService.one(queryParam);                queryParam.empty();                queryParam.put("id",bondtransaction1.getPositionID());                position = positionService.one(queryParam);                bill.setArrival(bondtransaction1.getUpdateTime());                bill.setEnsureTime(bondtransaction1.getUpdateTime());                bill.setMoney(bondtransaction1.getPremiumMoney());                bill.setCode(bondtransaction1.getOrderNumber());                bill.setPayTime(bondtransaction1.getUpdateTime());                bill.setName(position.getTitle());                bill.setSubmitTime(bondtransaction1.getCreateTime());                bill.setArrival(bondtransaction1.getUpdateTime());                bill.setType("保证金退回");                bill.setMark(bondtransaction1.getMark());                if(bondtransaction1.getIsReturn()){                    bill.setStatus(3);                }else{                    bill.setStatus(2);                }            }            result.listData(bill);        }catch (Exception e){            e.printStackTrace();        }        return result;    }}