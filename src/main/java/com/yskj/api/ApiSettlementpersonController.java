package com.yskj.api;import com.yskj.controller.base.BaseController;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.service.*;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.Result;import org.apache.shiro.util.CollectionUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@Controller@RequestMapping(value = "/api/SettlementpersonController")public class ApiSettlementpersonController extends BaseController{	@Autowired	private SettlementpersonService settlementpersonService;	@Autowired    private ApplySettlementService applySettlementService;	@Autowired    private SettlementService settlementService;	@Autowired    private BondtransactionService bondtransactionService;	@Autowired    private PositionService positionService ;	@Autowired    private RedPacketService redPacketService ;	@Autowired    private ForwardService forwardService;	@Autowired    private SettlementPersonGroupService settlementPersonGroupService;	private final static Logger logger = LoggerFactory.getLogger(ApiSettlementpersonController.class);	 public SettlementpersonService getService() {         return this.settlementpersonService;     }	 /**     * 页面     * @return String     *///    @RequiresPermissions()    @RequestMapping(value = "settlementpersonList/{positionID}",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model, @PathVariable String positionID){        model.addAttribute("positionID",positionID);        return "/h5/qz/myjob/salary_recode";    }    /**     * 详情页面     * @return String     */    @RequestMapping(value = "settlementpersonDetail/{id}",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String settlementpersonDetail(Model model, @PathVariable String id){        model.addAttribute("id",id);        return "/h5/qz/myjob/salary_detail";    }    /**     * 申请结算     * @return String     */    @RequestMapping(value = "/applySettle/{positionID}/{workDate}",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String applySettle(Model model, @PathVariable String positionID ,@PathVariable String workDate){        model.addAttribute("positionID",positionID);        model.addAttribute("workDate",workDate);        return "/h5/qz/myjob/applicant_settle";    }    /**     *新增     * @param settlementperson     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(Settlementperson settlementperson ){         return super.add(settlementperson);    }    /**     *全部确认     * @param settlementpersons     * @return Result     */    @RequestMapping(value = "/confirmAll", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result confirmAll(@RequestBody  List<Settlementperson> settlementpersons ){        Result result = new Result();       try{           this.getService().confirmAll(settlementpersons);           result.setMsg("确认薪资成功");       }catch (IJobException e){           logger.error(e.getMessage());           result.error(e.getMessage());       }catch (Exception e){           logger.error(e.getMessage());           result.error("操作失败");       }        return result;    }    @RequestMapping(value = "/confirm", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result confirm(@RequestBody Settlementperson settlementperson){        Result result = new Result();        try {            List<Settlementperson> settlementpersons = new ArrayList<Settlementperson>();            settlementpersons.add(settlementperson);            this.getService().confirmAll(settlementpersons);            result.setMsg("确认薪资成功");        } catch (Exception e) {            logger.error(e.getMessage());            result.error("操作失败");        }        return result;    }    /**     * 删除     * @param settlementperson     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(Settlementperson settlementperson ){        return super.delete(settlementperson);    }     /**     * 修改     * @param settlementperson     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(Settlementperson settlementperson ){        return super.update(settlementperson);    }    /**     * 查询页面     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){       return super.findPage(pageParam);    }     /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam ){        queryParam.put("userID", IJobSecurityUtils.getLoginUserId());        queryParam.setOrderByClause(" order by s.createTime desc ");        Result result = new Result ();        try {            result.listData(settlementpersonService.findList(queryParam));        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","数据错误！");        }        return result;    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id ){        return super.get(id);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/getSalaryDetail/{id}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getSalaryDetail(@PathVariable String id){        QueryParam queryParam = new QueryParam();        queryParam.put("id",id);        return super.getObject2List(settlementpersonService.mapOne(queryParam));    }    /**     * 查询子页面下的     * @param code     * @return     */    @RequestMapping(value = "qz/getSettlementpersonInfo/{code}/{billtype}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getSettlementpersonInfo(@PathVariable String code,@PathVariable String billtype){        Result result = new Result();        QueryParam queryParam = new QueryParam();        queryParam.put("code",code);        queryParam.put("billtype",billtype);        queryParam.put("userID",IJobSecurityUtils.getLoginUserId());        try {            result.listData(settlementpersonService.getSettlementperson(queryParam));        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","数据异常，请联系客服解决您当前出现的问题。");        }        return result;    }    /**     * 我的工资结算详情     * @param id     * @return     */    @RequestMapping(value = "/zp/getSettlementpersonGroupInfo/{id}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getSettlementpersonGroupInfo(@PathVariable String id){        Result result = new Result();        QueryParam queryParam = new QueryParam();        queryParam.put("id",id);        try {            SettlementPersonGroup settlementPersonGroup  = settlementPersonGroupService.salarymapOne(queryParam);            String[] appid  = settlementPersonGroup.getApplyId().split(",");            queryParam.clear();            queryParam.in("id", CollectionUtils.asList(appid));            List<ApplySettlement> applySettlements =  applySettlementService.findList(queryParam);            settlementPersonGroup.setApplySettlements(applySettlements);            result.listData(settlementPersonGroup);        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","数据异常，请联系客服解决您当前出现的问题。");        }        return result;    }    @RequestMapping(value = "/zp/settlementList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result settlementList(@RequestBody PageParam pageParam){        Result result = new Result();        pageParam.put("createBy",IJobSecurityUtils.getLoginUserId());        pageParam.put("isDeleted",false);        pageParam.setOrderByClause(" order by s.createTime desc ");        try {            return super.getObject2List(settlementPersonGroupService.findPage(pageParam));        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","数据异常，请联系客服解决您当前出现的问题。");        }        return result;    }    //取消支付    @RequestMapping(value = "/zp/cancelPay/{id}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result cancelPay(@PathVariable String id){        Result result = new Result();        try{            settlementPersonGroupService.cancelPay(id);        }catch (Exception e){            logger.error(e.getMessage());            result.error("取消支付订单失败");        }        return result;    }    @RequestMapping(value = "/getUnsettled", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getUnsettled(){        Result result = new Result();        QueryParam queryParam = new QueryParam("createBy",IJobSecurityUtils.getLoginUserId());        queryParam.put("isPay",false);        queryParam.put("isDeleted",false);        try {            long l = settlementPersonGroupService.count(queryParam);            result.setData(l);        } catch (Exception e) {            e.printStackTrace();            result.error("错误信息："+e.getMessage());        }        return result;    }    @RequestMapping(value = "/getRewardInfo/{code}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getRewardInfo(@PathVariable String code){        Result result = new Result();        QueryParam queryParam = new QueryParam("settlementOrderNumber",code);        try {            Settlement settlement = settlementService.one(queryParam);            Map map = new HashMap<>();            SettlementPersonGroup settlementPersonGroup = settlementPersonGroupService.get(settlement.getRefID());            Position position = positionService.get(settlementPersonGroup.getPositionID());            map.put("title",position.getTitle());            result.listData(map);        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙");        }        return result;    }    @RequestMapping(value = "/getRedPacketBackInfo/{code}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getRedPacketBackInfo(@PathVariable String code){        Result result = new Result();        QueryParam queryParam = new QueryParam("settlementOrderNumber",code);        try {            Settlement settlement = settlementService.one(queryParam);            Map map = new HashMap<>();            RedPacket redPacket = redPacketService.getRedPacketBack(settlement.getRefID());            if(redPacket!=null){                Forward forward = forwardService.get(redPacket.getForwardId());                if (forward!= null){                    Position position = positionService.get(forward.getPositionId());                    map.put("title",position.getTitle());                    result.listData(map);                }            }        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙");        }        return result;    }}