package com.yskj.api;import com.yskj.controller.base.BaseController;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.service.*;import com.yskj.service.auth.UserService;import com.yskj.utils.*;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import java.math.BigDecimal;import java.util.*;@Controller@RequestMapping(value = "/api/AccountController")public class ApiAccountController extends BaseController {    @Autowired    private AccountService accountService;    @Autowired    private TxTaskService txTaskService;    @Autowired    private RedPacketReceiveService redPacketReceiveService;    @Autowired    private TxAdminService txAdminService;    @Autowired    private WithdrawalsService withdrawalsService;    @Autowired    private WxorderService wxorderService;    @Autowired    private PartnerRebateService partnerRebateService;    @Autowired    private PersonalauthenService personalauthenService;    @Autowired    private SettlementService settlementService ;    @Autowired    private RedPacketService redPacketService ;    @Autowired    private MessageTemplateService messageTemplateService;    @Autowired    private UserService userService;    private final static Logger logger = LoggerFactory.getLogger(ApiAccountController.class);    public AccountService getService() {        return this.accountService;    }    /**     * 页面     *     * @return String     */    @RequiresPermissions("Account")    @RequestMapping(value = "", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model) {        return "account";    }    /**     * 新增     *     * @param account     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(Account account) {        return super.add(account);    }    /**     * 删除     *     * @param account     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(Account account) {        return super.delete(account);    }    /**     * 修改     *     * @param account     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(Account account) {        return super.update(account);    }    /**     * 查询页面     *     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam) {        pageParam.put("userID",IJobSecurityUtils.getLoginUserId());        try {            this.accountService.billPage(pageParam);        } catch (Exception e) {            e.printStackTrace();        }        return super.getObject2List(pageParam);    }    @RequestMapping(value = "/findPageById/{id}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPageById(@PathVariable String id) {        try {            TxTask txTask = txTaskService.get(id);            QueryParam queryParam = new QueryParam();            queryParam.put("userID",txTask.getUserID());            List<HashMap> list = this.accountService.billList(queryParam);            return super.getObject2List(list);        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    /**     * 查询集合     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam) {        return super.findList(queryParam);    }    /**     * 模糊查询页面     *     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam) {        return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam) {        return super.findLikeList(queryParam);    }    /**     * 唯一查询     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam) {        return super.one(queryParam);    }    /**     * 唯一查询通过ID     *     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id) {        return super.get(id);    }    @RequestMapping(value = "/getTotalSalary", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getTotalSalary() {        Result result = new Result();        QueryParam queryParam = new QueryParam("userID", IJobSecurityUtils.getLoginUserId());        try {//            queryParam.put("payerType", IJobSecurityUtils.getLoginUser().getInformation().getIdentityType());            //退款处理            queryParam.in("status", Arrays.asList("2,3".split(",")));            accountService.refundAuto(queryParam);            queryParam.setIds(null);            Map money = getService().getTotalSalary(queryParam);            Map bond = getService().getTotalBond(queryParam);            money.put("bond", bond.get("bond"));            queryParam.clear();            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            queryParam.put("type","'2','8','10','11','14'");            Map accountInfo = accountService.accountInfo(queryParam);            money.put("salary",accountInfo.get("salary"));            money.put("tax",accountInfo.get("tax"));            // 红包数量            queryParam.clear();            queryParam.put("userId", IJobSecurityUtils.getLoginUserId());            queryParam.put("isActivation",true);            queryParam.put("beenrecruitedState",4);            money.put("redPacketCount", redPacketReceiveService.count(queryParam));            BigDecimal recharge = accountService.getRechargeSum(IJobSecurityUtils.getLoginUserId());            if(recharge==null)recharge=new BigDecimal(0);            money.put("recharge",recharge);            result = super.getObject2List(money);        } catch (Exception e) {            e.printStackTrace();        }        return result ;    }    @RequestMapping(value = "/applyWithdraw", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result applyWithdraw(@RequestBody Withdrawals withdrawals) {        Result result = new Result();        try {            //先检查是不是还有这么多余额            QueryParam queryParam = new QueryParam("userID", IJobSecurityUtils.getLoginUserId());            HashMap map = getService().getTotalSalary(queryParam);            BigDecimal money = new BigDecimal(map.get("money").toString());            if (withdrawals.getPrice().compareTo(new BigDecimal(50)) < 0) {                result.error("提现金额不能少于为50");            } else if (money.compareTo(withdrawals.getPrice().multiply(new BigDecimal(1.006)).setScale(2, BigDecimal.ROUND_HALF_UP)) >= 0) {                accountService.applyWithdraw(withdrawals);            } else {                result.error("余额不足");            }        } catch (Exception e) {            logger.error(e.getMessage());            result.error("生成订单失败");        }        return result;    }    @RequestMapping(value = "/withdraw", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String withdraw(Model model,String code) {        QueryParam queryParam = new QueryParam();        queryParam.put("code",code);        try {            TxTask txTask  =  txTaskService.one(queryParam);            if(txTask!=null){                if(txTask.getStatus()==Boolean.TRUE){                    model.addAttribute("code","400");//已结处理完了                }else{                    model.addAttribute("code","200");                }                model.addAttribute("txTask",txTask);            }else{                model.addAttribute("code","404"); //找不到对应任务            }        } catch (Exception e) {            e.printStackTrace();        }        return "h5/withdraw";    }    @RequestMapping(value = "/ratification", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result ratification(HttpServletRequest request ,@RequestBody TxTask txTask) {        Result result = new Result();        try {            TxTask existTx = txTaskService.get(txTask.getId());            if(existTx!=null && existTx.getStatus()==Boolean.FALSE){                if(existTx.getCode().equals(txTask.getCode())){                    TxAdmin txAdmin  = txAdminService.get(existTx.getAdminID());                    if(txAdmin!=null){                        String pw = MD5Tools.getMD5Hash(txAdmin.getUserID(),txTask.getPassword());                        if(!pw.equals(txAdmin.getValidcode())){                            result.error("提现密码不正确");                        }else{                            try{                                withdrawalsService.withdrawalCash(existTx,txAdmin,request);                            }catch (IJobException e){                                result.error(e.getMessage());                            }                        }                    }else{                        result.error("当前用户没有该任务执行权限");                    }                }else{                    result.error("校验码不匹配");                }            }else{                result.error("查询不到任务,或者任务已结执行");            }        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    @RequestMapping(value = "/h5/gl/refresh", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result refresh() {        Result result = new Result();        try{            accountService.chechAccount(null);            accountService.generalUnTxTask();        }catch (Exception e){            e.printStackTrace();            result.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/h5/gl/ratificationOne", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result ratificationOne(HttpServletRequest request ,@RequestBody TxTask pwTask) {        Result result = new Result();        QueryParam queryParam = new QueryParam();        queryParam.put("userID",IJobSecurityUtils.getLoginUserId());        String errmsg = "";        try {            TxAdmin txAdmin = txAdminService.one(queryParam);            if(txAdmin!=null){ //校验管理员                String pw = MD5Tools.getMD5Hash(txAdmin.getUserID(),pwTask.getPassword());                if(!pw.equals(txAdmin.getValidcode())) {  //校验密码                    errmsg += "提现密码不正确";                }else{                    queryParam.clear();                    queryParam.put("adminID",txAdmin.getId());                    queryParam.put("id",pwTask.getId());                    TxTask txTask =  txTaskService.one(queryParam);                    if(txTask!=null && txTask.getStatus()==Boolean.FALSE){                        try{                            withdrawalsService.withdrawalCash(txTask,txAdmin,request);                        }catch (IJobException e){                            e.printStackTrace();                            txTask.setErrmsg(e.getMessage());                            errmsg += e.getMessage()+"  ";                        }catch (Exception e){                            e.printStackTrace();                            txTask.setErrmsg(e.getMessage());                            errmsg += e.getMessage()+"  ";                        }                    }else{                        txTask.setErrmsg("查找不到订单");                    }                    if(StringUtils.isNotEmpty(txTask.getErrmsg())){                        txTask.setIsCheck(Boolean.FALSE);                    }                    txTaskService.update(txTask);                    result.listData(txTask);                }                if(StringUtils.isNotEmpty(errmsg)){                    result.error(errmsg);                }else{                    result.setMsg("提现成功");                }            }else{                result.error("对不起，你不是管理员，没有操作权限");            }        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    @RequestMapping(value = "/h5/gl/ratificationList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result ratificationList(HttpServletRequest request ,@RequestBody TxTask pwTask) {        Result result = new Result();        QueryParam queryParam = new QueryParam();        queryParam.put("userID",IJobSecurityUtils.getLoginUserId());        String errmsg = "";        try {            TxAdmin txAdmin = txAdminService.one(queryParam);            if(txAdmin!=null){ //校验管理员                String pw = MD5Tools.getMD5Hash(txAdmin.getUserID(),pwTask.getPassword());                if(!pw.equals(txAdmin.getValidcode())) {  //校验密码//                    result.error("提现密码不正确");                    errmsg += "提现密码不正确";                }else{                    queryParam.clear();                    queryParam.put("adminID",txAdmin.getId());                    List<TxTask> txTaskList =  txTaskService.findList(queryParam);                    for(TxTask txTask : txTaskList){                        if(txTask!=null && txTask.getStatus()==Boolean.FALSE){                            try{                                withdrawalsService.withdrawalCash(txTask,txAdmin,request);                            }catch (IJobException e){                                e.printStackTrace();                                txTask.setErrmsg(e.getMessage());                                errmsg += e.getMessage()+"  ";                            }catch (Exception e){                                e.printStackTrace();                                txTask.setErrmsg(e.getMessage());                                errmsg += e.getMessage()+"  ";                            }                        }else{                            txTask.setErrmsg("查找不到订单");                        }                        if(StringUtils.isNotEmpty(txTask.getErrmsg())){                            txTask.setIsCheck(Boolean.FALSE);                        }                        txTaskService.update(txTask);                    }                    result.listData(txTaskList);                }                if(StringUtils.isNotEmpty(errmsg)){                    result.error(errmsg);                }else{                    result.setMsg("提现成功");                }            }else{                result.error("对不起，你不是管理员，没有操作权限");            }        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    @RequestMapping(value = "/getWxorder", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getWxorder(@RequestBody QueryParam queryParam) {        Result result = new Result();        try {            Wxorder wxorder  = wxorderService.one(queryParam);            return super.getObject2List(wxorder);        } catch (Exception e) {            e.printStackTrace();            result.error("查询数据异常");        }        return result;    }    @RequestMapping(value = "/getAccount", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getAccount(@RequestBody QueryParam queryParam) {        Result result = new Result();        try {            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            Account account  = accountService.one(queryParam);            return super.getObject2List(account);        } catch (Exception e) {            e.printStackTrace();            result.error("查询数据异常");        }        return result;    }    @RequestMapping(value = "/getPartner", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getPartner(@RequestBody QueryParam queryParam) {        Result result = new Result();        try {            String orderNo = queryParam.getCondition().get("orderNo").toString();            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            queryParam.put("orderNumber",orderNo);            Account account  = accountService.one(queryParam);            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            PartnerRebate partnerRebate =  partnerRebateService.one(queryParam);            queryParam.clear();            queryParam.put("userID",partnerRebate.getShareUserID());            Personalauthen personalauthen =  personalauthenService.one(queryParam);            account.setBuyname(personalauthen.getRealName());            return super.getObject2List(account);        } catch (Exception e) {            e.printStackTrace();            result.error("查询数据异常");        }        return result;    }    //提现列表    @RequestMapping(value = "/h5/gl/withdrawlist",method =RequestMethod.POST,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result withdrawlist(){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam();            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            TxAdmin txAdmin = txAdminService.one(queryParam);            if(txAdmin!=null){                queryParam.clear();                queryParam.put("adminID",txAdmin.getId());                queryParam.setOrderByClause(" order by t.code desc ");                List<TxTask> txTaskList =  txTaskService.findList(queryParam);                return super.getObject2List(txTaskList);            }else{                result.error("对不起，你不是管理员");            }        } catch (Exception e) {            e.printStackTrace();            result.error("获取数据异常");        }        return result;    }    //删除提现任务GET    @RequestMapping(value = "/h5/gl/deleteTxTask/{id}",method =RequestMethod.POST,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result deleteTxTask(@RequestBody Map map ,@PathVariable String id){        Result result = new Result();        try {            txTaskService.deleteTxTask(id);            if(StringUtils.isNotEmptyString(map.get("msg"))){                User user  = userService.get(map.get("userID").toString());                messageTemplateService.ptShtz(user.getWeChatNo(),"提现申请",map.get("msg").toString());            }        } catch (Exception e) {            e.printStackTrace();            result.error("删除失败");        }        return result;    }    @RequestMapping(value = "/getRedPacketInfo", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getRedPacketInfo(@RequestBody QueryParam queryParam){        Result result = new Result();        try {            String type = queryParam.getCondition().get("type").toString();            queryParam.put("type",null);            Settlement settlement = settlementService.one(queryParam);            RedPacket redPacket = redPacketService.redpacketmap(settlement.getRefID());            List<RedPacketReceive> list = new ArrayList<>();            if(redPacket.getPositionID()!=null){                redPacket = redPacketService.redpacketorthermap(settlement.getRefID());            }            if(redPacket!=null){                for (RedPacketReceive redPacketReceive : redPacket.getRedPacketReceiveList()){                    if (redPacketReceive.getBeenrecruitedState()==4){                        list.add(redPacketReceive);                    }                }                redPacket.setRedPacketReceiveList(list);                if(type.equals("12")){                    redPacket.setBackMoney(redPacket.getOneOfMoney().multiply(new BigDecimal(redPacket.getResidueCount())));                }            }            result.listData(redPacket);        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙");        }        return result;    }    @RequestMapping(value = "/getRechargeSum", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getRechargeSum(@RequestBody QueryParam queryParam){        Result result = new Result();        try {            User user = new User();            if(queryParam.getCondition().get("id")==null){                user = IJobSecurityUtils.getLoginUser();            }else{                user = userService.one(queryParam);            }            BigDecimal money = accountService.getRechargeSum(IJobSecurityUtils.getLoginUserId());            if(money==null){                money = new BigDecimal(0);            }            user.setMoney(money);            BigDecimal mySettle = accountService.getMySettle(IJobSecurityUtils.getLoginUserId());            if(mySettle == null){                mySettle = new BigDecimal(0);            }            user.setMySettle(mySettle);            if(queryParam.getCondition().get("isMain")!=null){                result.listData(user);            }else{                if(IJobSecurityUtils.getLoginUser().getInformation().getPayPassword()==null||"".equals(IJobSecurityUtils.getLoginUser().getInformation().getPayPassword().trim())){                    result.setData(null);                }else{                    result.listData(user);                }            }        }catch (Exception e){            logger.error(e.getMessage());            result.error("查询语句错误！");        }        return result ;    }    /**     * 结算给自己     * @return 操作结果     */    @RequestMapping(value = "/jieSuanMySalary", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result jieSuanMySalary(@RequestBody Map map){        Result result = new Result();        try {            getService().addJieSuanMine(new BigDecimal(map.get("price").toString()));        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     * 给其他用户转账     * @return 操作结果     */    @RequestMapping(value = "/giveOtherMoney", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result giveOtherMoney(@RequestBody Map map){        Result result = new Result();        try {            getService().giveOtherMoney(new BigDecimal(map.get("price").toString()),map.get("userID").toString());        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     * 查询转账，结算给自己的详细信息     * @return 操作结果     */    @RequestMapping(value = "/getDetail", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getDetail(@RequestBody QueryParam queryParam){        Result result = new Result();        try {            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            result.listData(accountService.one(queryParam));        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }}