package com.yskj.api;import com.spatial4j.core.context.SpatialContext;import com.spatial4j.core.distance.DistanceUtils;import com.yskj.controller.base.BaseController;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.service.*;import com.yskj.service.base.RedisCacheService;import com.yskj.utils.*;import org.apache.shiro.util.CollectionUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import java.text.SimpleDateFormat;import java.util.*;import java.util.stream.Collectors;@Controller@RequestMapping(value = "/api/BeenrecruitedController")public class ApiBeenrecruitedController extends BaseController{	@Autowired	private BeenrecruitedService beenrecruitedService;	@Autowired    private ResumeService resumeService;	@Autowired    private HuntingtypeService huntingtypeService;	@Autowired    private TodayJobService todayJobService;    @Autowired    private TomorrowJobService tomorrowJobService ;	@Autowired    private CityService cityService;	@Autowired    private IntentiontypeService intentiontypeService;	@Autowired    private IntentionaddressService intentionaddressService;	@Autowired    private IntentiondateService intentiondateService;	@Autowired    private PositionService positionService;	@Autowired    private SigninService signinService ;	@Autowired    private RedisCacheService redisCacheService;    @Autowired    private AccountService accountService ;	private final static Logger logger = LoggerFactory.getLogger(ApiBeenrecruitedController.class);	@Autowired    private ForwardShareUserBeenrecruitedService forwardShareUserBeenrecruitedService ;	@Autowired    private RedPacketService redPacketService ;	@Autowired    private RedPacketReceiveService redPacketReceiveService ;	@Autowired    private BondtransactionService bondtransactionService;	 public BeenrecruitedService getService() {         return this.beenrecruitedService;     }    /**     * 我要报名     * @return String     */    @RequestMapping(value = "/signUp",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String sign_up( String id ,Model model){        model.addAttribute("id",id);        return "/h5/qz/index/sign_up";    }   /* @RequestMapping(value = "/myPositionDetail/{state}/{id}",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String myPositionDetail(Model model,@PathVariable Integer state,@PathVariable String id){	     //求职状态（1报名2,面试;3培训;4,工作中;5,结算,6结束）        model.addAttribute("state",state);        model.addAttribute("id",id);        return "h5/qz/myjob/job_status";    }*/	 /**     * 我的兼职页面     * @return String     *///    @RequiresPermissions("Beenrecruited")    @RequestMapping(value = "/intention",method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result index(Model model){        Date now = new Date();        Map<String,Object> map = new HashMap<String,Object>();        map.put("year", now.getYear()+1900);        map.put("month", now.getMonth()+1);        map.put("userID",IJobSecurityUtils.getLoginUserId());        try {            QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());            queryParam.setOrderByClause("order by updateTime DESC");           List<Huntingtype> workTypeList = huntingtypeService.findAllType(queryParam);           List<City> cityList = cityService.getCanJobCity(queryParam);           List<Intentiontype> myTypelist = intentiontypeService.findList(queryParam);           List<Intentionaddress> myCityList = intentionaddressService.findList(queryParam);           for(Huntingtype huntingtype : workTypeList){               for(Intentiontype intentiontype : myTypelist){                   if(huntingtype.getId().equals(intentiontype.getHtID())){                        huntingtype.setIsSelected(Boolean.TRUE);                        huntingtype.setRefId(intentiontype.getId());                        break;                   }               }           }            for(City city : cityList){                for(Intentionaddress intentionaddress : myCityList){                    if(city.getId().equals(intentionaddress.getCityID())){                        city.setIsSelected(Boolean.TRUE);                        city.setRefId(intentionaddress.getId());                        break;                    }                }            }            map.put("workTypeList",workTypeList);            map.put("cityList",cityList);            map.put("intentionDate",intentiondateService.one(new QueryParam("userID",IJobSecurityUtils.getLoginUserId())));        } catch (Exception e) {            e.printStackTrace();        }        return  super.getObject2List(map);//        return "/h5/qz/myjob/my_part_time_job";    }     /**     *新增     * @param map     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(@RequestBody Map map ){        return beenrecruitedService.qzBm(map);    }    /**     *新增     * @param intention     * @return Result     */    @RequestMapping(value = "/addIntention", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result addIntention(@RequestBody Intention intention ){        Result result = new Result();        try {            List<Intentiontype> oldlist =  intentiontypeService.<Intentiontype>findList(new QueryParam("userID",IJobSecurityUtils.getLoginUserId()));            List<Intentiontype> newlist = intention.getIntentiontypes();            intentiontypeService.removeList(newlist,oldlist);            intentiontypeService.persistenceList(intention.getIntentiontypes());            intentionaddressService.removeList(intention.getIntentionaddresses(),intentionaddressService.<Intentionaddress>findList(new QueryParam("userID",IJobSecurityUtils.getLoginUserId())));            intentionaddressService.persistenceList(intention.getIntentionaddresses());            intentiondateService.persistence(intention.getIntentiondate());            for(int i=oldlist.size()-1;i>=0;i--){                Intentiontype oldInte = oldlist.get(i);                for(int j=newlist.size()-1;j>=0;j--){                    Intentiontype newInte = newlist.get(j);                    if(oldInte.getHtID().equals(newInte.getHtID())){                        oldlist.remove(oldInte);                        newlist.remove(newInte);                        break;                    }                }            }            oldlist.addAll(newlist);            if(oldlist.size()>0)                redisCacheService.readIntentionCache(new QueryParam("htID","'"+String.join("','",oldlist.stream().map(inte->inte.getHtID()).collect(Collectors.toList()))+"'"));        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    /**     * 删除     * @param beenrecruited     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete( @RequestBody  Beenrecruited beenrecruited ){        return super.delete(beenrecruited);    }     /**     * 修改     * @param beenrecruited     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(@RequestBody Beenrecruited beenrecruited ){        Result result = new Result();        try {            beenrecruitedService.updateBeen(beenrecruited);        }catch (IJobException e){            e.printStackTrace();            result.error(e.getMessage());        }catch (Exception e){            e.printStackTrace();            result.error("修改报名状态失败");        }        return result;    }    /**     * 查询页面 我的今日     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findTodayJobPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findTodayJobPage(@RequestBody PageParam pageParam ){        Result result = new Result();        try {            //Thread.sleep(10000);            List<String> ids =todayJobService.findIds(new QueryParam( "userID",IJobSecurityUtils.getLoginUserId()),"beenID");            pageParam.in("id",ids);            result.setData(beenrecruitedService.mapPage(pageParam));        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    /**     * 查询页面 我的兼职     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findMyJobPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findMyJobPage(@RequestBody PageParam pageParam ){        Result result = new Result();        try {            SpatialContext geo = SpatialContext.GEO;            double lon = Double.parseDouble(pageParam.getCondition().get("lng").toString());            double lat = Double.parseDouble(pageParam.getCondition().get("lat").toString());            pageParam.put("createBy",IJobSecurityUtils.getLoginUserId());            beenrecruitedService.mapPage(pageParam);            for(Beenrecruited beenrecruited : (List<Beenrecruited>)pageParam.getList()){                if(null!=beenrecruited.getPosition().getWorkPlace().getLongitude()){                    double distance = geo.calcDistance(geo.makePoint(lon, lat),geo.makePoint(beenrecruited.getPosition().getWorkPlace().getLongitude().doubleValue(), beenrecruited.getPosition().getWorkPlace().getLatitude().doubleValue()))                            * DistanceUtils.DEG_TO_KM;                    beenrecruited.getPosition().getWorkPlace().setDistance(distance);                    if(StringUtils.isNotEmptyString(pageParam.getCondition().get("signState")))                        beenrecruited.setSignState(pageParam.getCondition().get("signState").toString());                }            }            return super.getObject2List(pageParam);        } catch (Exception e) {            e.printStackTrace();            result.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/cancelInterview/{id}/{version}/{reason}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result cancelInterview(@PathVariable String id,@PathVariable Integer version,@PathVariable String reason){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam();            queryParam.put("id",id);            queryParam.put("version",version);            Beenrecruited beenrecruited = beenrecruitedService.one(queryParam);            if(beenrecruited!=null){                beenrecruited.setReason(reason);                beenrecruitedService.cancelInterview(beenrecruited);            }else{                result.error("操作失败");            }        } catch (Exception e) {            logger.error(e.getMessage());            result.error("取消面试失败");        }        return result;    }    /**     * 查询页面  我的兼职     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){        Result result = new Result();        try {            List<String> resumes = resumeService.findIds( new QueryParam("userID", IJobSecurityUtils.getLoginUserId()) ,"id");            pageParam.in("resumeID",resumes);            result.setData(beenrecruitedService.findPage(pageParam));        } catch (Exception e) {            e.printStackTrace();        }        return result;    }     /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findBeenByWorkDate", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findBeenByWorkDate(@RequestBody QueryParam queryParam ){        Result result = new Result();        List<HashMap> beens  = beenrecruitedService.findBeenByWorkDate(queryParam);        List<HashMap> returnbeens = new ArrayList<HashMap>();        if(StringUtils.isNotEmptyString(queryParam.getCondition().get("workDate"))){            List<String> mydates  =  CollectionUtils.asList(queryParam.getCondition().get("workDate").toString().split(","));            for(HashMap hashMap : beens){                List<String> dates =   DateUtils.getDataListFromString(hashMap.get("workDate").toString());                Boolean flag = false;                for(String date : dates){                    for(String str : mydates){                        if(str.equalsIgnoreCase(date)){                            flag = true;                            break;                        }                    }                    if(flag){                        break;                    }                }                if(flag){                    returnbeens.add(hashMap);                }            }        }        result.listData(returnbeens);        return  result;    }    /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam ){        return super.findList(queryParam);    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id ){        Result result = new Result();        try {            Beenrecruited beenrecruited = beenrecruitedService.get(id);            Position position = positionService.get(beenrecruited.getPositionID());            beenrecruited.setPosition(position);            result.setData(beenrecruited);        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get2List/{id}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get2List(@PathVariable  String id ){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam();            queryParam.put("id",id);            Beenrecruited beenrecruited = beenrecruitedService.mapOne(queryParam);            result.listData(beenrecruited);        } catch (Exception e) {            logger.error(e.getMessage());            result.error("获取失败");        }        return result;    }    @RequestMapping(value = "/updateWorkDate", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result updateWorkDate(@RequestBody Beenrecruited beenrecruited){        Result result = new Result();        try {            beenrecruitedService.updateWorkDate(beenrecruited);        }catch (IJobException e) {            e.printStackTrace();            result.error(e.getMessage());        } catch (Exception e) {            e.printStackTrace();            result.error("操作失败");        }        return result;    }    /**     * 录取或者拒绝用户     * @param beenrecruitedList 招聘数据对象集合     * @return     */    @RequestMapping(value = "/h5/zp/refuseOrAgreeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result refuseOrAgreeList(@RequestBody List<Beenrecruited> beenrecruitedList){        Result result = new Result();        try {            if(!CollectionUtils.isEmpty(beenrecruitedList)){                for (Beenrecruited beenrecruited : beenrecruitedList ){                    beenrecruitedService.updateBeen(beenrecruited);                }            }        }catch (IJobException ijob){            ijob.printStackTrace();            result.error(ijob.getMessage());        }catch (Exception e){            e.printStackTrace();            result.error("数据发生变化，请刷新页面再试！");        }        return result;    }    /**     * 获得未录取的人员信息     * @param positionID 职位ID     * @param dismiss 是否被拒绝     * @return 操作结果对象     */    @RequestMapping(value = "/zp/getDisquInfo/{positionID}/{dismiss}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getDisquInfo(@PathVariable String positionID, @PathVariable String dismiss){        Result result = new Result();        QueryParam queryParam = new QueryParam();        queryParam.put("positionID",positionID);        queryParam.put("dismiss",dismiss);//        queryParam.put("state",6);        queryParam.put("isDeleted",false);        try{            List<Beenrecruited> beenrecruiteds = signinService.getDisquInfo(queryParam);            result.listData(beenrecruiteds);        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","服务器繁忙，请稍后再试！或者选择联系客服。");        }        return result ;    }    @RequestMapping(value = "/overWork/{positionID}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result overWork(@PathVariable String positionID ){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam();            queryParam.put("positionID",positionID);            queryParam.put("createBy",IJobSecurityUtils.getLoginUserId());            Beenrecruited beenrecruited =  beenrecruitedService.one(queryParam);            if(beenrecruited!=null){                beenrecruited.setState(5);                beenrecruitedService.update(beenrecruited);                result.setMsg("结束工作成功");            }        } catch (Exception e) {            logger.error(e.getMessage());            result.error("结束工作失败");        }        return result;    }    @RequestMapping(value = "/leaveWork/{beenID}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result leaveWork(@PathVariable String beenID){        Result result = new Result();        try{            Beenrecruited beenrecruited = beenrecruitedService.get(beenID);            TodayJob todayJob = todayJobService.one(new QueryParam("beenID",beenID));            if(todayJob!=null){                throw new IJobException("距离工作时间不足24小时，如需辞职请与招聘者线下协商");            }            TomorrowJob tomorrowJob = tomorrowJobService.one(new QueryParam("beenID",beenID));            if(tomorrowJob!=null){                Position position = positionService.get(beenrecruited.getPositionID());                Integer time = position.getStartTime()*60*1000;                Date date=new Date();//取时间                Calendar calendar = new GregorianCalendar();                calendar.setTime(date);                calendar.add(calendar.DATE,1);//把日期往后增加一天.整数往后推,负数往前移动                date=calendar.getTime(); //这个时间就是日期往后推一天的结果                date.setHours(0);                date.setMinutes(0);                date.setSeconds(0);                Long marginTime = new Integer(24*60*60*1000).longValue();                if(((date.getTime() + time)-new Date().getTime())<marginTime){                    throw new IJobException("距离工作时间不足24小时，如需辞职请与招聘者线下协商");                }            }            beenrecruited.setEndWork(new Date());            beenrecruited.setState(null);            beenrecruited.setDismiss(Boolean.TRUE);            beenrecruitedService.update(beenrecruited);            bondtransactionService.returnQzBond(beenrecruited.getPositionID(),beenrecruited.getCreateBy(),Account.RE_QZ_BOND);            result.setMsg("已辞职");        }catch (IJobException ijob){            logger.error(ijob.getMessage());            result.error("距离工作时间不足24小时，如需辞职请与招聘者线下协商。");        }catch (Exception e){            logger.error(e.getMessage());            result.error("辞退请求不成功");        }        return result ;    }}