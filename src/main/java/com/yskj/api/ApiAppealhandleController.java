package com.yskj.api;import com.yskj.controller.base.BaseController;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.models.enums.Examine;import com.yskj.service.AppealhandleService;import com.yskj.service.MessageTemplateService;import com.yskj.service.PositionService;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.Result;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Date;@Controller@RequestMapping(value = "/api/AppealhandleController")public class ApiAppealhandleController extends BaseController{	@Autowired	private AppealhandleService appealhandleService;	@Autowired    private PositionService positionService;	@Autowired    private MessageTemplateService messageTemplateService;	private final static Logger logger = LoggerFactory.getLogger(ApiAppealhandleController.class);	 public AppealhandleService getService() {         return this.appealhandleService;     }	 /**     * 页面     * @return String     *///    @RequiresPermissions("Appealhandle")    @RequestMapping(value = "/{positionID}",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model, @PathVariable String positionID){        model.addAttribute("positionID",positionID);        try {            Position position  =  positionService.get(positionID);            model.addAttribute("title",position.getTitle());        } catch (Exception e) {            e.printStackTrace();        }        return "/h5/qz/myjob/appeal";    }     /**     *新增     * @param appealhandle     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(@RequestBody  Appealhandle appealhandle ){        Result result = new Result();        appealhandle.setUserID(IJobSecurityUtils.getLoginUserId());        appealhandle.setAppealTime(new Date());        appealhandle.setSituationAppeal(1);        QueryParam queryParam = new QueryParam();        queryParam.setOrderByClause(" order by a.appealID desc ");        try {            Appealhandle maxAppeal  = appealhandleService.one(queryParam);            if(null==maxAppeal){                appealhandle.setAppealID("S0000000001");            }else{                appealhandle.setAppealID(maxAppeal.getNextAppealNo());            }            result = super.persistenceAndChild(appealhandle);            WorkList workList = new WorkList();            workList.updateType(Examine.Appeal);            workList.setStatus(1);            workList.setCallback("/api/AppealhandleController/appealCallback");            workList.setRefID(appealhandle.getId());            workList.setUrl("/h5/qz/myjob/appeal_examine?data.appeal.id="+appealhandle.getId());            messageTemplateService.tpGdxx2(workList);        } catch (Exception e) {            e.printStackTrace();            result.error("申述失败");        }        return result;    }    @RequestMapping(value = "/appealCallback", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result appealCallback(@RequestBody  WorkList workList ){        Result result  = new Result();        try {            Appealhandle appealhandle =  appealhandleService.get(workList.getRefID());            if(appealhandle!=null){                if(workList.getStatus()==3){ //如果是不通过，则删除，物理删除                    appealhandle.setSituationAppeal(2);                }else{                    appealhandle.setSituationAppeal(4);                }                appealhandle.setProcessing(workList.getMsg());                appealhandleService.update(appealhandle);            }else{                result.error("审核业务已经删除");            }        } catch (Exception e) {            e.printStackTrace();            result.error("审批失败");        }        return result;    }    /**     * 删除     * @param appealhandle     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(@RequestBody  Appealhandle appealhandle ){        return super.delete(appealhandle);    }     /**     * 修改     * @param appealhandle     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(Appealhandle appealhandle ){        return super.update(appealhandle);    }    /**     * 查询页面     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){       return super.findPage(pageParam);    }     /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam ){        return super.findList(queryParam);    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get/{id}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(@PathVariable String id ){        Result result = new Result();        try{            QueryParam queryParam = new QueryParam();            queryParam.put("id",id);            Appealhandle appealhandle  = appealhandleService.mapOne(queryParam);            result =  super.getObject2List(appealhandle);        }catch (Exception e){            e.printStackTrace();            result.error("查询失败");        }        return result;    }}