package com.yskj.api;import com.spatial4j.core.context.SpatialContext;import com.spatial4j.core.distance.DistanceUtils;import com.yskj.controller.base.BaseController;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.service.*;import com.yskj.service.auth.UserService;import com.yskj.service.base.DictCacheService;import com.yskj.utils.*;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import java.io.File;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.*;@Controller@RequestMapping(value = "/api/InformationController")public class ApiInformationController extends BaseController {    @Autowired    private InformationService informationService;    @Autowired    private WithdrawalsService withdrawalsService;    @Autowired    private IntentionaddressService intentionaddressService;    @Autowired    private IntentiontypeService intentiontypeService;    @Autowired    private AttentionService attentionService;    @Autowired    private UserService userService;    @Autowired    private EnterpriseauthenService enterpriseauthenService;    @Autowired    private PersonalauthenService personalauthenService;    @Autowired    private PositionService positionService;    @Autowired    private EducationalService educationalService;    @Autowired    private ParttimeinformationService parttimeinformationService ;    @Autowired    private AttachmentService attachmentService ;    @Autowired    private UserSettingService userSettingService ;    @Autowired    private PartnerUserService partnerUserService;    @Autowired    private MessageTemplateService messageTemplateService;    @Autowired    private WorkNumberService workNumberService ;    @Autowired    private WorkManagerService workManagerService ;    @Autowired    private WorkPositionService workPositionService ;    @Autowired    private ScanSettleService scanSettleService;    @Autowired    private ApplySettlementService applySettlementService ;    private final static Logger logger = LoggerFactory.getLogger(ApiInformationController.class);    public InformationService getService() {        return this.informationService;    }    /**     * 个人页面跳转     *     * @param request     * @return     */    @RequestMapping(value = "/h5/mine/mine", method = RequestMethod.GET)    public String mineWithH5(HttpServletRequest request) {        try{            IJobSecurityUtils.updateUser((User)userService.get(IJobSecurityUtils.getLoginUserId()));        }catch (Exception e){            e.printStackTrace();        }        return "/h5/qz/mine/mine";    }    /**     * 获得用户信息，用于‘我的’ 页面渲染     */    @RequestMapping(value = "/h5/qz/getMine",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getMine(){        Result result = new Result();        try{            QueryParam queryParam = new QueryParam();//            IJobSecurityUtils.updateUser((User)userService.get(IJobSecurityUtils.getLoginUserId()));            queryParam.put("userID", IJobSecurityUtils.getLoginUserId());            queryParam.put("isDeleted", 0);            Map<String,Object> map = new HashMap<String, Object>();//            map.put("Information", informationService.one(queryParam));            map.put("Information",IJobSecurityUtils.getLoginUser().getInformation());            map.put("fansCount", attentionService.count(queryParam));            queryParam.clear();            queryParam.put("concernID", IJobSecurityUtils.getLoginUserId());            queryParam.put("isDeleted", 0);            map.put("followCount", attentionService.count(queryParam));//            map.put("attachment",attachmentService.get(IJobSecurityUtils.getLoginUser().getInfoHeadImg()));            map.put("imagePath",IJobSecurityUtils.getLoginUser().getImgPath());            queryParam.clear();            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            queryParam.put("status",Boolean.TRUE);            map.put("partner",partnerUserService.one(queryParam));            map.put("dshPosition",positionService.workNumberDSHPositionCount(IJobSecurityUtils.getLoginUser().getInformation().getLastWorkNumber()));            result.listData(map);        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","参数错误~~~");        }        return result ;    }    /**     * 跳转个人信息修改页面     * @return     */    @RequestMapping(value = "/h5/mine/basicInfo", method = RequestMethod.GET)    public String updateMineInfoWithH5(HttpServletRequest request) {        return "/h5/qz/mine/basicInfo";    }    /**     * 获得个人信息     * @return     */    @RequestMapping(value = "/h5/mine/getBasicInfo",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getBasicInfo() {        Result result = new Result();        try {            QueryParam queryParam = new QueryParam("userID", IJobSecurityUtils.getLoginUserId());            Map<String,Object> map = new HashMap<String, Object>();            map.put("Information", informationService.one(queryParam));            map.put("attachment",attachmentService.get(IJobSecurityUtils.getLoginUser().getInfoHeadImg()));            map.put("user",userService.get(IJobSecurityUtils.getLoginUserId()));            result.listData(map);        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","参数错误~~~");        }        return result;    }    /**     * 获得个人信息     * @return     */    @RequestMapping(value = "/h5/mine/getInfoPass",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getInfoPass() {        Result result = new Result();        try {            QueryParam queryParam = new QueryParam("userID", IJobSecurityUtils.getLoginUserId());;            result.listData(informationService.one(queryParam));        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","参数错误~~~");        }        return result;    }    @RequestMapping(value="h5/information/myFriendsList")    public String myFriendsList(){        try {            User user = IJobSecurityUtils.getLoginUser();            if (user.getInfoHeadImg() == null){                IJobSecurityUtils.getSession().setAttribute("headImg",user.getWeixin().getHeadimgurl());            }else{                Attachment attachment = attachmentService.get(user.getInfoHeadImg());                IJobSecurityUtils.getSession().setAttribute("headImg","/ijob/upload/"+attachment.getAbsolutelyPath());            }            User updateUser = new User();            updateUser.setUserSig(user.getUserSig());            updateUser.setVersion(user.getVersion());            updateUser.setId(user.getId());            IJobSecurityUtils.updateUser(updateUser);            userService.update(user);        }catch (Exception e){            logger.error(e.getMessage());        }        return "h5/information/lately";    }    /**     * 跳转二维码页面     * @return     */    @RequestMapping(value = "/h5/mine/toQrcode", method = RequestMethod.GET)    public String toQrcode(Model model) {        model.addAttribute("url",DictCacheService.Site);        return "/h5/qz/mine/QRcode";    }    /**     * 获得二维码     * @return     */    @RequestMapping(value = "/h5/mine/getQRcode",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getQRcode() {        Result result = new Result();        try {            Map<String,Object> map = new HashMap<String, Object>();            map.put("Information", informationService.getInforWithQRCode(IJobSecurityUtils.getLoginUserId()));            map.put("attachment",attachmentService.get(IJobSecurityUtils.getLoginUser().getInfoHeadImg()));            map.put("user",IJobSecurityUtils.getLoginUser());            result.listData(map);        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","参数错误~~~");        }        return result;    }    /**     * 获得二维码     * @return     */    @RequestMapping(value = "/h5/mine/getSchoolCode/{id}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getSchoolQRcode(@PathVariable String id) {        Result result = new Result();        try {            result.listData(workNumberService.get(id));            /*Map<String,Object> map = new HashMap<String, Object>();            map.put("Information", informationService.getInforWithQRCode(IJobSecurityUtils.getLoginUserId()));            map.put("attachment",attachmentService.get(IJobSecurityUtils.getLoginUser().getInfoHeadImg()));            map.put("user",IJobSecurityUtils.getLoginUser());            result.listData(map);*/        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","参数错误~~~");        }        return result;    }    @RequestMapping(value = "h5/mine/basicInfo_nickname", method = RequestMethod.GET)    public String updateNickName(Map<String,Object> map) {        User user=null;        try {            user=userService.get(IJobSecurityUtils.getLoginUserId());        } catch (Exception e) {            e.printStackTrace();        }        map.put("user",user);        System.out.println(user);        return "h5/qz/mine/basicInfo_nickname";    }    @RequestMapping(value = "h5/mine/basicInfo_JobNumber", method = RequestMethod.GET)    public String updateWorkNumber(HttpServletRequest request) {//        updateSessionInfo(request);        try {            request.getSession().setAttribute("Information", informationService.get(IJobSecurityUtils.getLoginUser().getInformation().getId()));        }catch (Exception e){            logger.error(e.getMessage());        }        return "h5/qz/mine/basicInfo_JobNumber";    }    @RequestMapping(value = "h5/mine/basicInfo_modifyPhone", method = RequestMethod.GET)    public String updatePhone() {        return "h5/qz/mine/basicInfo_modifyPhone";    }    @RequestMapping(value = "h5/mine/basicInfo_EditProfile", method = RequestMethod.GET)    public String updateBrief() {        return "h5/qz/mine/basicInfo_EditProfile";    }    /**     * 跳转到用户信息编辑页面     * @return     */    @RequestMapping(value = "/h5/mine/editExamineUserInfo/{lng}/{lat}", method = RequestMethod.GET)    public String editExamineUserInfo(Model model,@PathVariable String lng,@PathVariable String lat){        QueryParam queryParam = new QueryParam();        queryParam.put("lng",lng);        queryParam.put("lat",lat);        String editurl =  examineUserInfo(model,lng,lat,IJobSecurityUtils.getLoginUserId());        model.addAttribute("site",DictCacheService.Site);        return editurl;    }    /**     * 跳转到用户信息页面     * @return     */    @RequestMapping(value = "h5/mine/examineUserInfo/{lng}/{lat}/{id}", method = RequestMethod.GET)    public String examineUserInfo(Model model,@PathVariable String lng,@PathVariable String lat,@PathVariable String id){        model.addAttribute("site",DictCacheService.Site);        model.addAttribute("userID",IJobSecurityUtils.getLoginUserId());        model.addAttribute("id",id);        String url = "";        QueryParam queryParam = new QueryParam();        List<Position> positions = new ArrayList<>();        Boolean flag = null;        IJobSecurityUtils.getSession().setAttribute("OrtherID",id);        try{            Double lngD = Double.parseDouble(lng);            Double latD = Double.parseDouble(lat);            SpatialContext geo = SpatialContext.GEO;            if(id.equals(IJobSecurityUtils.getLoginUserId())){                flag = true;            }            queryParam.put("userID",id);            Long count =  attentionService.count(queryParam);            IJobSecurityUtils.getSession().setAttribute("attentionCount",count);            Enterpriseauthen enterpriseauthen = enterpriseauthenService.mapOne(queryParam);            if (enterpriseauthen == null ) {                //个人认证信息                IJobSecurityUtils.getSession().setAttribute("OtherUserPersonalauthen",personalauthenService.one(queryParam));                //拿到学历信息                IJobSecurityUtils.getSession().setAttribute("OtherUserEducational",educationalService.findEducationnalForEducation(id));            }else {                url = "h5/qz/index/homepage_firm";                //企业认证信息                IJobSecurityUtils.getSession().setAttribute("OtherUserEnterpriseauthen",enterpriseauthen);            }            url = "h5/qz/index/homepage_firm";            //拿到用户详细信息            Information information = informationService.informapOne(queryParam);            if (information!=null && StringUtils.isNotEmpty(information.getBrief()) && information.getBrief().trim().equals("")){                information.setBrief(null);            }            IJobSecurityUtils.getSession().setAttribute("OtherUserInfomation",information);            if(information == null){                IJobSecurityUtils.getSession().setAttribute("OtherUserInfomation",null);                queryParam.clear();                queryParam.put("id",id);                queryParam.put("userID",IJobSecurityUtils.getLoginUserId());                WorkNumber workNumber = workNumberService.findWorkNumber(queryParam);                WorkManager workManager = workManagerService.one(new QueryParam("workID",id));                User user = new User();                user.setId(workManager.getUserID());                IJobSecurityUtils.getSession().setAttribute("OtherUser",user);                if(workNumber==null){                    workNumber = workNumberService.get(id);                    flag = null;                }else{                    flag = true;                    queryParam.clear();                    queryParam.put("userID",IJobSecurityUtils.getLoginUserId());                    List<WorkNumber> workNumbers =workNumberService.myManagerWorkList(queryParam);                    IJobSecurityUtils.getSession().setAttribute("MyManagerWorkList",workNumbers);                }                IJobSecurityUtils.getSession().setAttribute("WorkNumberSchool",workNumber);                queryParam.clear();                queryParam.put("type",0);                queryParam.put("open",2);                queryParam.put("isDeleted",0);                queryParam.put("workNumberID",id);                positions = positionService.workNumberPosition(queryParam);                model.addAttribute("DSHPositionSize",positionService.workNumberDSHPositionCount(id));                queryParam.put("workID",id);                queryParam.put("open","'3','4'");                queryParam.put("status",2);                IJobSecurityUtils.getSession().setAttribute("historyPositionSize",workPositionService.getSHPosition(queryParam).size());                queryParam.clear();                queryParam.put("workID",id);                Long count1 =  attentionService.count(queryParam);                IJobSecurityUtils.getSession().setAttribute("attentionCount",count1);            }else{                //拿到用户数据//            User user = userService.get(id);                User user = userService.one(new QueryParam("id",id));                if(user.getAttachment()!=null&&StringUtils.isNotEmpty(user.getAttachment().getAbsolutelyPath())){                    user.setImgPath(DictCacheService.UploadUrl+ File.separator+user.getAttachment().getAbsolutelyPath());                }else{                    user.setImgPath(user.getWeixin().getHeadimgurl());                }                IJobSecurityUtils.getSession().setAttribute("OtherUser",user);                //拿到职位数据                queryParam.put("type",0);                queryParam.put("open",2);                positions = positionService.mapList(queryParam);                queryParam.clear();                queryParam.put("userID",IJobSecurityUtils.getLoginUserId());                List<WorkNumber> workNumbers =workNumberService.myManagerWorkList(queryParam);                if(workNumbers==null || workNumbers.size() == 0){                    IJobSecurityUtils.getSession().setAttribute("MyManagerWorkList",null);                }else{                    IJobSecurityUtils.getSession().setAttribute("MyManagerWorkList",workNumbers);                }                queryParam.clear();                queryParam.put("userID",id);                queryParam.put("isDeleted",false);;                List<String> ids = new ArrayList<>();                queryParam.put("type",0);                ids.add("3");                ids.add("4");                queryParam.setIds(ids);                IJobSecurityUtils.getSession().setAttribute("historyPositionSize",applySettlementService.historyPosition(queryParam).size());            }            for (Position position : positions){                if(position.getBeenRecruitedSum() == null || "".equals(position.getBeenRecruitedSum())){                    position.setBeenRecruitedSum(0);                }                int temp = Integer.parseInt(position.getHuntingtype().getCodeGrade());                if(temp<6){                    position.getHuntingtype().setCodeGrade("#ff943e");                }else if (temp < 11){                    position.getHuntingtype().setCodeGrade("#108ee9");                }else if (temp < 16){                    position.getHuntingtype().setCodeGrade("#e8541e");                }else{                    position.getHuntingtype().setCodeGrade("#4ccca0");                }                try {                    double distance = geo.calcDistance(geo.makePoint(lngD, latD),geo.makePoint(position.getWorkPlace().getLongitude().doubleValue(), position.getWorkPlace().getLatitude().doubleValue()))                            * DistanceUtils.DEG_TO_KM;                    position.getWorkPlace().setDistance(Double.parseDouble(String .format("%.2f",distance)));                }catch (Exception e){                    logger.error(e.getMessage());                    continue;                }            }            IJobSecurityUtils.getSession().setAttribute("OtherUserPosition",positions);            queryParam.clear();            //判断是否关注            boolean isAttention=true;            queryParam.put("userID",id);            queryParam.put("concernID",IJobSecurityUtils.getLoginUserId());            queryParam.put("isDeleted",false);            Attention attention = attentionService.one(queryParam);            if(attention==null){                queryParam.put("userID",null);                queryParam.put("workID",id);                attention = attentionService.one(queryParam);            }            if (attention == null){                isAttention = false;            }else if(attention!=null){                model.addAttribute("id",attention.getId());            }            model.addAttribute("isAttention",isAttention);            if(flag!=null&&flag){                queryParam.clear();                queryParam.put("userID",IJobSecurityUtils.getLoginUserId());                Information myInfo = informationService.one(queryParam);                IJobSecurityUtils.getSession().setAttribute("myInfo",myInfo);                myInfo.setLastWorkNumber(id);                informationService.update(myInfo);                IJobSecurityUtils.getLoginUser().setInformation(myInfo);                User user = userService.one(new QueryParam("id",IJobSecurityUtils.getLoginUserId()));                if(user.getAttachment()!=null&&StringUtils.isNotEmpty(user.getAttachment().getAbsolutelyPath())){                    user.setImgPath(DictCacheService.UploadUrl+ File.separator+user.getAttachment().getAbsolutelyPath());                }else{                    user.setImgPath(user.getWeixin().getHeadimgurl());                }                IJobSecurityUtils.getSession().setAttribute("OtherUser",user);            }            model.addAttribute("editInformation",flag);        }catch (Exception e ){            e.printStackTrace();            logger.error(e.getMessage());        }        return url;    }    @RequestMapping(value = "/isAttention/{id}/{type}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result isAttention(@PathVariable String id,@PathVariable String type){        Result result =  new Result();        try {            if (type.equals("add")){                Attention attention = new Attention();                attention.setConcernID(IJobSecurityUtils.getLoginUserId());                WorkNumber workNumber = workNumberService.get(id);                if(workNumber!=null){                    attention.setWorkID(workNumber.getId());                }else {                    attention.setUserID(id);                }                attentionService.add(attention);            }else if (type.equals("delete")){                Attention attention = attentionService.get(id);                attentionService.physicalDelete(attention);            }        }catch (Exception e ){            logger.error(e.getMessage());            result.error("操作未成功！");        }        return result ;    }    /**     * 修改简介。     * @param information     * @return     */    @ResponseBody    @RequestMapping(value = "h5/mine/updateBrief", method = RequestMethod.POST)    public Result updateBrief(@RequestBody Information information){        Result result = new Result();            try {                if(information.getId() == null){                   IJobSecurityUtils.getLoginUser().getInformation().setBrief(information.getBrief());                   informationService.update(IJobSecurityUtils.getLoginUser().getInformation());                }else{                    WorkNumber workNumber = workNumberService.get(information.getId());                    workNumber.setBrief(information.getBrief());                    workNumberService.update(workNumber);                }            }catch (Exception e){                logger.error(e.getMessage());                result.error("服务器繁忙！");            }        return result ;    }    /**     * 页面     *     * @return String     */    @RequiresPermissions("Information")    @RequestMapping(value = "", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model) {        return "information";    }    /**     * 新增     *     * @param information     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(Information information) {        return super.add(information);    }    /**     * 删除     *     * @param information     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(Information information) {        return super.delete(information);    }    /**     * 修改     *     * @param information     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(@RequestBody Information information) {        if(information.getPayPassword()!=null && !information.getPayPassword().equals("")){            String pwd=MD5Tools.getMD5Hash("payPassword",information.getPayPassword());            information.setPayPassword(pwd);            IJobSecurityUtils.getLoginUser().getInformation().setPayPassword(pwd);        }        Result result =   super.update(information);        if(result.isSuccess() && information.getIdentityType()!=null ){            IJobSecurityUtils.getLoginUser().getInformation().setIdentityType(information.getIdentityType());        }        if(result.isSuccess() && information.getPayType()!=null){            IJobSecurityUtils.getLoginUser().getInformation().setPayType(information.getPayType());        }        return result;    }    /**     * 修改     *     * @param information     * @return Result     */    @RequestMapping(value = "/changeBgp", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result changeBgp(@RequestBody Information information) {        Result result  = new Result();        try {            if("".equals(information.getId().trim())){                WorkNumber workNumber = workNumberService.get(IJobSecurityUtils.getSession().getAttribute("OrtherID").toString());                information.getBgp().setId(workNumber.getBackground());                workNumber.setBgImage(information.getBgp());                workNumberService.persistenceAndChild(workNumber);            }else{                if("".equals(information.getBgp().getId().trim())){                    information.setBgpID(null);                    information.getBgp().setId(null);                    information.setVersion((informationService.get(information.getId())).getVersion());                }                informationService.persistenceAndChild(information);            }        } catch (Exception e) {            e.printStackTrace();            result.error("上传失败");        }        return result;    }    /**     * 查询页面     *     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam) {        return super.findPage(pageParam);    }    /**     * 查询集合     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam) {        return super.findList(queryParam);    }    /**     * 模糊查询页面     *     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam) {        return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam) {        return super.findLikeList(queryParam);    }    /**     * 唯一查询     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam) {        return super.one(queryParam);    }    /**     * 更新用户基本信息     *     * @param map 将要更新的数据集合     * @return 更新结果     */    @RequestMapping(value = "/updateSomeInfo", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result updateSomeInfo(@RequestParam Map map) {        Result result = new Result();        try {            User user = new User();            Information information = new Information();            user.setId((String) map.get("userID"));            user.setNickName((String) map.get("nickName"));            user.setSex((Integer) map.get("sex"));            user.setPhoneNumber((String) map.get("phoneNumber"));            user.setInfoHeadImg((String) map.get("infoHeadImg"));            user.setVersion(Integer.valueOf((String) map.get("versionUser")));            user.setUpdateBy((String) map.get("userId"));            user.setUpdateTime(new Date());            information.setId((String) map.get("infoID"));            information.setQRCode((String) map.get("qRCode"));            information.setBrief((String) map.get("brief"));            information.setWorkNumber((String) map.get("workNumber"));            information.setVersion(Integer.valueOf((String) map.get("versionInfo")));            user.setUpdateBy((String) map.get("userId"));            user.setUpdateTime(new Date());            information.setUpdateBy((String) map.get("userId"));            information.setUpdateTime(new Date());            Long count = informationService.updateSomeInfo(user, information);            if (count < 1) {                throw new Exception("数据未进行更改！");            }        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "修改失败" + e.getMessage());        }        return result;    }    /**     * 修改登录密码接口     *     * @param map     * @return     */    @RequestMapping(value = "/updateLoginPassword", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result updateLoginPassword(@RequestParam Map map) {        Result result = new Result();        try {            String psw = MD5Tools.getMD5Hash((String) map.get("accountNo"), (String) map.get("oldPassword"));            map.put("oldPassword", psw);            psw = MD5Tools.getMD5Hash((String) map.get("accountNo"), (String) map.get("newPassword"));            Integer version = (Integer) map.get("version");            version++;            map.put("version", version);            map.put("newPassword", psw);            map.put("updateTime", new Date());            Integer count = informationService.findOneUser(map);            if (count < 1) {                throw new Exception("原始登录密码错误");            }            count = informationService.updateLoginPassword(map);            if (count < 1) {                throw new Exception("新密码格式有误");            }            QueryParam queryParam = new QueryParam("userID", IJobSecurityUtils.getLoginUserId());            IJobSecurityUtils.getSession().setAttribute("Information", informationService.one(queryParam));        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "登录密码修改失败" + e.getMessage());        }        return result;    }    /**     * 修改支付密码接口     *     * @param map     * @return     */    @RequestMapping(value = "/updatePayPassword", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result updatePayPassword(@RequestParam Map map) {        Result result = new Result();        try {            if (((String) map.get("newPayPassword")).length() != 6){                result.put("501","错误原因：新密码格式不正确");                return result ;            }else if(((String) map.get("oldPayPassword")).length() != 6){                result.put("501","错误原因：原始密码格式不正确");                return result ;            }            String account = (String) map.get("account");            QueryParam param = new QueryParam();            param.put("account", account);            param.put("payPassword", MD5Tools.getMD5Hash("payPassword", (String) map.get("oldPayPassword")));            param.put("userID", map.get("userID"));            Long count = informationService.count(param);            if (count < 1) {                result.put("501","错误原因：原始支付密码错误");                return result ;            }            Information information = new Information();            information.setVersion(Integer.parseInt(map.get("version").toString()));            information.setId((String) map.get("id"));            information.setUpdateBy((String) map.get("userID"));            information.setUpdateTime(new Date());            information.setPayPassword(MD5Tools.getMD5Hash("payPassword", (String) map.get("newPayPassword")));            count = informationService.update(information);            if (count < 1) {                result.put("501","新支付密码格式有误");                return result ;            }            QueryParam queryParam = new QueryParam("userID", IJobSecurityUtils.getLoginUserId());            IJobSecurityUtils.getLoginUser().setInformation(informationService.one(queryParam));//            IJobSecurityUtils.getSession().setAttribute("Information", informationService.one(queryParam));        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "服务器繁忙，请稍后再试");        }        return result;    }    /**     * 提现接口     *     * @param map     * @return     */    @RequestMapping(value = "/userWithdrawals", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result userWithdrawals(@RequestParam Map map) {        Result result = new Result();        try {            /**             * 审核用户和支付密码是否正确             */            String MD5payPass = MD5Tools.getMD5Hash((String) map.get("accountNo"), (String) map.get("payPassword"));            map.put("payPassword", MD5payPass);            Long count = informationService.checkUser(map);            if (count < 1) {                throw new Exception("支付密码不正确");            }            Withdrawals withdrawals = new Withdrawals();            withdrawals.setSettlementOrderNumber(UUIDGenerator.randomUUID());            withdrawals.setRemarks("用户提现");            withdrawals.setLaunchTime(new Date());            withdrawals.setSettlementState(1);            withdrawals.setPrice(new BigDecimal((String) map.get("price")));            withdrawals.setPresentParty((String) map.get("userID"));            withdrawals.setReceivableAccount((String) map.get("bankCard"));            Long i = withdrawalsService.add(withdrawals);            if (i < 1) {                throw new Exception("数据格式存在差异");            }        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "提现不通过" + e.getMessage());        }        return result;    }    /**     * 保存用户的意向类型，并查询出对应的工作     *     * @param map 意向数据集合     * @return 兼职工作集合     */    @RequestMapping(value = "/saveHuntingType", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result saveHuntingType(@RequestParam Map map) {        Result result = new Result();        try {            //创建字符串转日期的转换对象，以及规定字符串格式            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");            String str = (String) map.get("myDateList");            String[] myDateArgs = str.split(",");            str = (String) map.get("myCityList");            String[] myCityArgs = str.split(",");            str = (String) map.get("myLikeList");            String[] myLikeArgs = str.split(",");            String userID = (String) map.get("userID");         /*   for (int i = 0; i < myDateArgs.length; i++) {                Intentiondate intentiondate = new Intentiondate();                intentiondate.setMyDate(sdf.parse(myDateArgs[i]));                intentiondate.setUserID(userID);                intentiondateService.add(intentiondate);            }*/            for (int i = 0; i < myCityArgs.length; i++) {                Intentionaddress intentionaddress = new Intentionaddress();                intentionaddress.setCityID(myCityArgs[i]);                intentionaddress.setUserID(userID);                intentionaddressService.add(intentionaddress);            }            for (int i = 0; i < myLikeArgs.length; i++) {                Intentiontype intentiontype = new Intentiontype();                intentiontype.setHtID(myLikeArgs[i]);                intentiontype.setUserID(userID);                intentiontypeService.add(intentiontype);            }            QueryParam queryParam = new QueryParam();            queryParam.put("userID", userID);            List<String> typeIds = intentiontypeService.findIds(queryParam, "HTID");            List<String> placeIds = intentionaddressService.findIds(queryParam, "cityID");            Map queryMap = new HashMap();            queryMap.put("typeIds", typeIds);            queryMap.put("placeIds", placeIds);            List<String> positionIds = new ArrayList<String>();            List<Position> positions = informationService.findListForUser(queryMap);            if (positions.size() < 10) {                for (int i = 0; i < positions.size(); i++) {                    positionIds.add(positions.get(i).getId());                }                queryMap.put("positionIds", positionIds);                positions.addAll(informationService.findListNoContainCity(queryMap));                if (positions.size() < 10) {                    for (int i = 0; i < positions.size(); i++) {                        positionIds.add(positions.get(i).getId());                    }                    positions.addAll(informationService.findListNoContainType(queryMap));                    if (positions.size() > 10) {                        result.setData(positions.subList(0, 10));                    } else {                        result.setData(positions);                    }                } else if (positions.size() == 10) {                    result.setData(positions);                } else {                    result.setData(positions.subList(0, 10));                }            } else if (positions.size() == 10) {                result.setData(positions);            } else {                result.setData(positions.subList(0, 10));            }        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "对不起，您选择的类型不存在");        }        return result;    }    /**     * 修改用户数据     * @param user 用户对象     * @return 页面地址     */    @RequestMapping(value = "/h5/mine/updateUserInfo", method = RequestMethod.POST)    public String updateUserInfo(User user) {        try {            user.setId(IJobSecurityUtils.getLoginUserId());            user.setWeChatNo(IJobSecurityUtils.getLoginUser().getWeChatNo());            if (!"".equals(user.getNickName())){                Long count = userService.update(user);                if (count < 1) {                    throw new Exception("修改失败，数据格式不正确!");                }else{                    IJobSecurityUtils.updateUser(user);                }            }else{                Long count = userService.update(user);                if (count < 1) {                    throw new Exception("修改失败，数据格式不正确!");                }else{                    IJobSecurityUtils.updateUser(user);                }            }        } catch (Exception e) {            logger.error(e.getMessage());        }        return "/h5/qz/mine/basicInfo";    }    /**     * 修改用户手机     * @param user 用户对象     * @return 页面地址     */    @RequestMapping(value = "/h5/mine/updatePhoneNumber", method = RequestMethod.POST)    public String updatePhoneNumber(User user) {        user.setId(IJobSecurityUtils.getLoginUserId());//        user.setWeChatNo(IJobSecurityUtils.getLoginUser().getWeChatNo());        try{            Long count = userService.update(user);            IJobSecurityUtils.getLoginUser().setNickName(user.getNickName());            IJobSecurityUtils.getLoginUser().setPhoneNumber(user.getPhoneNumber());            QueryParam queryParam = new QueryParam();            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            Personalauthen personalauthen = personalauthenService.one(queryParam);            if(personalauthen!=null){                personalauthen.setPersonPhoneNumber(user.getPhoneNumber());                personalauthenService.update(personalauthen);            }        }catch (Exception e){            e.getMessage();        }        return "/h5/qz/mine/basicInfo";    }    @RequestMapping(value = "/h5/mine/updateInfo", method = RequestMethod.POST)    public String updateInfo(Information information,HttpServletRequest request){        try{            if (information.getWorkNumber() != null){                Information informationSQL = informationService.one(new QueryParam("userID",IJobSecurityUtils.getLoginUserId()));                if (information.getWorkNumber().equals(informationSQL.getWorkNumber())){                    throw new Exception("不能进行工作号修改");                }else{                    Long count = informationService.update(information);                    if (count < 1) {                        throw new Exception("修改失败，数据格式不正确");                    }else{                        //this.updateSessionInfo(request);                        IJobSecurityUtils.getLoginUser().getInformation().setWorkNumber(information.getWorkNumber());                    }                }            }else{                Long count = informationService.update(information);                if (count < 1) {                    throw new Exception("修改失败，数据格式不正确");                }else{                    //this.updateSessionInfo(request);                }            }        }catch (Exception e){            logger.error(e.getMessage());        }        return "/h5/qz/mine/basicInfo";    }    /**     * 更新session 域中的数据     * @param request     */    private void updateSessionInfo(HttpServletRequest request){        try {            QueryParam queryParam = new QueryParam("userID", IJobSecurityUtils.getLoginUserId());            Information information  = informationService.one(queryParam);            request.getSession().setAttribute("Information", information);            IJobSecurityUtils.getLoginUser().setInformation(information);            request.setAttribute("fansCount", attentionService.count(queryParam));            queryParam.clear();            queryParam.put("concernID", IJobSecurityUtils.getLoginUserId());            request.setAttribute("followCount", attentionService.count(queryParam));        } catch (Exception e) {            logger.error(e.getMessage());        }    }    /**     * 跳转认证页面     * @return     */    @RequestMapping(value="/h5/mine/realName" , method = RequestMethod.GET)    public String userRealName (){        return "/h5/qz/mine/realName";    }    @RequestMapping(value = "/myRealName_approval/{status}/{userID}" ,method = RequestMethod.GET ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result myRealNameApproval(@PathVariable String userID,@PathVariable Integer status){        Result result  = new Result();        QueryParam queryParam = new QueryParam("userID",userID);        try {            Personalauthen personalauthen =  personalauthenService.one(queryParam);//            Enterpriseauthen enterpriseauthen = enterpriseauthenService.one(queryParam);            if(status==0){ //如果是不通过，则删除，物理删除                if(personalauthen!=null)personalauthen.setStatus(2);//                if(enterpriseauthen!=null)enterpriseauthen.setStatus(2);            }else{                if(personalauthen!=null)personalauthen.setStatus(1);//                if(enterpriseauthen!=null)enterpriseauthen.setStatus(1);            }            if(personalauthen!=null)personalauthenService.update(personalauthen);//            if(enterpriseauthen!=null)enterpriseauthenService.update(enterpriseauthen);        } catch (Exception e) {            e.printStackTrace();            result.error("审批失败");        }        return result;    }    @RequestMapping(value = "/approvalCallback" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result approvalCallback(@RequestBody WorkList workList){        Result result  = new Result();        try {            Personalauthen personalauthen =  personalauthenService.get(workList.getRefID());            if(personalauthen!=null){                if(workList.getStatus()==3){ //如果是不通过，则删除，物理删除                    personalauthen.setStatus(2);                    User user  = userService.get(workList.getCreateBy());                    messageTemplateService.ptShtz(user.getWeChatNo(),"身份认证",workList.getMsg());                }else{                    personalauthen.setStatus(1);                }                personalauthenService.update(personalauthen);                scanSettleService.updatePersonal(personalauthen);            }else{                result.error("审核业务已经删除");            }        } catch (Exception e) {            e.printStackTrace();            result.error("审批失败");        }        return result;    }    @RequestMapping(value = "/myRealName_check/{userID}" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result myRealNameCheck(@PathVariable String userID){        Result result  = new Result();        try {            Map map =  getPerson(userID);            result.listData(map);        } catch (Exception e) {            result.error("查询失败");        }        return result;    }    private Map getPerson(String userID)throws Exception{        QueryParam queryParam = new QueryParam("userID",userID);        Map map = new HashMap();        Personalauthen personalauthen = personalauthenService.mapOne(queryParam);        if(personalauthen==null){            personalauthen  = new Personalauthen();            personalauthen.setStatus(2);        }else if(StringUtils.isEmptyString(personalauthen.getPersonIDCard())||StringUtils.isEmptyString(personalauthen.getPersonIDCardJustOriginal())){            personalauthen.setStatus(2);        }        Enterpriseauthen enterpriseauthen = enterpriseauthenService.mapOne(queryParam);        if(enterpriseauthen==null){            enterpriseauthen = new Enterpriseauthen();            enterpriseauthen.setStatus(2);        }        map.put("Personalauthen",personalauthen);        map.put("Enterpriseauthen",enterpriseauthen);        map.put("identityType",IJobSecurityUtils.getLoginUser().getInformation().getIdentityType());        return map;    }    @RequestMapping(value = "/myRealName" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result myRealName(){        Result result  = new Result();        try {            Map map =  getPerson(IJobSecurityUtils.getLoginUserId());            Object personalauthenObj = map.get("Personalauthen");            if(personalauthenObj!=null){                Personalauthen personalauthen = (Personalauthen)personalauthenObj;                if(null!=personalauthen.getStatus() && 1>=personalauthen.getStatus() ){                    String temp = "";                    if(StringUtils.isNotEmptyString(personalauthen.getRealName())) {                        temp = personalauthen.getRealName().substring(0, personalauthen.getRealName().length() - 1);                        personalauthen.setRealName(temp + "*");                    }                    if(StringUtils.isNotEmptyString(personalauthen.getPersonPhoneNumber())){                        temp = personalauthen.getPersonPhoneNumber().substring(0,personalauthen.getPersonPhoneNumber().length() - 4);                        personalauthen.setPersonPhoneNumber(temp+"****");                    }                    if(StringUtils.isNotEmptyString(personalauthen.getPersonIDCard())) {                        temp = personalauthen.getPersonIDCard().substring(0,2)+"**************"+personalauthen.getPersonIDCard().substring(personalauthen.getPersonIDCard().length()-3,personalauthen.getPersonIDCard().length()-1);                        personalauthen.setPersonIDCard(temp);                    }                    map.put("Personalauthen",personalauthen);                }            }            Object enterpriseauthenObj = map.get("Enterpriseauthen");            if(enterpriseauthenObj!=null){                String temp = "";                Enterpriseauthen enterpriseauthen = (Enterpriseauthen)enterpriseauthenObj;                if(null!=enterpriseauthen.getStatus() && 1>=enterpriseauthen.getStatus()){                    if(StringUtils.isNotEmptyString(enterpriseauthen.getAdminName())) {                        temp = enterpriseauthen.getAdminName().substring(0, enterpriseauthen.getAdminName().length() - 1);                        enterpriseauthen.setAdminName(temp + "*");                    }                    if(StringUtils.isNotEmptyString(enterpriseauthen.getAdminPhoneNumber())){                        temp = enterpriseauthen.getAdminPhoneNumber().substring(0,enterpriseauthen.getAdminPhoneNumber().length() - 4);                        enterpriseauthen.setAdminPhoneNumber(temp+"****");                    }                    if(StringUtils.isNotEmptyString(enterpriseauthen.getAdminIDCard())){                        temp = enterpriseauthen.getAdminIDCard().substring(0,2)+"**************"+enterpriseauthen.getAdminIDCard().substring(enterpriseauthen.getAdminIDCard().length()-2,enterpriseauthen.getAdminIDCard().length());                        enterpriseauthen.setAdminIDCard(temp);                    }                    map.put("Enterpriseauthen",enterpriseauthen);                }            }            result.listData(map);        } catch (Exception e) {            result.error("查询失败");        }        return result;    }    /***     * 跳转到支付密码修改页面     * @return 页面地址     */    @RequestMapping(value = "/h5/mine/mySettings_changePassword" , method = RequestMethod.GET)    public String mySettings_changePassword(){        String url = "/h5/qz/mine/mySettings_changePassword";        try{            Information information = informationService.one(new QueryParam("userID",IJobSecurityUtils.getLoginUserId()));            IJobSecurityUtils.getSession().setAttribute("Information",information);            if(information.getPayPassword()==null||"".equals(information.getPayPassword())){               url = "/h5/qz/mine/mySettings_changePassword_again";            }        }catch (Exception e ){            logger.error(e.getMessage());            return "/h5/qz/mine/mine";        }        return url;    }    /**     * 跳转到设置页面     * @return 页面地址     */    @RequestMapping(value = "/h5/mine/mySettings" ,method = RequestMethod.GET)    public String mySettings(HttpServletRequest request){        QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());        try {            UserSetting userSetting = userSettingService.one(queryParam);            if (userSetting == null ){                userSetting = new UserSetting();                userSetting.setChatinfo(true);                userSetting.setGmnotic(true);                userSetting.setGmversion("1.0.1");                userSetting.setUserID(IJobSecurityUtils.getLoginUserId());                userSettingService.add(userSetting);            }            request.setAttribute("UserSetting",userSetting);        }catch (Exception e ){            logger.error(e.getMessage());        }        return "/h5/qz/mine/mySettings";    }    /**     * 跳转到推送设置页面     * @return 页面地址     */    @RequestMapping(value = "/h5/mine/mySettings_newsSettings" ,method = RequestMethod.GET)    public String mySettings_newsSettings(HttpServletRequest request){        QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());        try {            request.setAttribute("UserSetting",userSettingService.one(queryParam));        }catch (Exception e ){            logger.error(e.getMessage());        }        return "/h5/qz/mine/mySettings_newsSettings";    }    /**     * 跳转到帮助与反馈页面     * @return 页面地址     */    @RequestMapping(value = "/h5/mine/mySettings_feedback" ,method = RequestMethod.GET)    public String mySettings_feedback(){        return "/h5/qz/mine/mySettings_feedback";    }    /**     * 跳转到关于我们页面     * @return 页面地址     */    @RequestMapping(value = "/h5/mine/aboutUs" ,method = RequestMethod.GET)    public String aboutUs(){        return "/h5/qz/mine/aboutUs";    }    /**     * 跳转信息页面     * @return     */    @RequestMapping(value = "/h5/information/information" ,method = RequestMethod.GET)    public String information(Model model){        model.addAttribute("site",DictCacheService.Site);        return "/h5/information/information";    }    /**     * 加载用户的关注列表     * @return 结果对象     */    @RequestMapping(value = "/h5/information/myInfoMassa/{nickName}" ,method = RequestMethod.POST,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result myInfoMassa(@PathVariable String nickName){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam("concernID",IJobSecurityUtils.getLoginUserId());            queryParam.put("isDeleted","false");            List<String> ids = attentionService.findIds(queryParam,"userID");            queryParam.clear();            queryParam.in("id",ids);            Map resultMap = new HashMap();            List<User> userList = userService.findList(queryParam);            List<User> tempUserList = new ArrayList<User>();            if(!"0".equals(nickName)){                for (User user :userList){                    if (user.getNickName().contains(nickName)){                        tempUserList.add(user);                    }                }                userList.clear();                userList = tempUserList ;            }            resultMap.put("userList",userList);            resultMap.put("size",userList.size());            result.listData(resultMap);        }catch (Exception e){            logger.error(e.getMessage());        }        return result;    }    /**     * 加载用户的关注列表     * @return 结果对象     */    @RequestMapping(value = "/h5/information/myInfoFans/{nickName}" ,method = RequestMethod.GET)    @ResponseBody    public Result myInfoFans(@PathVariable String nickName){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());            queryParam.put("isDeleted","false");            List<String> ids = attentionService.findIds(queryParam,"concernID");            queryParam.clear();            queryParam.in("id",ids);            Map resultMap = new HashMap();            queryParam.setOrderByClause("order by pinyin asc");            List<User> userList = userService.findList(queryParam);            List<User> tempUserList = new ArrayList<User>();            if(!"0".equals(nickName)){                for (User user :userList){                    if (user.getNickName().contains(nickName)){                        tempUserList.add(user);                    }                }                userList.clear();                userList = tempUserList ;            }            resultMap.put("userList",userList);            resultMap.put("size",userList.size());            result.listData(resultMap);        }catch (Exception e){            logger.error(e.getMessage());        }        return result;    }    /***     * 跳转到信息发布页面     * @return     */    @RequestMapping(value = "/h5/information/added" ,method = RequestMethod.GET)    public String added(){        return "/h5/information/added";    }    @RequestMapping(value = "/h5/mine/switchIdentity")    public String switchIdentity(Model model){        model.addAttribute("site",DictCacheService.Site);        return "/h5/qz/mine/switchIdentity";    }    /**     * 加载当前用户的身份信息     * @return     */    @RequestMapping(value = "/h5/mine/loadInformation",method = RequestMethod.GET)    @ResponseBody    public Result loadInformation(){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam("userID" ,IJobSecurityUtils.getLoginUserId());            result.listData(informationService.one(queryParam));        }catch (Exception e){            logger.error(e.getMessage());            e.printStackTrace();        }        return result;    }    /**     * 加载我的兼职圈动态     *     * @param pageParam     * @return     */    @RequestMapping(value = "/h5/mine/information/loadMyPartTimeInformation", method = RequestMethod.POST)    @ResponseBody    public Result loadMyPartTimeInformation(@RequestBody PageParam pageParam) {        Result result = new Result();        try {            pageParam.put("userID",IJobSecurityUtils.getLoginUserId());            //parttimeinformationService.loadMyPartTimeInformationPage(pageParam);            result.setData(parttimeinformationService.loadMyPartTimeInformationPage(pageParam));        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500","数据出现异常！");        }        return result;    }    /***     * 跳转到获取验证码页面     * @return     */    @RequestMapping(value = "/h5/mine/mySettings_changePassword_again", method = RequestMethod.GET)    public String gotoVerificationCode() {        return "/h5/qz/mine/mySettings_changePassword_verification";    }    /**     * 判断验证码是否正确     *     * @param verificationCode     * @return     */    @RequestMapping(value = "/qz/isVerificationCode", method = RequestMethod.POST)    public Result isVerificationCode(String verificationCode) {        Result result = new Result();        result.put("500", "验证码错误！");        return result;    }    /**     * 因为忘记而修改支付密码     *     * "newPayPassword":$("#newPayPassword").val(),     * "againPayPassword":$("#againPayPassword").val(),     * "id":$("#id").val(),     * "version":$("#version").val()     * "account":$("#account").val()     */    @RequestMapping(value = "/qz/updatePayPasswordForForget", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result updatePayPasswordForForget(@RequestParam Map map) {        Result result = new Result();        result.put("200","修改密码成功");        try {            //验证密码格式            String newPayPassword = (String)map.get("againPayPassword");            String againPayPassword = (String)map.get("againPayPassword");            boolean regex = newPayPassword.matches("^[0-9]{6}$");            if (!regex) {                result.put("501", "支付密码修改失败:密码需要是6个数字组成！");                return result ;            } else if (!newPayPassword.equals(againPayPassword)) {                result.put("501", "支付密码修改失败:两次输入密码不一致！");                return result ;            }            //对密码进行修改            Information information = IJobSecurityUtils.getLoginUser().getInformation();//            information.setPayPassword(MD5Tools.getMD5Hash((String)map.get("account"), newPayPassword));            information.setPayPassword(MD5Tools.getMD5Hash("payPassword", (String) map.get("newPayPassword")));            long count = informationService.update(information);            IJobSecurityUtils.getLoginUser().setInformation(information);            if (count < 1) {                throw new Exception("新支付密码格式有误");            }        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "支付密码修改失败:" + e.getMessage());        }        return result;    }    /**     * 获取简介信息     * @return     */    @RequestMapping(value = "/qz/getInformation",method = RequestMethod.GET)    @ResponseBody    public Result getInformation() {        Result result = new Result();        try {            QueryParam queryParam = new QueryParam("userID", IJobSecurityUtils.getLoginUserId());            Information information = informationService.one(queryParam);            Information information1 = new Information();            information1.setId(information.getId());            information1.setVersion(information.getVersion());            information1.setBrief(information.getBrief());            result.setData(information1);        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","获取简介失败"+ e.getMessage());        }        return result;    }    /**     * 获取简介信息     * @return     */    @RequestMapping(value = "/qz/checkPayPw",method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result checkPayPw(Information information) {        Result result = new Result();        try {            String pwd=MD5Tools.getMD5Hash("payPassword",information.getPayPassword());            if(StringUtils.isNotEmptyString(IJobSecurityUtils.getLoginUser().getInformation().getPayPassword())){                if(!pwd.equals(IJobSecurityUtils.getLoginUser().getInformation().getPayPassword())){                    result.error("密码输入错误");                }            }else{                result.error("请先设置密码");                result.setCode("302");            }        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","验证密码错误");        }        return result;    }}