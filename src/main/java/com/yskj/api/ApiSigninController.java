package com.yskj.api;import com.yskj.controller.base.BaseController;import com.yskj.exception.IJobException;import com.yskj.models.*;import com.yskj.service.*;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.Result;import com.yskj.utils.StringUtils;import org.apache.shiro.util.CollectionUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import java.util.*;@Controller@RequestMapping(value = "/api/SigninController")public class ApiSigninController extends BaseController {    @Autowired    private SigninService signinService;    @Autowired    private LocaltioninfoService localtioninfoService;    @Autowired    private PositionService positionService;    @Autowired    private BondtransactionService bondtransactionService;    @Autowired    private BeenrecruitedService beenrecruitedService;    private final static Logger logger = LoggerFactory.getLogger(ApiSigninController.class);    public SigninService getService() {        return this.signinService;    }    /**     * 签到页面     *     * @return String     */    @RequestMapping(value = "/signIn/{id}", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String signIn(Model model, @PathVariable String id) {        model.addAttribute("id", id);        model.addAttribute("req","path");        model.addAttribute("url","/h5/qz/myjob/sign_in?data.sign.title=签到&data.sign.id="+id);        return "/h5/share";    }    /**     * 签到页面列表     *     * @return String     */    @RequestMapping(value = "/list/{positionID}", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String list(Model model, @PathVariable String positionID) {        model.addAttribute("positionID", positionID);        try {            Position position = positionService.get(positionID);            model.addAttribute("title", position.getTitle());        } catch (Exception e) {            e.printStackTrace();        }        return "/h5/qz/myjob/sign_recode";    }    /**     * 页面     *     * @return String     */    @RequestMapping(value = "/chooseResume", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String chooseResume() {        return "/h5/qz/mine/chooseResume";    }    /**     * 新增     *     * @param signin     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(@RequestBody Signin signin) {        Result result = new Result();        try {            if(signin.getTitle().equals("签到")){                signinService.toSignIn(signin);            }else{                signinService.toSignBack(signin);            }        } catch (IJobException e) {            logger.error(e.getMessage());            result.error(e.getMessage());        } catch (Exception e) {            logger.error(e.getMessage());            result.error("签到失败");        }        return result;    }    /**     * 删除     *     * @param signin     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(Signin signin) {        return super.delete(signin);    }    /**     * 修改     *     * @param signin     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(Signin signin) {        return super.update(signin);    }    /**     * 查询页面     *     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam) {        pageParam.put("userID", IJobSecurityUtils.getLoginUserId());        Result result = super.findPage(pageParam);        Object object = pageParam.getList();        if (object != null) {            List<Signin> list = (List<Signin>) object;            if (!CollectionUtils.isEmpty(list)) {                List<String> strings = new ArrayList<String>();                for (Signin signin : list) {                    strings.add(signin.getSignAddress());                }                QueryParam queryParam = new QueryParam();                queryParam.in("id", strings);                List<Localtioninfo> localtioninfos = null;                try {                    localtioninfos = localtioninfoService.findList(queryParam);                    for (Signin signin : list) {                        for (Localtioninfo localtioninfo : localtioninfos) {                            if (signin.getSignAddress().equals(localtioninfo.getId())) {                                signin.setAddress(localtioninfo);                                break;                            }                        }                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        }        result.setData(pageParam);        return result;    }    /**     * 查询集合     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam) {        return super.findList(queryParam);    }    /**     * 查询集合     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList2List/{positionID}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList2List(@RequestBody QueryParam queryParam, @PathVariable String positionID) {        queryParam.put("userID", IJobSecurityUtils.getLoginUserId());        queryParam.put("positionID", positionID);        queryParam.setOrderByClause(" order by s.createTime desc ");        return super.getObject2List(signinService.mapList(queryParam));    }    /**     * 查询集合     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList3List", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList3List(@RequestBody QueryParam queryParam) {        queryParam.setOrderByClause(" order by s.createTime desc ");        return super.getObject2List(signinService.mapList(queryParam));    }    /**     * 模糊查询页面     *     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam) {        return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam) {        return super.findLikeList(queryParam);    }    /**     * 唯一查询     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam) {        return super.one(queryParam);    }    /**     * 唯一查询通过ID     *     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id) {        return super.get(id);    }    /**     * 唯一查询通过ID     *     * @param id     * @return Result     */    @RequestMapping(value = "/getSignInfo/{id}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getSignInfo(@PathVariable  String id) {        Result result = new Result();        QueryParam queryParam = new QueryParam();        queryParam.put("id",id);        try {            Signin signin = signinService.infomapOne(queryParam);            return super.getObject2List(signin);        } catch (Exception e) {            e.printStackTrace();            result.error("获取签到信息失败");        }        return result;    }    @RequestMapping(value = "/zp/getSigninInfoCount", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getSigninInfoCount(@RequestBody QueryParam queryParam) {        if (queryParam.getCondition().get("signinTime") == null || "".equals(queryParam.getCondition().get("signinTime"))) {            queryParam.put("signinTime", new Date());        }        Result result = new Result();        Map map = new HashMap();        Map countMap = new HashMap();        Map<String,Integer> signMap  = signinService.signinCountMap(queryParam);        Map<String,Integer> signsureMap  = signinService.signinSureCountMap(queryParam);        countMap.put("signinCountSum",signMap.get("signin"));        countMap.put("noSigninCount",signMap.get("nosignin"));        countMap.put("sureCount", signsureMap.get("sure"));        map.put("countMap", countMap);        result.listData(map);        return result;    }    /**     * 待到岗详细数据查询接口     *     * @return     */    @RequestMapping(value = "/zp/getSigninInfo/{state}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getSigninInfo(@RequestBody QueryParam queryParam,@PathVariable String state) {        if (queryParam.getCondition().get("signinTime") == null || "".equals(queryParam.getCondition().get("signinTime"))) {            queryParam.put("signinTime", new Date());        }        if(state.equals("1")){            queryParam.put("signstate",1);        }else if(state.equals("2")){            queryParam.put("signstate",0);        }        List<Beenrecruited> beenrecruiteds = new ArrayList<Beenrecruited>();        if (!"3".equals(state))            beenrecruiteds = signinService.unconfirmedSignin(queryParam);        else            beenrecruiteds = signinService.noSignin(queryParam);        Result result = new Result();        result.listData(beenrecruiteds);        return result;    }    /**     * 获得培训和工作的签到信息     *     * @param positionID 职位ID     * @param signinType      用户所属状态{培训还是工作中}     * @return     */    @RequestMapping(value = "/zp/getSigninInfoOfTrainingOrWorking/{positionID}/{signinType}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getSigninInfoOfTrainingOrWorking(@PathVariable String positionID, @PathVariable String signinType) {        Result result = new Result();        QueryParam queryParam = new QueryParam();        queryParam.put("positionID", positionID);        queryParam.put("signinType", signinType);        queryParam.put("isDeleted", false);        try {            List<Beenrecruited> beenrecruiteds = signinService.getSigninInfoOfTrainingOrWorking(queryParam);            for (Beenrecruited beenrecruited : beenrecruiteds) {                queryParam.put("userID", beenrecruited.getResume().getUser().getId());                beenrecruited.getResume().getUser().setSigninCount(signinService.getTodaySignCount(queryParam).intValue());                beenrecruited.getResume().getUser().setSignin(signinService.getNewInfo(queryParam));            }            result.listData(beenrecruiteds);        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "服务器繁忙，请稍后再试！或者选择联系客服。");        }        return result;    }    /**     * 招聘方确认求职者到岗     *     * @param map     * @return     */    @RequestMapping(value = "/zp/sureSignin", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result sureSignin(@RequestBody Map map) {        Result result = new Result();        try {            QueryParam queryParam = new QueryParam();            queryParam.setCondition(map);            signinService.sureSignin(queryParam);        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "服务器繁忙！请稍候再试。");        }        return result;    }    @RequestMapping(value = "/cancelInterview", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result cancelInterview(@RequestBody Beenrecruited beenrecruited) {        Result result = new Result();        try{            beenrecruitedService.cancelInterview(beenrecruited);        }catch (IJobException e){            logger.error(e.getMessage());            result.error(e.getMessage());        }catch (Exception e){            logger.error(e.getMessage());            result.error("取消应聘失败");        }        return result;    }    @RequestMapping(value = "/changeWorkState/{state}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result closeTodayWork(@RequestBody List<Signin> ids ,@PathVariable Integer state){        Result result = new Result();        try{            signinService.changeWorkState(ids,state);        }catch (Exception e){            logger.error(e.getMessage());            result.error("结束今日工作失败");        }        return result;    }}