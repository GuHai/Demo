package com.yskj.api;import com.yskj.aop.SearchRecode;import com.yskj.controller.base.BaseController;import com.yskj.models.Huntingtype;import com.yskj.models.PageParam;import com.yskj.models.QueryParam;import com.yskj.models.Searchlog;import com.yskj.service.HuntingtypeService;import com.yskj.service.SearchlogService;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.Result;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.apache.shiro.util.CollectionUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.ArrayList;import java.util.List;@Controller@RequestMapping(value = "/api/SearchlogController")public class ApiSearchlogController extends BaseController{	@Autowired	private SearchlogService searchlogService;	@Autowired    private HuntingtypeService huntingtypeService;	private final static Logger logger = LoggerFactory.getLogger(ApiSearchlogController.class);	 public SearchlogService getService() {         return this.searchlogService;     }    /**     * 页面     * @return String     */    @RequestMapping(value = "",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model){        return "/h5/qz/index/searchJob";    }    /**     * 搜索结果页面     * @return String     */    @SearchRecode(type= SearchRecode.OpType.SEARCH)    @RequestMapping(value = "/result",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String result(String search ,String orderBy ,Model model) throws Exception {        model.addAttribute("search",search);        model.addAttribute("orderBy",orderBy);        model.addAttribute("workTypeList",huntingtypeService.findAllType(new QueryParam()));        return "/h5/qz/index/part_time";    }    /**     *新增     * @param searchlog     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(Searchlog searchlog ){         return super.add(searchlog);    }    /**     * 删除     * @param searchlog     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(Searchlog searchlog ){        return super.delete(searchlog);    }     /**     * 修改     * @param searchlog     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(Searchlog searchlog ){        return super.update(searchlog);    }    /**     * 查询页面     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){        return super.findPage(pageParam);    }    /**     * 获取热门搜索     * @return Result     */    @RequestMapping(value = "/findHotList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findHotList(){        Result result  = new Result();        result.setData(searchlogService.findHotList());        return result;    }     /**     * 查询集合 获取我的历史搜索     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam ){        Result result  = new Result();        PageParam pageParam  = new PageParam();        pageParam.put("userID", IJobSecurityUtils.getLoginUserId());        pageParam.setOrderByClause(" order by s.updateTime ");        result.setData(super.findPage(pageParam).fromDataList());        return result;    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id ){        return super.get(id);    }}