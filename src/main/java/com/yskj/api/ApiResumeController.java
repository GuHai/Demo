package com.yskj.api;import com.yskj.aop.SearchRecode;import com.yskj.controller.base.BaseController;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.service.*;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.Result;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import java.util.Calendar;import java.util.HashMap;import java.util.List;import java.util.Map;@Controller@RequestMapping(value = "/api/ResumeController")public class ApiResumeController extends BaseController {    @Autowired    private ResumeService resumeService;    @Autowired    private EducationalService educationalService;    @Autowired    private WorkexperienceService workexperienceService;    @Autowired    private DocumentService documentService;    @Autowired    private AttachmentService attachmentService;    @Autowired    private InformationService informationService;    @Autowired    private WeChatService weChatService;    @Autowired    private RecommendService recommendService ;    private final static Logger logger = LoggerFactory.getLogger(ApiResumeController.class);    public ResumeService getService() {        return this.resumeService;    }    /**     * 跳转到简历列表页面     *     * @return     */    @RequestMapping(value = "/h5/mine/chooseResume", method = RequestMethod.GET)    public String chooseResume() {//        QueryParam queryParam = new QueryParam("userID", IJobSecurityUtils.getLoginUserId());//        queryParam.put("isDeleted",false);//        try {//            request.setAttribute("resumeList" ,resumeService.findList(queryParam));//        }catch (Exception e ){//            logger.error(e.getMessage());//        }        return "/h5/qz/mine/chooseResume";    }    @RequestMapping(value = "/h5/mine/getResumeList", method = RequestMethod.GET)    @ResponseBody    public Result getResumeList() {        Result result = new Result();        QueryParam queryParam = new QueryParam("userID", IJobSecurityUtils.getLoginUserId());        queryParam.put("isDeleted", false);        try {            result.listData(resumeService.findList(queryParam));        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "查找简历异常，" + e.getMessage());        }        return result;    }    /**     * 简历新增(修改)页面获取简历信息     *     * @return     */    @RequestMapping(value = "h5/mine/chooseResume_add/{id}", method = RequestMethod.GET)    @ResponseBody    public Result chooseResume_add(@PathVariable String id, HttpServletRequest request) {        Result result = new Result();        Map<String, Object> map = new HashMap<String, Object>();        Resume resume = null;        try {//            IJobSecurityUtils.getSession().setAttribute();            map.put("Information", informationService.one(new QueryParam("userID", IJobSecurityUtils.getLoginUserId())));            map.put("Weixin", weChatService.one(new QueryParam("userID", IJobSecurityUtils.getLoginUserId())));            if ("0".equals(id)) {//                if (IJobSecurityUtils.getLoginUser().getRealName() == null)//                    resume.setResumeTitle("暂无");//                else//                    resume.setResumeTitle(IJobSecurityUtils.getLoginUser().getRealName());                request.getSession().setAttribute("Resume", null);            } else {                resume = resumeService.get(id);                if (resume != null) {                    resume = new Resume();                }                Attachment attachment = attachmentService.get(resume.getResumeHeadImg());                QueryParam queryParam = new QueryParam();                queryParam.put("resumeID", id);                queryParam.put("isDeleted", false);                resume.setEducationalList(educationalService.<Educational>findList(queryParam));                resume.setWorkexperienceList(workexperienceService.<Workexperience>findList(queryParam));                resume.setDocumentList(documentService.<Document>findList(queryParam));                if (attachment != null) {                    resume.setImgPath(attachment.getAbsolutelyPath());                }                request.getSession().setAttribute("Resume", resume);            }        } catch (Exception e) {            result.put("500", "");            logger.error(e.getMessage());        }        map.put("Resume", resume);        result.listData(map);        return result;//        return "/h5/qz/mine/chooseResume_add";    }    /**     * 查询用户的唯一简历（2018年6月12日15:14:09 需求）     *     * @return     */    @RequestMapping(value = "/h5/mine/getChooseResume_addPageData", method = RequestMethod.GET)    @ResponseBody    public Result getResumeByUserId() {        Result result = new Result();        QueryParam queryParam = new QueryParam();        Map<String, Object> map = new HashMap<String, Object>();        Resume resume = null;        try {            //根据用户id拿到简历            queryParam.put("isDeleted", false);            queryParam.put("isDefault", true);            queryParam.put("userID", IJobSecurityUtils.getLoginUserId());            resume = (Resume) resumeService.one(queryParam);            if (resume != null) {                //根据简历id查询出学历、工作经历和证件                queryParam.clear();                queryParam.put("resumeID", resume.getId());                queryParam.put("isDeleted", false);                resume.setEducationalList(educationalService.<Educational>findList(queryParam));                resume.setWorkexperienceList(workexperienceService.<Workexperience>findList(queryParam));                resume.setDocumentList(documentService.<Document>findList(queryParam));                resume.setImgPath(IJobSecurityUtils.getLoginUser().getImgPath());            }            //赋值到结果集            map.put("Information", informationService.one(new QueryParam("userID", IJobSecurityUtils.getLoginUserId())));            map.put("Weixin", weChatService.one(new QueryParam("userID", IJobSecurityUtils.getLoginUserId())));        } catch (Exception e) {            result.put("500", "");            logger.error(e.getMessage());        }        //赋值到结果集        map.put("Resume", resume);        result.listData(map);        return result;    }    /**     * 跳转到简历修改页面     *     * @return 页面地址     */    @RequestMapping(value = "h5/mine/chooseResume_edit", method = RequestMethod.GET)    public String chooseResume_edit(HttpServletRequest request, Map<String, Object> map) {        String resumeTitle = request.getParameter("resumeTitle");        map.put("resumeTitle", resumeTitle);        return "h5/qz/mine/chooseResume_edit";    }    /**     * 将标题和自我评价信息保存到session域中的简历对象中。     *     * @param map 标题和自我评价以及版本号参数     * @return 成功码     */    @RequestMapping(value = "/saveTitleAndEva", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public String saveTitleAndEva(@RequestParam Map map) {        Resume resume = (Resume) IJobSecurityUtils.getSession().getAttribute("Resume");        try {            resume.setResumeTitle((String) map.get("resumeTitle"));            resume.setEvaluation((String) map.get("evaluation"));            resume.setVersion((Integer) map.get("version"));        } catch (Exception e) {        }        IJobSecurityUtils.getSession().setAttribute("Resume", resume);        return "200";    }//    @RequestMapping(value = "h5/mine/add_Education", method = RequestMethod.GET)//    public String add_Education(){ return "h5/qz/mine/add_Education"; }    @RequestMapping(value = "h5/mine/add_workExperience", method = RequestMethod.GET)    public String add_workExperience() {        return "h5/qz/mine/add_workExperience";    }    @RequestMapping(value = "h5/mine/add_document", method = RequestMethod.GET)    public String add_document() {        return "h5/qz/mine/add_document";    }    /**     * 页面     *     * @return String     */    @RequiresPermissions("Resume")    @RequestMapping(value = "", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model) {        return "resume";    }    /**     * 新增     *     * @param resume     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(@RequestBody Resume resume) {        Result result = new Result();        try {            Resume temp = resumeService.one(new QueryParam("phoneNumber",resume.getPhoneNumber()));            if(temp!=null&&!IJobSecurityUtils.getLoginUserId().equals(temp.getUserID())){                result.put("401","该手机号码已经被使用了。");                return result;            }            resume.setState(true);            resume.setDeleted(false);            resume.setUserID(IJobSecurityUtils.getLoginUserId());            if (resume.getAttachment() != null) {                resume.setImgPath(resume.getAttachment().getAbsolutelyPath());            }            resumeService.setDefault(resume);            resumeService.persistenceAndChild(resume);            //添加证件图片            if (resume.getDocumentList() != null) {                for (Document document : resume.getDocumentList()) {                    Attachment attachment = document.getAttachment();                    //添加并得到主键                    attachmentService.add(attachment);                    document.setFocumentImg(attachment.getId());                }            }            resumeService.persistenceAndChild(resume);            IJobSecurityUtils.getSession().setAttribute("Resume", resume);        } catch (Exception e) {            e.printStackTrace();            logger.error(e.getMessage());            result.put("500", e.getMessage());        }        result.setData(resume);        return result;    }    /**     * 删除     *     * @param id     * @return Result     */    @RequestMapping(value = "/delete/{id}", method = RequestMethod.GET)    @ResponseBody    public Result delete(@PathVariable String id) {        Result result = new Result();        try {            resumeService.delete(resumeService.get(id));        } catch (Exception e) {            result.put("500", "删除失败");            logger.error(e.getMessage());        }        return result;    }    /**     * 修改     *     * @param resume     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(@RequestBody Resume resume) {        Result result = new Result();        try {            Resume temp = resumeService.one(new QueryParam("phoneNumber",resume.getPhoneNumber()));            if(temp!=null&&!IJobSecurityUtils.getLoginUserId().equals(temp.getUserID())){                result.put("401","该手机号码已经被使用了。");                return result;            }            if (resume.getAttachment() != null) {                resume.setImgPath(resume.getAttachment().getAbsolutelyPath());            }            temp = resumeService.one(new QueryParam("userID",IJobSecurityUtils.getLoginUserId()));            resumeService.setDefault(resume);            resumeService.persistenceAndChild(resume);            if(temp!=null){                QueryParam queryParam = new QueryParam("phoneNumber",temp.getPhoneNumber());                Recommend recommend = recommendService.one(queryParam);                recommend.setAge(resume.getAge());                recommend.setName(resume.getResumeName());                recommend.setSex(resume.getSex());                recommend.setPhoneNumber(resume.getPhoneNumber());                recommendService.update(recommend);            }            IJobSecurityUtils.getSession().setAttribute("Resume", resume);        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", e.getMessage());        }        result.setData(resume);        return result;    }    /**     * 查询页面     *     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam) {        return super.findPage(pageParam);    }    /**     * 查询集合     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam) {        return super.findList(queryParam);    }    /**     * 模糊查询页面     *     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam) {        return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     *     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam) {        return super.findLikeList(queryParam);    }    /**     * 唯一查询     *     * @param     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one() {        QueryParam queryParam = new QueryParam();        queryParam.put("userID",IJobSecurityUtils.getLoginUserId());        return super.one(queryParam);    }    /**     * 唯一查询通过ID     *     * @param id     * @return Result     */    @RequestMapping(value = "/get/{id}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(@PathVariable("id") String id) {        Result result = super.get(id);        Resume data = (Resume) result.getData();        QueryParam queryParam = new QueryParam();        try {            Attachment attachment = IJobSecurityUtils.getLoginUser().getAttachment();            data.setAttachment(attachment);            queryParam.put("resumeID", data.getId());            queryParam.put("isDeleted", false);            data.setImgPath(IJobSecurityUtils.getLoginUser().getWeixin().getHeadimgurl());            data.setEducationalList(educationalService.<Educational>findList(queryParam));        } catch (Exception e) {            result.put("500", "数据异常！");            e.printStackTrace();        }        return result;    }    /**     * 查询该简历下的所有信息     *     * @param id     * @return Result     */    @RequestMapping(value = "/getMyResumeAllInfo", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getMyResumeAllInfo(String id) {        Result result = new Result();        try {            Resume resume = resumeService.getMyResumeAllInfo(id);            result.setData(resume);        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "不存在该简历");        }        return result;    }    /**     * 进行简历模糊检索     *     * @param keyword     * @return     */    @RequestMapping(value = "/personLikeSearch", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result personLikeSearch(String keyword) {        Result result = new Result();        try {            if ("男".equals(keyword) || "nan".equals(keyword)) {                keyword = "1";            } else if ("nv".equals(keyword) || "女".equals(keyword)) {                keyword = "2";            }            Map map = new HashMap();            map.put("keyword", keyword);            map.put("pageSize", 10);            map.put("startIndex", 0);            List<Resume> resumeList = resumeService.personLikeSearch(map);            result.setData(resumeList);        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "未找到该类型人才");        }        return result;    }    /**     * 人才筛选     *     * @param map     * @return     */    @RequestMapping(value = "/personSearch", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result personSearch(@RequestParam Map map) {        Result result = new Result();        try {            String sex = (String) map.get("sex");            if ("0".equals(sex))                map.put("sex", "%%");            List<Map> personList = resumeService.personSearch(map);            for (Map personMap : personList) {                List<Map> typeList = resumeService.findTypeNameWithUserID((String) personMap.get("userID"));                personMap.put("huntingTypeList", typeList);            }            result.setData(personList);        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "对不起，未找到您需要的人才。");        }        return result;    }    /**     * 修改默认状态     *     * @param resume 简历对象     * @return 操作结果对象     */    @RequestMapping(value = "/h5/mine/updateDefault", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result updateDefault(Resume resume) {        Result result = new Result();        try {            resumeService.updateWithUserID(IJobSecurityUtils.getLoginUserId());            resumeService.update(resume);        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", e.getMessage());        }        return result;    }    @RequestMapping(value = "/findForPreview/{id}", method = RequestMethod.GET)    @ResponseBody    public Result add_preview(@PathVariable String id) {        Result result = new Result();        HashMap<String, Object> map = new HashMap<>();        try {            Resume resume = resumeService.get(id);            QueryParam queryParam = new QueryParam();            queryParam.put("resumeID", id);            queryParam.put("isDeleted", false);            resume.setEducationalList(educationalService.<Educational>findList(queryParam));            resume.setWorkexperienceList(workexperienceService.<Workexperience>findList(queryParam));            resume.setDocumentList(documentService.<Document>findList(queryParam));            Attachment attachment = attachmentService.get(resume.getResumeHeadImg());            if (attachment != null) {                resume.setImgPath(attachment.getAbsolutelyPath());            }            User user = IJobSecurityUtils.getLoginUser();           /* if (user.getBirthday() != null) {                Calendar instance = Calendar.getInstance();                //当前年份                int current = instance.get(Calendar.YEAR);                instance.setTime(user.getBirthday());                //生日年份                int birthdayYear = instance.get(Calendar.YEAR);                //年龄                int userAge = current - birthdayYear;                map.put("userAge", userAge);            }*/            map.put("User", user);            map.put("Resume", resume);            result.listData(map);        } catch (Exception e) {            result.put("500", "查询数据异常！");            logger.error(e.getMessage());        }        return result;    }    /**     * 跳转到求职者的简历预览页面     *     * @return     */    @SearchRecode(type = SearchRecode.OpType.BROWSE_RESUME)    @RequestMapping(value = "/h5/zp/index/previewOtherUserResume/{id}", method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String toOtherUserResume(Model model, @PathVariable String id) {        try {            Resume resume = resumeService.one(new QueryParam("userID",id));            if(resume!=null){                model.addAttribute("id",resume.getId());            }            model.addAttribute("userID",id);        } catch (Exception e) {            e.printStackTrace();        }        return "/h5/zp/mandet";    }    /**     * 获得求职者的简历信息     *     * @param id     * @return     */    @RequestMapping(value = "/h5/zp/index/getResumeForRecruit/{id}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getResumeForRecruit(@PathVariable String id) {        Result result = new Result();        result.listData(resumeService.getResumeForRecruit(id));        return result;    }    /**     * 招聘者进行人才搜索     *     * @param pageParam     * @return     */    @SearchRecode(type = SearchRecode.OpType.SEARCH)    @RequestMapping(value = "/h5/zp/searchPersonResumePage")    @ResponseBody    public Result searchPersonResumePage(@RequestBody PageParam pageParam) {        Result result = new Result();        try {            if (pageParam.getCondition().get("education") == null||"".equals(pageParam.getCondition().get("education"))) {                pageParam.getCondition().put("education", 0);            }            if ("2".equals(pageParam.getCondition().get("sexRequirements"))) {                pageParam.put("sexRequirements", null);            }            if (pageParam.getCondition().get("search") == null || pageParam.getCondition().get("search") == "") {                pageParam.put("search", null);            }            if ("".equals(pageParam.getCondition().get("workTypeID"))) {                pageParam.put("workTypeID", null);            }            if(pageParam.getCondition().get("addrList")==null||((List) pageParam.getCondition().get("addrList")).size()==0)                pageParam.put("addrList", null);            else                pageParam.setIds((List<String>) pageParam.getCondition().get("addrList"));            return super.getObject2List(resumeService.searchPersonResumePage(pageParam));        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "服务器错误。");        }        return result;    }    /**     * 判断是否存在该标题！     *     * @param title     * @return     */    @RequestMapping(value = "/checkedTitle/{title}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result checkedTitle(@PathVariable String title) {        Result result = new Result();        QueryParam queryParam = new QueryParam("resumeTitle", title);        queryParam.put("userID", IJobSecurityUtils.getLoginUserId());        queryParam.put("isDeleted", false);        try {            Resume resume = resumeService.one(queryParam);            if (resume != null)                result.setData("true");            else                result.setData("false");        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500", "服务器繁忙，请稍后再试！");        }        return result;    }}