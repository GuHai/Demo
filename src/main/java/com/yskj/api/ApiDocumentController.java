package com.yskj.api;import com.yskj.controller.base.BaseController;import com.yskj.models.Document;import com.yskj.models.PageParam;import com.yskj.models.QueryParam;import com.yskj.service.DocumentService;import com.yskj.utils.Result;import com.yskj.utils.StringUtils;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;@Controller@RequestMapping(value = "/api/DocumentController")public class ApiDocumentController extends BaseController{	@Autowired	private DocumentService documentService;	private final static Logger logger = LoggerFactory.getLogger(ApiDocumentController.class);	public DocumentService getService() {         return this.documentService;     }	 /**     * 页面     * @return String     */    @RequiresPermissions("Document")    @RequestMapping(value = "",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model){        return "document";    }     /**     * 新增     * @param document     * @return Result     */    @RequestMapping(value = "/h5/mine/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(@RequestBody Document document){        Result result = new Result();        try {            if(document.getFocumentImg()!=null && StringUtils.isNotEmpty(document.getFocumentImg())){                document.setFocumentImg(document.getAttachment().getId());            }            documentService.persistenceAndChild(document);        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500",e.getMessage());        }        return result;    }    /**     * 删除     * @param document     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(Document document ){        return super.delete(document);    }     /**     * 修改     * @param document     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(@RequestBody Document document ){        Result result = new Result();        try {            documentService.persistenceAndChild(document);        } catch (Exception e) {            logger.error(e.getMessage());            result.put("500",e.getMessage());        }//        return super.update(document);        result.setData(document);        return result;    }    /**     * 查询页面     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){       return super.findPage(pageParam);    }     /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam ){        return super.findList(queryParam);    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id ){        return super.get(id);    }    @RequestMapping(value = "/myDocument/{id}", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result myPositionPage(@PathVariable String id ){        Result result=new Result();        try{            if("0".equals(id)){                result.listData(new Document());                return result;            }else {                result.listData(documentService.get(id));            }        }catch (Exception e){            logger.error(e.getMessage());        }        return result;    }}