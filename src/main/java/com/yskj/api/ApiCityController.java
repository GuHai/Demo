package com.yskj.api;import com.spatial4j.core.context.SpatialContext;import com.spatial4j.core.distance.DistanceUtils;import com.spatial4j.core.shape.Rectangle;import com.yskj.controller.base.BaseController;import com.yskj.models.*;import com.yskj.service.CityService;import com.yskj.service.MycityService;import com.yskj.service.MylocaltionService;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.IJobUtils;import com.yskj.utils.Result;import com.yskj.utils.StringUtils;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.UnsupportedEncodingException;import java.net.URLDecoder;@Controller@RequestMapping(value = "/api/CityController")public class ApiCityController extends BaseController{	@Autowired	private CityService cityService;	@Autowired    private MycityService mycityService;	@Autowired    private MylocaltionService mylocaltionService;	private final static Logger logger = LoggerFactory.getLogger(ApiCityController.class);	 public CityService getService() {         return this.cityService;     }	 /**     * 页面     * @return String     */    @RequiresPermissions("City")    @RequestMapping(value = "",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model){        return "city";    }     /**     *新增     * @param mylocaltion     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(Mylocaltion mylocaltion){        Result result = new Result();        QueryParam queryParam = new QueryParam();        try {            //获取市id和区id 然后保存我的位置信息            queryParam.put("cityName",mylocaltion.getCityName());            City city1 = cityService.one(queryParam);            mylocaltion.setCityID(city1.getId());            queryParam.put("cityName", StringUtils.isNotEmpty(mylocaltion.getDistrictName())?mylocaltion.getDistrictName():mylocaltion.getCityName());            City city2 = cityService.one(queryParam);            mylocaltion.setDistrictID(city2.getId());            queryParam.clear();            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            Mylocaltion mylocaltion1 = mylocaltionService.one(queryParam);            if(mylocaltion1!=null){                mylocaltion.setVersion(mylocaltion1.getVersion());                mylocaltion.setId(mylocaltion1.getId());            }            mylocaltion.setUserID(IJobSecurityUtils.getLoginUserId());            mylocaltionService.persistence(mylocaltion);            IJobSecurityUtils.getLoginUser().setMylocaltion(mylocaltion);            //新增城市            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            queryParam.put("cityID",mylocaltion.getCityID());            Mycity mycity = mycityService.mapOne(queryParam);            if(mycity==null){                mycity = new Mycity();                mycity.setCityID(mylocaltion.getCityID());                mycity.setUserID(IJobSecurityUtils.getLoginUserId());                mycityService.add(mycity);                mycity = mycityService.mapOne(queryParam);            }            mycity.setMylocaltion(mylocaltion);            result.setData(mycity);        } catch (Exception e) {            logger.error(e.getMessage());            result.error(e.getMessage());        }        return result;    }    /**     * 查询我的位置     * @return Result     */    @RequestMapping(value = "/getMylocaltion", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getMylocaltion(){        QueryParam queryParam = new QueryParam();        queryParam.put("userID",IJobSecurityUtils.getLoginUserId());        try {            Mylocaltion mylocaltion  = mylocaltionService.one(queryParam);            return super.getObject2List(mylocaltion);        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    /**     * 删除     * @param city     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(City city ){        return super.delete(city);    }     /**     * 修改     * @param city     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(City city ){        return super.update(city);    }    /**     * 查询页面     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){       return super.findPage(pageParam);    }     /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam ){        return super.findList2List(queryParam);    }    /**     * 查询集合     * @param     * @return Result     */    @RequestMapping(value = "/getMyCityList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getMyCityList( ){        Result result = new Result();        QueryParam queryParam = new QueryParam();        queryParam.put("userID", IJobSecurityUtils.getLoginUserId());        try {            result.listData(mycityService.findList(queryParam));        } catch (Exception e) {            e.printStackTrace();            logger.error(e.getMessage());            result.error("获取失败");        }        return result;    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id ){        return super.get(id);    }    /**     * 唯一查询通过ID     * @param name     * @return Result     */    @RequestMapping(value = "/matching/{name}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result matching(@PathVariable  String name ){        try {            name = URLDecoder.decode(name,"utf-8");        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        Result result = new Result();        QueryParam queryParam = new QueryParam();        queryParam.put("cityName",name);        if(name.length()>11){            name = IJobUtils.getDistrictByAddr(name);            queryParam.put("cityType",3);            queryParam.put("cityName",name);        }        try {            City city = cityService.one(queryParam);            if(city==null){                name = IJobUtils.getDistrictByAddr(name);                queryParam.put("cityType",3);                queryParam.put("cityName",name);                city = cityService.one(queryParam);            }            result.setData(city);        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    /**     * 唯一查询通过ID     * @param addr     * @return Result     */    @RequestMapping(value = "/matchingAddr/{addr}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result matchingAddr(@PathVariable  String addr ){        String name = IJobUtils.getDistrictByAddr(addr);        QueryParam queryParam = new QueryParam();        queryParam.put("cityName",name);        queryParam.put("cityType",3);        return super.one(queryParam);    }    @RequestMapping(value = "/cityList/{lng}/{lat}/{radius}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result cityList(@PathVariable  String lng , @PathVariable String lat,@PathVariable  Integer radius ){        QueryParam queryParam = new QueryParam();        SpatialContext geo = SpatialContext.GEO;        Rectangle rectangle = geo.getDistCalc().calcBoxByDistFromPt(                geo.makePoint(Double.parseDouble(lng), Double.parseDouble(lat)), radius * DistanceUtils.KM_TO_DEG, geo, null);        queryParam.put("minLng",rectangle.getMinX());        queryParam.put("maxLng",rectangle.getMaxX());        queryParam.put("minLat",rectangle.getMinY());        queryParam.put("maxLat",rectangle.getMaxY());//        queryParam.put("cityType",3);        return super.findList2List(queryParam);    }    /**     * 查询集合     * @param     * @return Result     */    @RequestMapping(value = "/getMyCityRegion/{cityID}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getMyCityRegion( @PathVariable String cityID){        Result result = new Result();        QueryParam queryParam = new QueryParam();        queryParam.put("cityID",cityID);        try {            result.listData(cityService.getMyCityRegion(queryParam));        } catch (Exception e) {            e.printStackTrace();            logger.error(e.getMessage());            result.error("获取失败");        }        return result;    }}