package com.yskj.api;import com.spatial4j.core.context.SpatialContext;import com.spatial4j.core.distance.DistanceUtils;import com.spatial4j.core.shape.Rectangle;import com.yskj.aop.SearchRecode;import com.yskj.controller.base.BaseController;import com.yskj.models.*;import com.yskj.models.auth.User;import com.yskj.redis.RedisUtil;import com.yskj.service.*;import com.yskj.service.auth.UserService;import com.yskj.service.base.DictCacheService;import com.yskj.service.base.RedisCacheService;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.Result;import com.yskj.utils.StringUtils;import com.yskj.utils.UUIDGenerator;import com.yskj.vo.IntePerson;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.apache.shiro.util.CollectionUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.propertyeditors.CustomDateEditor;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.WebDataBinder;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletRequest;import java.io.File;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.*;@Controller@RequestMapping(value = "/api/PositionController")public class ApiPositionController extends BaseController{	@Autowired	private PositionService positionService;	@Autowired    private CityService cityService;    @Autowired    private LocaltioninfoService localtioninfoService;	@Autowired    private InformationService informationService;	@Autowired    private IntentiontypeService intentiontypeService;	@Autowired    private IntentionaddressService intentionaddressService;	@Autowired    private HuntingtypeService huntingtypeService;	@Autowired    private InterviewService interviewService;	@Autowired    private ResumeService resumeService;	@Autowired    private BeenrecruitedService beenrecruitedService;	@Autowired    private SigninService signinService;	@Autowired    private SettlementpersonService settlementpersonService;	@Autowired    private ApplySettlementService applySettlementService;	@Autowired    private WxorderService wxorderService;	@Autowired    private EnterpriseauthenService enterpriseauthenService ;	@Autowired    private AttentionService attentionService;	@Autowired    private BondtransactionService bondtransactionService;	@Autowired    private PersonalauthenService personalauthenService ;	@Autowired    private UserService userService;	@Autowired    private LabelService labelService ;	@Autowired    private EnterpriseVIPService enterpriseVIPService ;	@Autowired    private WeChatService weChatService;	@Autowired    private GrouplistService grouplistService ;	@Autowired    private ForwardService forwardService ;	@Autowired    private IndemnityService indemnityService;	@Autowired    private JumpService jumpService;	@Autowired    private WorkNumberService workNumberService;	@Autowired    private WorkPositionService workPositionService ;	@Autowired    private WorkListService workListService;    @Autowired    private RedisCacheService redisCacheService;	private final static Logger logger = LoggerFactory.getLogger(ApiPositionController.class);	 public PositionService getService() {         return this.positionService;     }    /**     * 页面     * @return String     */    @RequiresPermissions("Position")    @RequestMapping(value = "",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model){        return "position";    }    @SearchRecode(type = SearchRecode.OpType.BROWSE_POSITION)    @RequestMapping(value = "/detailPathId/{id}",method = RequestMethod.GET,  produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result detailPathId( @PathVariable String id ) {        Result result = new Result();        try {            Position position = positionService.get(id);            Localtioninfo localtioninfo = localtioninfoService.get(position.getWorkPalce());            position.setWorkPlace(localtioninfo);//工作地址            Localtioninfo aggregate  = localtioninfoService.get(position.getAggregate());            position.setGather(aggregate);//集合地址            Information publish = informationService.one(new QueryParam("userID",position.getUserID()));            position.setPublish(publish);//发布对象            Huntingtype huntingtype = huntingtypeService.get(position.getWorkTypeID());            position.setHuntingtype(huntingtype);            if(StringUtils.isNotEmpty(position.getInterview())){//获取面试地址                Interview interview = interviewService.get(position.getInterview());                position.setInterviewAddr(interview);            }            if(StringUtils.isNotEmpty(position.getTrain())){//获取培训地址                Interview train = interviewService.get(position.getTrain());                position.setTrainAddr(train);            }            QueryParam queryParam  = new QueryParam();            queryParam.put("isDefault",1);            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            Resume resume  = resumeService.one(queryParam);            position.setDefaultResume(resume);            queryParam.clear();            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            queryParam.put("refID",position.getId());            queryParam.put("status",3);            Wxorder wxorder = wxorderService.one(queryParam);            position.setWxorder(wxorder);            result.listData(position);        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    @RequestMapping(value = "/jobDetailPathId/{distance}/{id}/{showstate}",method = RequestMethod.GET,  produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result jobDetailPathId( @PathVariable String id ,@PathVariable Double distance,@PathVariable Integer showstate) {        Result result = new Result();        try {            //基本信息            Beenrecruited beenrecruited = beenrecruitedService.get(id);            Position position = positionService.one(new QueryParam("id",beenrecruited.getPositionID()));            Huntingtype huntingtype = huntingtypeService.get(position.getWorkTypeID());            position.setHuntingtype(huntingtype);            QueryParam queryParam  = new QueryParam();            if(showstate<=3){                //头部信息                Localtioninfo localtioninfo = localtioninfoService.get(position.getWorkPalce());                position.setWorkPlace(localtioninfo);//工作地址                Localtioninfo aggregate  = localtioninfoService.get(position.getAggregate());                position.setGather(aggregate);//集合地址                Information publish = informationService.one(new QueryParam("userID",position.getUserID()));                position.setPublish(publish);//发布对象                //生成状态时间集合                beenrecruited.generalStatusList();                position.setBeenrecruited(beenrecruited);                //保证金是否退回信息                queryParam.clear();                queryParam.put("userID",IJobSecurityUtils.getLoginUserId());                queryParam.put("positionID",position.getId());                queryParam.setOrderByClause(" order by b.createTime desc ");                if(position.getLiquidatedDamages()!=null && position.getLiquidatedDamages().compareTo(BigDecimal.ZERO)>0){                    Bondtransaction bondtransaction =  bondtransactionService.one(queryParam);                    if(bondtransaction!=null) {                        if (bondtransaction.getIsReturn()) {                            position.setBondStatus("已退款");                        } else {                            position.setBondStatus("未退款");                        }                    }                }else{                    position.setBondStatus("无需退款");                }                position.getWorkPlace().setDistance(distance);            }           //签到信息            if(showstate==3 || showstate==2){                queryParam.clear();                queryParam.put("userID",IJobSecurityUtils.getLoginUserId());                queryParam.put("positionID",position.getId());                queryParam.setOrderByClause(" order by s.createTime desc ");                Signin signin = signinService.one(queryParam);                position.setSignin(signin);            }            //结算信息            if(showstate>3) {                queryParam.clear();                queryParam.put("userID", IJobSecurityUtils.getLoginUserId());                queryParam.put("positionID", position.getId());                List<Signin> signins = signinService.findList(queryParam);                position.setSignins(signins);            }            result.listData(position);        } catch (Exception e) {            e.printStackTrace();        }        return result;    }    private Result detailFirstQuery(String id)throws Exception{        Result result = new Result() ;        boolean isAattention = true;//是否关注        QueryParam queryParam = new QueryParam();        queryParam.put("id",id);        queryParam.put("open",2);        Position position  = positionService.one(queryParam);        Localtioninfo localtioninfo = localtioninfoService.get(position.getWorkPalce());        position.setWorkPlace(localtioninfo);//工作地址        Localtioninfo aggregate  = localtioninfoService.get(position.getAggregate());        position.setGather(aggregate);//集合地址        Information publish = informationService.one(new QueryParam("userID",position.getUserID()));        position.setPublish(publish);//发布对象        Huntingtype huntingtype = huntingtypeService.get(position.getWorkTypeID());        position.setHuntingtype(huntingtype);        if(StringUtils.isNotEmpty(position.getInterview())){//获取面试地址            Interview interview = interviewService.get(position.getInterview());            position.setInterviewAddr(interview);        }        if(StringUtils.isNotEmpty(position.getTrain())){//获取培训地址            Interview train = interviewService.get(position.getTrain());            position.setTrainAddr(train);        }        queryParam.clear();        queryParam.put("userID",position.getUserID());        queryParam.put("concernID",IJobSecurityUtils.getLoginUserId());        queryParam.put("idDeleted",0);        Attention attention = attentionService.one(queryParam);        Map<String, Object> map = new HashMap<String, Object>();        queryParam.clear();        queryParam.put("id",position.getUserID());        User user = userService.one(queryParam);        if(user!=null){            if(user.getAttachment()!=null&&StringUtils.isNotEmpty(user.getAttachment().getAbsolutelyPath())){                user.setImgPath("/ijob"+DictCacheService.UploadUrl+ File.separator+user.getAttachment().getAbsolutelyPath());            }else{                user.setImgPath(user.getWeixin().getHeadimgurl());            }            position.setPositionUser(user);        }        if (position.getSexRequirements()==null){            position.setSexRequirements(2);        }        map.put("position",position);        if (attention == null){            isAattention = false;        }        //有多少个职位        queryParam.clear();        queryParam.put("userID",position.getUserID());        queryParam.put("isDeleted",false);        queryParam.put("open",2);        queryParam.put("type",0);        Long count = positionService.count(queryParam);        map.put("count",count);        //是否关注        map.put("isAattention",isAattention);        queryParam.clear();        queryParam.put("positionID",id);        map.put("labelList",labelService.findList(queryParam));        result.listData(map);        return result;    }    /**     * 详情页面     * @return String     */    @SearchRecode(type = SearchRecode.OpType.BROWSE_POSITION)    @RequestMapping(value = "/detail/{id}",method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result detail(Model model, @PathVariable String id){        Result existresult = null;        try {            existresult = RedisUtil.hget(Position.class.getSimpleName(),id);        } catch (Exception e) {            e.printStackTrace();        }        if(existresult==null){            try {                existresult =  detailFirstQuery(id);            } catch (Exception e) {                e.printStackTrace();            }            if(existresult==null){                existresult = new Result();                existresult.error("数据已被删除");            }else{                RedisUtil.hset(Position.class.getSimpleName(),id,existresult);            }        }        return existresult;    }    @RequestMapping(value = "/chatPosition/{id}",method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Map<String,Object> chatPosition(Model model, @PathVariable String id){        Map<String,Object> positionInfo = null;        try{            positionInfo = RedisUtil.hget("PositionSimpleInfo",id);        }catch (Exception e){        }        if(positionInfo==null){            positionInfo = positionService.chatPosition(id);            RedisUtil.hset("PositionSimpleInfo",id,positionInfo);        }        return positionInfo;    }     /**     *新增     * @param position     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(Position position ){        return super.add(position);    }    /**     * 删除     * @param position     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(@RequestBody Position position ){        Result result = new Result();        try {            positionService.deletePosition(position);        } catch (Exception e) {            e.printStackTrace();            result.error("删除职位失败");        }        return result;    }    @RequestMapping(value = "/checkClose/{id}/{open}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result checkClose(@PathVariable String id,@PathVariable Integer open){        Result result = new Result();        try {            if(open==3){                boolean flag = positionService.checkClose(id);                if(!flag){                    result.error("该职位下有求职者还未结算，不可以关闭");                }            }        } catch (Exception e) {            e.printStackTrace();            result.error("网路错误");        }        return result;    }    /**     * 修改     * @param position     * @return Result     */    @RequestMapping(value = "/addPositionPerson", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result addPositionPerson(@RequestBody Position position ){        try {            positionService.update(position);            return new Result();        }catch (Exception e){            logger.error(e.getMessage());            return new Result("500","服务器繁忙");        }    }     /**     * 修改     * @param position     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(@RequestBody Position position ){        Result result = new Result();        Position newPosition = new Position();        if ("1".equals(position.getId()) || "0".equals(position.getId())){//当position id 不正确的时候            newPosition = (Position) IJobSecurityUtils.getSession().getAttribute("Position");        }else{//当position id 是正确的时候            if(4==position.getOpen()){ //彻底关闭时候，退保证金                try {                    /*Position positionTemp = positionService.get(position.getId());                    positionTemp.setOpen(12);                    positionTemp.setType(true);                    positionTemp.setId(null);                    positionService.persistenceAndChild(positionTemp);*/                    positionService.exitPosition(position);                } catch (Exception e) {                    e.printStackTrace();                    result.error(e.getMessage());                    return result;                }            }else{                result = super.update(position);                newPosition = positionService.getOnePositionTemplate(new QueryParam("id",position.getId()));                try {                    Localtioninfo localtioninfo ;                    Interview interview ;                    if (position.getAggregate()!=null){                        localtioninfo= localtioninfoService.get(position.getAggregate());                        position.setGather(localtioninfo);                    }if (position.getWorkPalce()!=null){                        localtioninfo = localtioninfoService.get(position.getWorkPalce());                        position.setWorkPlace(localtioninfo);                    }if (position.getInterview()!=null){                        interview = interviewService.get(position.getInterview());                        position.setInterviewAddr(interview);                    }if (position.getTrainAddr()!=null){                        interview = interviewService.get(position.getTrain());                        position.setTrainAddr(interview);                    }                }catch (Exception e ){                    logger.error(e.getMessage());                }            }        }        if (position.getBaseTask()!= null && !"".equals(position.getBaseTask()) && !"0".equals(position.getBaseTask())){            newPosition.setBaseTask(position.getBaseTask());        }else if(position.getCommission()!= null && !"".equals(position.getCommission()) && !"0".equals(position.getCommission())){            newPosition.setCommission(position.getCommission());        }else if(position.getControlSleep()!= null && !"".equals(position.getControlSleep()) && !"0".equals(position.getControlSleep())){            newPosition.setControlSleep(position.getControlSleep());        }else if(position.getJobContent()!= null && !"".equals(position.getJobContent()) && !"0".equals(position.getJobContent())){            newPosition.setJobContent(position.getJobContent());        }else if(position.getJobRequirements()!= null && !"".equals(position.getJobRequirements()) && !"0".equals(position.getJobRequirements())){            newPosition.setJobRequirements(position.getJobRequirements());        }else if(position.getMatters()!= null && !"".equals(position.getMatters()) && !"0".equals(position.getMatters())){            newPosition.setMatters(position.getMatters());        }        IJobSecurityUtils.getSession().setAttribute("Position",newPosition);        return result;    }    /**     * 查询页面     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){//        String workTypeID = DictCacheService.getPosition((String)pageParam.getCondition().get("search"));        QueryParam queryParam = new QueryParam();        if(pageParam.getCondition().get("search")!=null){            queryParam.put("name",(String)pageParam.getCondition().get("search"));        }        try {            Huntingtype huntingtype = huntingtypeService.one(queryParam);            if(huntingtype!=null){                String workTypeID = huntingtype.getId();                if(StringUtils.isNotEmpty(workTypeID)){                    pageParam.put("workTypeID", workTypeID);                    pageParam.getCondition().remove("search");                }            }        } catch (Exception e) {            e.printStackTrace();        }        return super.findPage(pageParam);    }    @RequestMapping(value = "/myPositionPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result myPositionPage(@RequestBody PageParam pageParam ){        //查询我的求职意向        QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());        try {//            List<Intentionaddress> intentionaddresses = intentionaddressService.findList(queryParam);            SpatialContext geo = SpatialContext.GEO;            // 移动设备经纬度            double lon = Double.parseDouble(pageParam.getCondition().get("lng").toString());            double lat = Double.parseDouble(pageParam.getCondition().get("lat").toString());            int radius = StringUtils.isEmptyString(pageParam.getCondition().get("radius"))?10:Integer.parseInt(pageParam.getCondition().get("radius").toString());            List<String> intentiontypes  = intentiontypeService.findIds(queryParam,"htID");            if(StringUtils.isNotEmptyString(pageParam.getCondition().get("cityID"))){                queryParam.clear();                queryParam.put("cityType",3);                queryParam.put("parentID",pageParam.getCondition().get("cityID"));                List<String> cityIDs = cityService.findIds(queryParam,"id");                String cityIDsstr = "";                if(cityIDs.size()==0){                    cityIDsstr  = "\""+pageParam.getCondition().get("cityID")+"\"";                }else{                    cityIDs.add(pageParam.getCondition().get("cityID").toString());                    cityIDsstr = "'"+String.join("','", cityIDs)+"'";                }                pageParam.put("cityIDs",cityIDsstr);            }            if(!CollectionUtils.isEmpty(intentiontypes)){                if(pageParam.getCondition().get("workTypeID")==null){                    pageParam.in("workTypeID",intentiontypes);                }else if(StringUtils.isEmptyString(pageParam.getCondition().get("workTypeID"))){                    pageParam.put("workTypeID",null);                }            }else{                intentiontypes.add("随便写一个ID");                pageParam.in("workTypeID",intentiontypes);            }            if(StringUtils.isNotEmptyString(pageParam.getCondition().get("orderby"))){                String orderby =  (String)pageParam.getCondition().get("orderby");                if("hot".equals(orderby)){                    pageParam.setOrderByClause(" order by b.version desc ");                }else if("distance".equals(orderby)){                    Rectangle rectangle  = geo.getDistCalc().calcBoxByDistFromPt(                            geo.makePoint(lon,lat), radius * DistanceUtils.KM_TO_DEG, geo, null);                    pageParam.put("minLng",rectangle.getMinX());                    pageParam.put("maxLng",rectangle.getMaxX());                    pageParam.put("minLat",rectangle.getMinY());                    pageParam.put("maxLat",rectangle.getMaxY());                    List<Position> list = positionService.mapByDistinct(pageParam);                    for(Position position : list){                        double distance = geo.calcDistance(geo.makePoint(lon, lat),geo.makePoint(position.getWorkPlace().getLongitude().doubleValue(), position.getWorkPlace().getLatitude().doubleValue()))                                * DistanceUtils.DEG_TO_KM;                        position.getWorkPlace().setDistance(distance);                    }                    Collections.sort(list, new Comparator<Position>() {                        public int compare(Position p1, Position p2) {                            return p1.getWorkPlace().getDistance().compareTo(p2.getWorkPlace().getDistance());                        }                    });                    pageParam.paging(list);                    return getObject2List(pageParam);                }else{                    pageParam.setOrderByClause(" order by p."+orderby+" desc ");                }            }            if(StringUtils.isEmptyString(pageParam.getCondition().get("workTypeID"))){                pageParam.getCondition().put("workTypeID",null);            }            positionService.simpleMapPage(pageParam);            for(Map position : (List<Map>)pageParam.getList()){                double distance = geo.calcDistance(geo.makePoint(lon, lat),geo.makePoint(Double.parseDouble(position.get("longitude").toString()), Double.parseDouble(position.get("latitude").toString())))                        * DistanceUtils.DEG_TO_KM;//                position.getWorkPlace().setDistance(distance);                position.put("distance",distance);            }            if(StringUtils.isNotEmptyString(pageParam.getCondition().get("notin")) && "in".equals(pageParam.getCondition().get("notin").toString())){                if(pageParam.getCurrentPage()==pageParam.getTotalPage()||pageParam.getTotalPage()==0){                    pageParam.setTotalPage(10000);                }            }            if(StringUtils.isEmptyString(pageParam.getCondition().get("between"))&&StringUtils.isNotEmptyString(pageParam.getCondition().get("notin")) && "notin".equals(pageParam.getCondition().get("notin").toString())){                if(pageParam.getCurrentPage()==pageParam.getTotalPage()||pageParam.getTotalPage()==0){                    pageParam.setTotalPage(20000);                }            }            return super.getObject2List(pageParam);        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    @RequestMapping(value = "/myAttentionPositionPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result myAttentionPositionPage(@RequestBody PageParam pageParam ){        //我的关注列表        QueryParam queryParam = new QueryParam("concernID",IJobSecurityUtils.getLoginUserId());        queryParam.put("isDeleted",false);        pageParam.setOrderByClause(" order by p.publishTime desc ");        pageParam.put("userID",IJobSecurityUtils.getLoginUserId());        try {            SpatialContext geo = SpatialContext.GEO;            // 移动设备经纬度            double lon = Double.parseDouble(pageParam.getCondition().get("lng").toString());            double lat = Double.parseDouble(pageParam.getCondition().get("lat").toString());            if(StringUtils.isEmptyString(pageParam.getCondition().get("Recommend"))){                List<String> conids  =   attentionService.findIds(queryParam,"userID");                pageParam.in("userID",conids);                positionService.attentionPage(pageParam);            }else {                pageParam.getCondition().put("userID",null);                pageParam.setOrderByClause(" order by p.createTime desc ");                positionService.attentionPage1(pageParam);            }            for(Position position : (List<Position>)pageParam.getList()){                if(position.getWorkPlace()==null){                    Localtioninfo localtioninfo  =  new Localtioninfo() ;                    position.setWorkPlace(localtioninfo);                }                if(position.getWorkPlace().getLatitude()==null){                    position.getWorkPlace().setLongitude(BigDecimal.ZERO);                    position.getWorkPlace().setLatitude(BigDecimal.ZERO);                }                double distance = geo.calcDistance(geo.makePoint(lon, lat),geo.makePoint(position.getWorkPlace().getLongitude().doubleValue(), position.getWorkPlace().getLatitude().doubleValue()))                        * DistanceUtils.DEG_TO_KM;                position.getWorkPlace().setDistance(distance);            }            return super.getObject2List(pageParam);        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    @RequestMapping(value = "/searchPositionPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result searchPositionPage(@RequestBody PageParam pageParam ){        Result result = new Result();        try {            if(StringUtils.isNotEmptyString(pageParam.getCondition().get("orderby"))){                String orderby =  (String)pageParam.getCondition().get("orderby");                if("hot".equals(orderby)){                    pageParam.setOrderByClause(" order by b.version desc ");                }else{                    pageParam.setOrderByClause(" order by p."+orderby+" desc ");                }            }            pageParam  =  this.positionService.findPage(pageParam);            if(!CollectionUtils.isEmpty(pageParam.getList())){                for(Position position : (List<Position>)pageParam.getList()){                    Huntingtype huntingtype = huntingtypeService.get(position.getWorkTypeID());                    position.setHuntingtype(huntingtype);                    Localtioninfo workplace = localtioninfoService.get(position.getWorkPalce());                    position.setWorkPlace(workplace);                    QueryParam queryParam  = new QueryParam("userID",position.getUserID());                    Information publish = informationService.one(queryParam);                    position.setPublish(publish);                }            }        } catch (Exception e) {            logger.error(e.getMessage());        }        return super.getObject2List(pageParam);    }    /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam ){        return super.findList(queryParam);    }    /**     * 查询集合(适用于template)     * @return Result     */    @RequestMapping(value = "/findList2List", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList2List(QueryParam queryParam){        return super.findList2List(queryParam);    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/getSimplePosition/{id}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getSimplePosition(@PathVariable String id){        return super.get(id);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id ){        Result result = new Result();        try{            Position position = getService().get(id);            if(position!=null){                Localtioninfo workAddr =  localtioninfoService.get(position.getWorkPalce());                position.setWorkPlace(workAddr);                Localtioninfo gather = localtioninfoService.get(position.getAggregate());                position.setGather(gather);                QueryParam queryParam = new QueryParam();                queryParam.put("userID",position.getUserID());                Information publish = informationService.one(queryParam);                position.setPublish(publish);                result.setData(position);            }else{                result.setMsg("查询不到该职位，可能已经下架");            }        }catch (Exception e){            logger.error(e.getMessage());        }        return result;    }    @RequestMapping(value = "/getSimple/{id}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getSimple(@PathVariable  String id ){        Result result = new Result();        try {            Position position = getService().get(id);            result.setData(position);        } catch (Exception e) {            e.printStackTrace();            result.error("获取数据失败");        }        return result;    }    @RequestMapping(value = "/addJump", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result addJump(@RequestBody Jump jump){        Result result = new Result();        try {            jumpService.add(jump);            result.setData(jump);        } catch (Exception e) {            e.printStackTrace();            result.error("操作失败");        }        return result;    }    /**     * 唯一查询通过ID     * @return Result     */    @RequestMapping(value = "/getIntention", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getIntention(){        String userId = IJobSecurityUtils.getLoginUserId();        Result result = new Result();        Intention intention = new Intention();        QueryParam queryParam = new QueryParam();        queryParam.put("userID",userId);        try {            List<String> types = intentiontypeService.findIds(queryParam,"HTID");            QueryParam queryParam1= new QueryParam();            queryParam1.in("id",types);            List<Huntingtype> huntingtypes = huntingtypeService.findList(queryParam1);            //intention.setHuntingtypeList(huntingtypes);        } catch (Exception e) {            logger.error(e.getMessage());        }        try {            List<String> address = intentionaddressService.findIds(queryParam,"cityID");            QueryParam queryParam2= new QueryParam();            queryParam2.in("id",address);            List<City> cities = cityService.findList(queryParam2);            //intention.setAddressList(cities);        } catch (Exception e) {            logger.error(e.getMessage());        }        result.setData(intention);        return result;    }    /**     * 获取保证金状态     * @param id     * @return Result     */    @RequestMapping(value = "/getBondState", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getBondState(String id ){        return super.get(id);    }    @RequestMapping(value = "/h5/mine/positionManage" ,method = RequestMethod.GET)    public String positionManage(){        return "/h5/zp/mine/positionManage";    }    /**     * 查询当前用户创建的职位     * @return     */    @RequestMapping(value = "/h5/mine/findMyPositionList",method = RequestMethod.GET)    @ResponseBody    public Result findMyPositionList(){        Result result = new Result();        QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());        List<String> openType = new ArrayList<String>(){{            add("1");            add("2");            add("3");            add("4");        }};        queryParam.put("type",0);        queryParam.in("open",openType);        queryParam.put("isDeleted",false);        try {            result.listData(positionService.findMyPositionList(queryParam));            IJobSecurityUtils.getSession().setAttribute("PositionTemp",null);        }catch (Exception e){            logger.error(e.getMessage());        }        return result;    }    /**     * 跳转到招聘者职位编辑页面     * @return     */    @RequestMapping(value = "/toOnePositionPage/{id}",method = RequestMethod.GET)    public String toOnePositionPage(@PathVariable String id,HttpServletRequest request){        request.setAttribute("positionID",id);        return "h5/zp/mine/postJob2";    }    @RequestMapping(value = "/h5/mine/getOnePositionPage/{id}",method = RequestMethod.GET)    @ResponseBody    public Result getOnePositionPage(@PathVariable String id){        Result result = new Result();        try {            Position position = new Position();            if (!"0".equals(id)){                 position = positionService.get(id);            }            result.listData(position);        }catch (Exception e){            logger.error(e.getMessage());        }        return result;    }    /**     * 获得当前用户所发布的职位     * @return     */    @RequestMapping(value = "/h5/index/zp/myReleasePosition",method = RequestMethod.POST)    @ResponseBody    public Result myReleasePosition(){        Result result = new Result();       /* List<String> list = new ArrayList<String>(){{            add("2");        }};*/        QueryParam queryParam = new QueryParam();        queryParam.in("open",CollectionUtils.asList("2".split(":")));        queryParam.put("type",0);        queryParam.put("userID", IJobSecurityUtils.getLoginUserId());        queryParam.setOrderByClause(" order by p.createTime desc ");        try{            IJobSecurityUtils.getSession().setAttribute("PositionTemp",null);            result.listData(positionService.findMyPositionList(queryParam));        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","数据异常");        }        return result;    }    /**     * 获得最有可能被当前用户录取的求职信息     * @return     */    @RequestMapping(value = "/h5/index/zp/mySeekerPage/{id}",method = RequestMethod.POST)    @ResponseBody    public Result mySeekerPage(@RequestBody PageParam pageParam,@PathVariable String id){        Result result = new Result();        try{            PageParam idspage = RedisUtil.ids2Page("Intentiontype",id,pageParam);            List<String> list  = idspage.getList();            if(!CollectionUtils.isEmpty(list)){                /*PageParam queryParam = new PageParam();                queryParam.setPageSize(pageParam.getPageSize());                queryParam.put("userID", "'"+String.join("','", list)+"'");                queryParam =  intentiontypeService.findIntePersonPage(queryParam);                idspage.setList(queryParam.getList());*/                List<IntePerson> personList =  RedisUtil.list(IntePerson.class,list);                idspage.setList(personList);                return super.getObject2List(idspage);            }else{                redisCacheService.readIntentionCache(new QueryParam("htID","'"+id+"'"));            }        }catch(Exception e){            logger.error(e.getMessage());            result.put("500","查询失败："+e.getMessage());        }        return result;    }    /**     * 获得其他求职者的求职信息     * @return     */    @RequestMapping(value = "/h5/index/zp/findOtherResumePage/{id}",method = RequestMethod.POST)    @ResponseBody    public Result findOtherResume(@RequestBody PageParam pageParam,@PathVariable String id){        Result result = new Result();        try{            if (!"0".equals(id)){                pageParam.put("huntingtypeID",id);            }            pageParam.put("userID",IJobSecurityUtils.getLoginUserId());            pageParam.in("userIDList",resumeService.mySeekerPageOfUserID(pageParam));            return super.getObject2List(resumeService.findOtherResumePage(pageParam));        }catch(Exception e){            logger.error(e.getMessage());            result.put("500","查询失败："+e.getMessage());        }        return result;    }    @RequestMapping(value = "/zp/toMyPositionInfo",method = RequestMethod.GET,produces = {"text/html; charset=utf-8"})    public String toMyPositionInfo(){        return "/h5/zp/myjob";    }    @RequestMapping(value = "/zp/getMyPositionForMeOfZP",method = RequestMethod.POST,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getMyPositionForMeOfZP(@RequestBody PageParam pageParam){        Result result = new Result();        try{            pageParam.put("open",2);            pageParam.put("type",0);            pageParam.put("isDeleted",false);            pageParam.put("userID",IJobSecurityUtils.getLoginUserId());            return super.getObject2List(positionService.getMyPositionForMeOfZPPage(pageParam));        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500","服务器数据异常，请联系客服部！");        }        return result;    }    /**     * 跳转到待录取页面     * @return     */    @RequestMapping(value = "/zp/toMyPositionEnroll" ,method = RequestMethod.GET,produces = {"text/html; charset=utf-8"})    public String toMyPositionEnroll(){        return "/h5/zp/myjob_enroll";    }    /**     * 获取待录取的职位以及求职者信息     * @return     */    @RequestMapping(value = "/zp/getPositionOfStateIsNoSure" ,method = RequestMethod.POST,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getPositionOfStateIsNoSure(){        Result result = new Result();        try {            result.listData(beenrecruitedService.getPositionOfStateIsNoSure(getZPPositionInfoQuery(1)));        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500","数据异常，请尽快联系客服！");        }        return result;    }    /**     * 跳转到待到岗页面     * @return     */    @RequestMapping(value = "/zp/toMyPositionDuty" ,method = RequestMethod.GET ,produces = {"text/html; charset=utf-8"})    public String toMyPositionDuty(){        return "/h5/zp/myjob_duty";    }    /**     * 获得职位的待到岗人员信息     * @return     */    @RequestMapping(value = "/zp/getPositionOfStateIsWaitToPosition" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getPositionOfStateIsWaitToPosition(){        Result result = new Result();        try {            result.listData(beenrecruitedService.getPositionOfStateIsWaitToPosition(getZPPositionInfoQuery(3)));        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500","数据异常，请尽快联系客服！");        }        return result;    }    /**     * 跳转到待结算页面     * @return     */    @RequestMapping(value = "/zp/toMyPositionMyjob_close",method = RequestMethod.GET ,produces = {"text/html; charset=utf-8"})    public String toMyPositionMyjob_close(){        return "/h5/zp/myjob_close";    }    /**     * 获得当前职位下已结算人员的信息     * @return     */    @RequestMapping(value = "/zp/getUserPositionWaitApplySettlementInfo/{state}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getUserPositionWaitApplySettlementInfo(@PathVariable Integer state){        Result result = new Result();        try {//            result.listData(applySettlementService.getUserPositionWaitApplySettlementInfo(getZPPositionInfoQuery(0)));            QueryParam queryParam = getZPPositionInfoQuery(state);            result.listData(applySettlementService.signmapList(queryParam));        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500","参数错误，请联系客服解决！");        }        return result;    }    /**     * 获得已结算的历史职位的信息     * @return     */    @RequestMapping(value = "/zp/historyPosition/{id}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result historyPosition(@PathVariable String id){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam();            queryParam.put("type",0);            if("0".equals(id)){                queryParam.put("userID",IJobSecurityUtils.getLoginUserId());                queryParam.put("open",null);                queryParam.put("isDeleted",null);                queryParam.put("state",4);                List<String> ids = new ArrayList<>();                ids.add("3");                ids.add("4");                queryParam.setIds(ids);            }else{                queryParam.put("userID",id);                queryParam.put("isDeleted",false);;                List<String> ids = new ArrayList<>();                ids.add("3");                ids.add("4");                queryParam.setIds(ids);            }            result.listData(applySettlementService.historyPosition(queryParam));        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500","参数错误，请联系客服解决！");        }        return result;    }    /**     * 我的签到详细列表，结算里面     * @return     */    @RequestMapping(value = "/zp/simpleSignList",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result simpleSignList(@RequestBody QueryParam queryParam){        Result result = new Result();        try {            queryParam.put("state",2);            List<Position> positionList = applySettlementService.simpleSignList(queryParam);            for (Signin signin : positionList.get(0).getSignins()){                queryParam.put("userID",signin.getUserID());                Map map = forwardService.getRewardMoney(queryParam);                if(map != null ){                    signin.setRewardMap(map);                }            }            result.listData(positionList);        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500","参数错误，请联系客服解决！");        }        return result;    }    /**     * 跳转到待评价页面     * @return     */    @RequestMapping(value = "/zp/toMyPositionMyjob_ev" ,method = RequestMethod.GET ,produces = {"text/html; charset=utf-8"})    public String toMyPositionMyjob_ev(){        return "/h5/zp/myjob_ev";    }    /**     * 查询职位下待评价人员的数据     * @return 查询结果对象     */    @RequestMapping(value = "/zp/getUserPositionWaitEvaluateInfo/{id}/{reply}")    @ResponseBody    public Result getUserPositionWaitEvaluate(@PathVariable String id,@PathVariable String reply){        Result result = new Result();        QueryParam queryParam = getZPPositionInfoQuery(5);        try {            if ("0".equals(id)){                result.listData(beenrecruitedService.getPositionOfStateIsNoSure(queryParam));            }else{                queryParam.put("positionID",id);                queryParam.put("dismiss","anlywhere");                queryParam.put("reply",reply);                result.listData(beenrecruitedService.commentList(queryParam));            }        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","数据异常，请联系客服解决您当前出现的问题。");        }        return result;    }    private QueryParam getZPPositionInfoQuery(Integer state){        QueryParam queryParam = new QueryParam();        queryParam.put("open",2);        queryParam.put("type",0);        queryParam.put("isDeleted",false);        queryParam.put("userID",IJobSecurityUtils.getLoginUserId());        queryParam.put("state",state);        return queryParam;    }    /**     * 跳转到待确认页面     * @return     */    @RequestMapping(value = "/zp/toMyPositionmyjob_enrolldet/{id}" ,method = RequestMethod.GET,produces = {"text/html; charset=utf-8"})    public String toMyPositionmyjob_enrolldet(Model model,@PathVariable String id){ return "/h5/zp/myjob_enroll_det";}    /**     * 查询当前职位下待确认面试的人员的数据     * @return     */    @RequestMapping(value = "/zp/getPositionWait/{id}/{state}" ,method = RequestMethod.POST,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getPositionWait(@PathVariable String id,@PathVariable int state){        Result result = new Result();        QueryParam queryParam = getZPPositionInfoQuery(state);        queryParam.put("positionID",id);        try {            result.listData(beenrecruitedService.getPositionWait(queryParam));        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500","数据异常，请尽快联系客服！");        }        return result;    }    /**     * 获得当前职位下待结算与结算人员的信息     * @return     */    @RequestMapping(value = "/zp/getUserPositionWaitSettlementInfoAt/{id}/{state}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getUserPositionWaitSettlementInfoAt(@PathVariable String id,@PathVariable int state){        Result result = new Result();        QueryParam queryParam = getZPPositionInfoQuery(state);        queryParam.put("positionID",id);        try {            result.listData(settlementpersonService.getUserPositionWaitSettlementInfoAt(getZPPositionInfoQuery(state)));        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500","参数错误，请联系客服解决！");        }        return result;    }    @RequestMapping(value = "/h5/zp/getMyPositionTemplateList" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getMyPositionTemplateList(){        Result result = new Result();        try {            QueryParam queryParam = new QueryParam();            queryParam.put("isDeleted",false);            queryParam.put("type",1);            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            List<Position> positions = positionService.getMyPositionTemplateList(queryParam);            IJobSecurityUtils.getSession().setAttribute("PositionTemp",null);            result.listData(positions);        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500","参数错误，请联系客服解决！");        }        return result;    }    @InitBinder    public void initBinder(WebDataBinder binder) {        binder.registerCustomEditor(Date.class,                new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"), true));    }    /**     * 获得Position 模版数据     * @param id     * @param type     * @return     */    @RequestMapping(value = "/h5/zp/getTaskOrCommission/{id}/{type}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getTaskOrCommission(@PathVariable String id , @PathVariable String type){        Result result = new Result();        try {            Position position = positionService.getOnePositionTemplate(new QueryParam("id",id));            if(position == null){                position = (Position) IJobSecurityUtils.getSession().getAttribute("Position");            }            Map<String ,Object> map = new HashMap<String, Object>();            map.put("version",position.getVersion());            map.put("id",position.getId());            map.put("type",type);            if("0".equals(type)){                map.put("baseTask",position.getBaseTask());            }else if ("1".equals(type)){                map.put("commission",position.getCommission());            }else if ("2".equals(type)){                map.put("matters",position.getMatters());            }else if ("3".equals(type)){                if(position.getInterview()!=null){                    map.put("interview",interviewService.get(position.getInterview()));                }else{                    map.put("interview",new Interview());                }            }else if ("4".equals(type)){                if(position.getTrain()!=null){                    map.put("train",interviewService.get(position.getTrain()));                }else{                    map.put("train",new Interview());                }            }else if("6".equals(type)){                map.put("jobRequirements",position.getJobRequirements());            }else if("7".equals(type)){                map.put("jobContent",position.getJobContent());            }else if("8".equals(type)){                map.put("controlSleep",position.getControlSleep());            } else            {                result.put("510","你他妈居然改我的 URL 路径！！！");            }            result.listData(map);        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500","服务器繁忙，请稍后再试！");        }        return result ;    }    @RequestMapping(value = "/h5/zp/updateDefaultTemp" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result updateDefaultTemp(@RequestParam Map map){        Result result = new Result();        try {            if(map.get("oldDefId")!=null && map.get("oldDefVersion")!=null){                Position oldPosition = new Position();                oldPosition.setId(map.get("oldDefId").toString());                oldPosition.setVersion(Integer.parseInt((String)map.get("oldDefVersion")));                oldPosition.setOpen(12);                positionService.update(oldPosition);            }            Position newPosition = new Position();            newPosition.setId(map.get("newDefId").toString());            newPosition.setVersion(Integer.parseInt((String)map.get("newDefVersion")));            newPosition.setOpen(11);            positionService.update(newPosition);        }catch (Exception e ){            logger.error(e.getMessage());            result.put("500"," ，请联系客服解决！");        }        return result;    }    /**     * 招聘发布回调     * @param wxorderID     * @return Result     */    @RequestMapping(value = "/bondCallback/{wxorderID}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result bondCallback(@PathVariable String wxorderID ){        Result result = new Result();        //调用之前还是要检查一下，不能你说修改为已交保证金就交吧        Wxorder wxorder = null;        try {            wxorder = wxorderService.get(wxorderID);        } catch (Exception e) {            e.printStackTrace();        }        if(wxorder!=null){            if(wxorder.getStatus()==3){                Position position = null;                try {                    position =  positionService.bondCallback(wxorder);                } catch (Exception e) {                    e.printStackTrace();                    try {                        weChatService.refundOrder(wxorderID);                    } catch (Exception e1) {                        e1.printStackTrace();                    }                }                //推送给所有人                if(position.getOpen()==2 && Boolean.FALSE==position.getType()){ //如果是发布职位，则通知每个银                    positionService.noticeEverybody(position);                }            }else{                result.error("请缴纳保证金");            }        }else{            result.error("请缴纳保证金");        }        return result;    }    /**     * 求职者报名回调     * @param wxorderID     * @return Result     */    @RequestMapping(value = "/signUpCallback/{wxorderID}", method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result signUpCallback(@PathVariable String wxorderID ){        Result result = new Result();        try {            //调用之前还是要检查一下，不能你说修改为已交保证金就交吧            Wxorder wxorder = wxorderService.get(wxorderID);            if(wxorder!=null){                if(wxorder.getStatus()==3){                    signinService.signUpCallback(wxorder);                }else{                    result.error("请缴纳保证金");                }            }        } catch (Exception e) {            try {                weChatService.refundOrder(wxorderID);            } catch (Exception e1) {                e1.printStackTrace();            }            logger.error(e.getMessage());            result.error("报名回调失败，请联系管理员");        }        return result;    }    /**     * 求职者报名回调     * @param wxorderID     * @return Result     */    @RequestMapping(value = "/signUpCallbackJson/{wxorderID}",  method = RequestMethod.GET, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result signUpCallbackJson(@PathVariable String wxorderID ){        Result result = new Result();        result.setCode("202");        try {            //调用之前还是要检查一下，不能你说修改为已交保证金就交吧            Wxorder wxorder = wxorderService.get(wxorderID);            if(wxorder!=null){                if(wxorder.getStatus()==3){                    signinService.signUpCallback(wxorder);                    if(personalauthenService.signUpCondition()){//                        return "/h5/qz/myjob/my_part_time_job";                        result.setCode("201");                    }                }else if(wxorder.getStatus()==4){//                    return "/h5/qz/index/personalInform";                    result.setCode("202");                }else{//                    model.addAttribute("result","请缴纳保证金");//                    return "/h5/error";                    result.setCode("203");                    result.setMsg("请缴纳保证金");                }            }        } catch (Exception e) {            try {                weChatService.refundOrder(wxorderID);            } catch (Exception e1) {                e1.printStackTrace();            }            logger.error(e.getMessage());//            model.addAttribute("result","报名回调失败，请联系管理员");//            return "/h5/error";            result.setCode("203");            result.setMsg("报名回调失败，请联系管理员");        }        return result;    }    /**     * 求职者报名回调     * @param positionID     * @return Result     */    @RequestMapping(value = "/signUpCallbackNoPay/{positionID}",  method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String signUpCallbackNoPay(@PathVariable String positionID,Model model ){        try {            signinService.signUpCallbackNoPay(positionID);            if( personalauthenService.isVerified()){                return "/h5/qz/myjob/my_part_time_job";            }        } catch (Exception e) {            logger.error(e.getMessage());            model.addAttribute("result","报名回调失败，请联系管理员");            return "/h5/error";        }        model.addAttribute("tomyijob",true);        return "/h5/qz/index/personalInform";    }    /**     * 初始化我的职位数据     * @param id 职位ID     * @param position 职位     * @return 操作结果对象     */    @RequestMapping(value = "/h5/zp/initMyPosition/{id}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result initMyPosition(@PathVariable String id,@RequestBody Position position){        Result result = new Result();        //参数填充        QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());        queryParam.put("isDeleted" ,false);        queryParam.put("type",1);        queryParam.put("open",11);        Map map = new HashMap();        //查询工作类别数据        map.put("workType",huntingtypeService.findAllType(queryParam));        try {            //Enterpriseauthen enterpriseauthen = enterpriseauthenService.one(new QueryParam("userID",IJobSecurityUtils.getLoginUserId()));            Personalauthen personalauthen = personalauthenService.one(new QueryParam("userID",IJobSecurityUtils.getLoginUserId()));            /*if (enterpriseauthen == null){                result.listData(new Position());                result.put("501","尚未进行实名认证！");                return result;            }*/            if (personalauthen == null  || StringUtils.isEmptyString(personalauthen.getPersonIDCard()) || StringUtils.isEmptyString(personalauthen.getPersonIDCardJustOriginal())){                result.listData(new Position());                result.put("501","尚未进行个人实名认证！");                return result;            }            if(personalauthen.getStatus()==null||personalauthen.getStatus()==2){                result.listData(new Position());                result.put("502","实名认证尚未通过，请重新实名！");                return result;            }            if(personalauthen.getStatus()==0){                result.listData(new Position());                result.put("503","实名认证还在审核中！");                return result;            }            if(IJobSecurityUtils.getSession().getAttribute("PositionTemp") == null){                //判断id 是否为0 或者为 未定义                if ("0".equals(id) || "undefined".equals(id)){                   /* //查询模版数据                    Position positionTemp = positionService.one(queryParam);                    //当模板数据不为空                    if (positionTemp != null){                        positionTemp.setWorkDate("");                        position = positionTemp;                        *//*if(position.getDailySalary() != null && position.getRecruitsSum() != null){                            Double tempRec = Double.parseDouble(position.getRecruitsSum().toString());                            Double tempDai = position.getDailySalary().doubleValue();                            Double tempSumPrice = tempRec * tempDai * 0.25 ;                            BigDecimal tempLiq = new BigDecimal(tempSumPrice);                            position.setLiquidatedDamages(tempLiq);                        }*//*//                        position.setLiquidatedDamages(position.getLiquidatedDamages()!=null?position.getLiquidatedDamages():BigDecimal.TEN);                    }else {//否则 创建一个position 对象*/                        position = new Position();                        position.setSettlement(1);                        position.setSexRequirements(2);                        position.setSalaryType(2);                        position.setRecruitsSum(1);                        position.setContacts(personalauthen.getRealName());                        position.setContactNumber(personalauthen.getPersonPhoneNumber());                    /*}*/                    //设置类别                    position.setType(false);                    //设置初始ID                    position.setId(null);                    position.setLiquidatedDamages(null);                }else{                    position = positionService.getInitPosition(id);//                    Double tempRec = Double.parseDouble(position.getPersonNumDay().toString());//                    Double tempDai = position.getDailySalary().doubleValue();//                    Double tempSumPrice = tempRec * tempDai * 0.25 ;//                    BigDecimal tempLiq = new BigDecimal(tempSumPrice);//                    position.setLiquidatedDamages(tempLiq);                    position.setLiquidatedDamages(position.getLiquidatedDamages()!=null?position.getLiquidatedDamages():null);                }                IJobSecurityUtils.getSession().setAttribute("PositionTemp",position);            }else{                position = (Position)IJobSecurityUtils.getSession().getAttribute("PositionTemp");            }            map.put("position",position);            Position tempPosition = positionService.one(queryParam);            if( tempPosition != null){                map.put("positionTempTitle", tempPosition.getTitle());            }            result.listData(map);        }catch (Exception e){            e.printStackTrace();            result.put("500","服务器繁忙，请稍后再试！");        }        return result;    }    @RequestMapping(value = "/savePositionObj" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result savePositionObj(@RequestBody Position position){        Result result = new Result();        QueryParam queryParam = new QueryParam();        try{            if (position != null){                if(position.getId() != null || "".equals(position.getId())){                    if (position.getOpen() == 4){                        position.setId(null);                        position.setOpen(1);                        position.setChageMoney(position.getPersonNumDay() * position.getLiquidatedDamages().doubleValue());                    }else{                        queryParam.put("userID", IJobSecurityUtils.getLoginUserId());                        queryParam.put("positionID",position.getId());                        BigDecimal pay = positionService.getBondMoneyByPosition(queryParam);                        if(pay != null&&pay.compareTo(position.getLiquidatedDamages().multiply(new BigDecimal(position.getPersonNumDay())))<0){                            position.setOpen(1);                        }else{                            position.setOpen(2);                        }                    }                    //将 String 类型 转换成 Date 类型                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");                    position.setSetDate(sdf.parse(position.getSetDateStr()));                }else{                    position.setOpen(1);                }            }            IJobSecurityUtils.getSession().setAttribute("PositionTemp",null);            position.setUserID(IJobSecurityUtils.getLoginUserId());            position.setType(false);            Position oldPosition = positionService.get(position.getId());            if (oldPosition != null) {                if(oldPosition.getPersonNumDay() != position.getPersonNumDay() || oldPosition.getLiquidatedDamages().compareTo(position.getLiquidatedDamages()) != 0){                    position.setChageMoney(position.getPersonNumDay() * position.getLiquidatedDamages().doubleValue());                }                if (oldPosition.getOpen() == 1){                    position.setChageMoney(position.getPersonNumDay() * position.getLiquidatedDamages().doubleValue());                }                if(oldPosition.getPersonNumDay()>position.getPersonNumDay()){                    result.put("402","招聘人数不能降低。");                    return result;                }                if(oldPosition.getLiquidatedDamages().compareTo(position.getLiquidatedDamages())>0){                    result.put("402","招聘保证金不能降低。");                    return result;                }            }            if (position.getId() != null && !"".equals(position.getId()) ){                labelService.deleteLabelForPosition(position.getId());            }            queryParam.clear();            queryParam.put("userID",IJobSecurityUtils.getLoginUserId());            queryParam.put("isDeleted",false);            EnterpriseVIP enterpriseVIP = enterpriseVIPService.one(queryParam);            if(true || enterpriseVIP != null){  //这里改成人人都是VIP ，都可以不要保证金的，曾经老板引以为傲的卖点，现在成为绊脚石了，人啊，就是不能太自信了，不然打脸会很快的。                position.setOpen(2);                position.setPublishTime(new Date());                position.setIsVip(true);            }else{                position.setIsVip(false);            }            if(position.getRecruitEndTime()!=null){                position.setRecruitEndTime(new Date(position.getRecruitEndTime().getTime()+16*3600000-1000));            }            if(position.getRecruitStartTime()!=null){                position.setRecruitStartTime(new Date(position.getRecruitStartTime().getTime()-8*3600000));            }            /*boolean falg = false ;            Grouplist grouplist = new Grouplist();            if(position.getPublishTime()!= null){                //创建职位聊天群                if(StringUtils.isEmpty(position.getId())){                    grouplist.setGroupName(position.getTitle());                    grouplist.setUserID(IJobSecurityUtils.getLoginUserId());                    grouplist.setUserType(1);                    grouplist.setUserNickName(IJobSecurityUtils.getLoginUser().getNickName());                    grouplist.setId("group_"+UUIDGenerator.randomUUID());                    grouplist.setGroupID("group_"+UUIDGenerator.randomUUID());                    falg = true;                }else {                    grouplist.setGroupName(position.getTitle());                }            }*/            //修改招聘人数json  如果old为空则为新增许修噶，如果招聘人数不一样也需要修改          /*  if(oldPosition==null ){                Integer num = position.getPersonNumDay();                String datejson = position.getWorkDate().replaceAll("true",num.toString());                position.setWorkDate(datejson);            }else {                Integer addnum = position.getPersonNumDay()-oldPosition.getPersonNumDay();                String datejson = DateUtils.updateDateNum(oldPosition.getWorkDate(),addnum);                position.setWorkDate(datejson);            }*/            Integer num = position.getPersonNumDay();            String datejson = position.getWorkDate().replaceAll("true",num.toString());            position.setWorkDate(datejson);            position.setRecruitsSum(position.getPersonNumDay()*position.getWorkDayNum());           /* if(DictCacheService.Site.equals("www.jianzhipt.com")){                position.setLiquidatedDamages(new BigDecimal(0.25));            }*/            positionService.persistenceAndChild(position);           /* if(position.getPublishTime() != null){                if (falg){                    grouplist.setPositionID(position.getId());                    grouplistService.add(grouplist);                }else {                    grouplist.setPositionID(position.getId());                    grouplistService.updateGroupNameTitleByPosition(grouplist);                }            }*/            //推送公众号            workNumberService.pushToWorkNumber(position);            result.listData(position);            if(position.getOpen()==2 && Boolean.FALSE==position.getType()){ //如果是发布职位，则通知每个银                positionService.noticeEverybody(position);            }        }catch (Exception e){            e.printStackTrace();            result.put("500","服务器繁忙");        }        return result;    }    @RequestMapping(value = "/setToSession" ,method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result setToSession(@RequestBody Position position){        Result result = new Result();        try {            if(!"".equals(position.getSetDateStr()) && position.getSetDateStr()!= null){                //将 String 类型 转换成 Date 类型                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");                position.setSetDate(sdf.parse(position.getSetDateStr()));            }            IJobSecurityUtils.getSession().setAttribute("PositionTemp",position);        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","服务器繁忙");        }        return result;    }    /**     * 初始化职位模版数据     * @param id 职位ID     * @param position 职位     * @return 操作结果对象     */    @RequestMapping(value = "/h5/zp/initMyPositionTemp/{id}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result initMyPositionTemp(@PathVariable String id,@RequestBody Position position){        Result result = new Result();        //参数填充        QueryParam queryParam = new QueryParam("userID",IJobSecurityUtils.getLoginUserId());        queryParam.put("isDeleted" ,false);        Map map = new HashMap();        //查询工作类别数据        map.put("workType",huntingtypeService.findAllType(queryParam));        try {            Enterpriseauthen enterpriseauthen = enterpriseauthenService.one(new QueryParam("userID",IJobSecurityUtils.getLoginUserId()));            Personalauthen personalauthen = personalauthenService.one(new QueryParam("userID",IJobSecurityUtils.getLoginUserId()));            if(IJobSecurityUtils.getSession().getAttribute("PositionTemp") == null){                //判断id 是否为0 或者为 未定义                if ("0".equals(id) || "undefined".equals(id)){                    //否则 创建一个position 对象                    position = new Position();                    position.setSettlement(1);                    position.setSexRequirements(2);                    position.setSalaryType(2);                    position.setRecruitsSum(1);                    if (enterpriseauthen != null){                        position.setContacts(enterpriseauthen.getAdminName());                        position.setContactNumber(enterpriseauthen.getAdminPhoneNumber());                    }else{                        position.setContacts(personalauthen.getRealName());                        position.setContactNumber(personalauthen.getPersonPhoneNumber());                    }                    //设置初始ID                    position.setId(null);                }else{                    position = positionService.getInitPosition(id);                }            }else{                position = (Position)IJobSecurityUtils.getSession().getAttribute("PositionTemp");            }            map.put("position",position);            result.listData(map);        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","服务器繁忙，请稍后再试！");        }        return result;    }    /**     * 保存职位模版数据     * @param position     * @return     */    @RequestMapping(value = "/savePositionTemp",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result savePositionTemp(@RequestBody Position position){        Result result = new Result();        try {            //设置类别            position.setType(true);            if(position.getOpen() == 11){                positionService.updatePositionTempDefault(IJobSecurityUtils.getLoginUserId());            }            position.setUserID(IJobSecurityUtils.getLoginUserId());            //将 String 类型 转换成 Date 类型            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");            position.setSetDate(sdf.parse(position.getSetDateStr()));            positionService.persistenceAndChild(position);        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","服务器繁忙");        }        return result;    }    @RequestMapping(value = "/selectYiJieSuan/{positionID}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result selectYiJieSuan(@PathVariable String positionID){        Result result = new Result();        try {            Map map = new HashMap();            List<Map> list = beenrecruitedService.selectYiJieSuan(positionID);            map.put("sum",list.size());            map.put("list",list);            double count = 0;            for (int i = 0 ; i < list.size() ; i++){                count += Double.parseDouble(list.get(i).get("settlementSum").toString());            }            map.put("count",count);            result.listData(map);        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","服务器繁忙");        }        return result;    }    @RequestMapping(value = "/selectPositionForChat/{positionID}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result selectPositionForChat(@PathVariable String positionID){        Result result = new Result();        try {            result.listData(positionService.selectPositionForChat(positionID));        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","服务器繁忙");        }        return result;    }    @RequestMapping(value = "/h5/qz/checkPosition",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result checkPosition(@RequestBody QueryParam queryParam){        Result result = new Result();        Map resultMap = new HashMap();        try {            if(queryParam.getCondition().get("forwardUser")!=null){                Forward forward = forwardService.checkPosition(queryParam);                if (forward!=null){                    resultMap.put("Forward",forward);                }            }            resultMap.put("shareUser",IJobSecurityUtils.getLoginUserId());            result.setData(resultMap);        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","服务器繁忙！");        }        return result;    }    @RequestMapping(value = "/h5/qz/checkRedPacket",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result checkRedPacket(@RequestBody QueryParam queryParam){        Result result = new Result();        Map resultMap = new HashMap();        try {            if(queryParam.getCondition().get("forwardId")!=null){                Forward forward = forwardService.get(queryParam.getCondition().get("forwardId").toString());                if (forward!=null){                    resultMap.put("Forward",forward);                }            }            resultMap.put("shareUser",IJobSecurityUtils.getLoginUserId());            result.setData(resultMap);        }catch (Exception e){            logger.error(e.getMessage());            result.put("500","服务器繁忙！");        }        return result;    }    @RequestMapping(value = "/h5/qz/checkIndemnity",method = RequestMethod.GET ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result checkIndemnity(){        Result result = new Result();        try {            Indemnity indemnity = indemnityService.getIndemnityByUserID(IJobSecurityUtils.getLoginUserId());            /*if(indemnity!=null){                Position position = positionService.get(indemnity.getPositionID());                indemnity.setTitle(position.getTitle());                result.setData(indemnity);            }*/            result.setData(indemnity);        } catch (Exception e) {            result.error("数据查询错误");            e.printStackTrace();        }        return result;    }    @RequestMapping(value = "/indemnityCallback/{wxorderID}",method = RequestMethod.GET ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result indemnityCallback(@PathVariable String wxorderID){        Result result = new Result();        try {            //调用之前还是要检查一下，不能你说修改为已交保证金就交吧            Wxorder wxorder = wxorderService.get(wxorderID);            if(wxorder!=null){                if(wxorder.getStatus()==3){                    indemnityService.indemnityCallback(wxorder);                }else{                    result.error("请缴纳违约金");                }            }        } catch (Exception e) {            try {                weChatService.refundOrder(wxorderID);            } catch (Exception e1) {                e1.printStackTrace();            }            logger.error(e.getMessage());            result.error("赔付违约金失败");        }        return result;    }    /**     * 查询需要审核的职位。     * @param queryParam     * @return     */    @ResponseBody    @RequestMapping(value = "/getSHPosition/{lng}/{lat}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    public Result getSHPosition(@RequestBody QueryParam queryParam,@PathVariable String lng,@PathVariable String lat){        Result result = new Result();        try {            SpatialContext geo = SpatialContext.GEO;            List<WorkPosition> workPositions = workPositionService.getSHPosition(queryParam);            for (WorkPosition workPosition : workPositions){                try {                    double distance = geo.calcDistance(geo.makePoint(Double.parseDouble(lng), Double.parseDouble(lat)),geo.makePoint(workPosition.getPositionSH().getWorkPlace().getLongitude().doubleValue(), workPosition.getPositionSH().getWorkPlace().getLatitude().doubleValue()))                            * DistanceUtils.DEG_TO_KM;                    workPosition.getPositionSH().getWorkPlace().setDistance(Double.parseDouble(String .format("%.2f",distance)));                }catch (Exception e){                    logger.error(e.getMessage());                    continue;                }            }            result.listData(workPositions);        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     * 获得工作号关联的职位     * @param id     * @return     */    @RequestMapping(value="/getWorkPosition/{id}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getWorkPosition(@PathVariable String id){        Result result = new Result();        try {            result.listData(workPositionService.get(id));        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙!");        }        return result;    }    /**     * 审核职位     * @param status     * @param id     * @return     */    @ResponseBody    @RequestMapping(value="/audit/{status}/{id}",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    public Result audit(@PathVariable Integer status , @PathVariable String id){        Result result = new Result();        try {            WorkPosition workPosition = workPositionService.get(id);            workPosition.setStatus(status);            workPositionService.update(workPosition);            QueryParam queryParam = new QueryParam();            queryParam.put("refID",workPosition.getId());            WorkList workList  = workListService.one(queryParam);            workList.setStatus(status);            workList.setAuditor(IJobSecurityUtils.getLoginUserId());            workListService.update(workList);        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙！");        }        return result ;    }    /**     * 查看是否存在待审核数据。     * @return     */    @RequestMapping(value="/hasDSHPosition",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result hasDSHPosition(){        Result result = new Result();        try {            result.setData(positionService.workNumberDSHPositionCount(IJobSecurityUtils.getLoginUser().getInformation().getLastWorkNumber()));        }catch (Exception e){            logger.error(e.getMessage());        }        return result ;    }    /**     * 查询用户工作过的职位和职位ID     * @return     */    @RequestMapping(value="/getPositionList",method = RequestMethod.POST ,produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result getPositionList(){        Result result = new Result();        try {            result.listData(positionService.getPositionList(IJobSecurityUtils.getLoginUserId()));        }catch (Exception e){            logger.error(e.getMessage());            result.error("服务器繁忙");        }        return result ;    }}