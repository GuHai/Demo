package com.yskj.api;import com.yskj.controller.base.BaseController;import com.yskj.models.*;import com.yskj.service.ApproveService;import com.yskj.service.CardTicketService;import com.yskj.service.MycardService;import com.yskj.utils.IJobSecurityUtils;import com.yskj.utils.Result;import com.yskj.utils.StringUtils;import org.apache.shiro.authz.annotation.RequiresPermissions;import org.apache.shiro.util.CollectionUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.Date;import java.util.List;@Controller@RequestMapping(value = "/api/ApiPromotionController")public class ApiPromotionController extends BaseController{	@Autowired	private ApproveService approveService;	@Autowired    private CardTicketService cardTicketService;	@Autowired    private MycardService mycardService;	private final static Logger logger = LoggerFactory.getLogger(ApiPromotionController.class);	 public ApproveService getService() {         return this.approveService;     }	 /**     * 页面     * @return String     */    @RequiresPermissions("Approve")    @RequestMapping(value = "",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String index(Model model){        return "approve";    }    @RequestMapping(value = "/coupon",method = RequestMethod.GET, produces = {"text/html; charset=utf-8"})    public String coupon(Model model){        return "/h5/coupon/coupon";    }    /**     *新增     * @param approve     * @return Result     */    @RequestMapping(value = "/add", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result add(Approve approve ){         return super.add(approve);    }    /**     * 删除     * @param approve     * @return Result     */    @RequestMapping(value = "/delete", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result delete(Approve approve ){        return super.delete(approve);    }     /**     * 修改     * @param approve     * @return Result     */    @RequestMapping(value = "/update", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result update(Approve approve ){        return super.update(approve);    }    /**     * 查询页面     * @param pageParam     * @return Result     */    @RequestMapping(value = "/findPage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findPage(@RequestBody PageParam pageParam ){       return super.findPage(pageParam);    }     /**     * 查询集合     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findList(@RequestBody QueryParam queryParam ){        return super.findList(queryParam);    }    @RequestMapping(value = "/cardList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result cardList(@RequestBody QueryParam queryParam ){        Result result = new Result();        try{            List<CardTicket> list =  cardTicketService.findList(new QueryParam("version",1));            List<Mycard> mycards  = mycardService.findList(new QueryParam("createBy", IJobSecurityUtils.getLoginUserId()));            if(!CollectionUtils.isEmpty(mycards)){                for(CardTicket cardTicket : list){                    for(Mycard mycard : mycards){                        if(cardTicket.getId().equals(mycard.getCardId())){                            cardTicket.setUsed(Boolean.TRUE);                            break;                        }                    }                }            }            return super.getObject2List(list);        }catch (Exception e){            e.printStackTrace();            result.error("获取数据错误");        }        return result;    }    @RequestMapping(value = "/myCardList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result myCardList(@RequestBody QueryParam queryParam ){        Result result = new Result();        try{            return super.getObject2List(mycardService.findList(new QueryParam("createBy", IJobSecurityUtils.getLoginUserId())));        }catch (Exception e){            e.printStackTrace();            result.error("获取数据错误");        }        return result;    }    @RequestMapping(value = "/receivingCards", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result receivingCards(@RequestBody CardTicket cardTicket ){        Result result = new Result();        result.setMsg("领取成功");        try{            Approve approve = approveService.one(new QueryParam("unionid",IJobSecurityUtils.getLoginUser().getUnionid()));            if(approve!=null){                if(StringUtils.isNotEmptyString(approve.getCardId())){                    result.error("新人礼只能领取一张优惠券");                }else{                    Mycard mycard  =  mycardService.one(new QueryParam("cardId",cardTicket.getId()));                    if(mycard!=null){                        result.error("你已经领取了此券,不能重复领取");                    }else{                        cardTicket = cardTicketService.get(cardTicket.getId());                        mycard = new Mycard();                        mycard.setCardId(cardTicket.getId());                        mycard.setFlag(Boolean.FALSE);                        mycard.setCode(mycardService.nextCode(cardTicket.getSn()));                        mycard.setStart(new Date());                        mycard.setEnd(new Date(cardTicket.getExpiryDate()*24*3600000+mycard.getStart().getTime()));                        approve.setCardId(cardTicket.getId());                        approveService.update(approve);                        mycardService.add(mycard);                    }                }            }else{                result.error("请先去小程序领取新人奖");            }        }catch (Exception e){            e.printStackTrace();            result.error("获取数据错误");        }        return result;    }    /**    * 模糊查询页面    * @param pageParam    * @return Result    */    @RequestMapping(value = "/findLikePage", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikePage(@RequestBody PageParam pageParam ){         return super.findLikePage(pageParam);    }    /**     * 查询集合，模糊查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/findLikeList", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result findLikeList(@RequestBody QueryParam queryParam ){        return super.findLikeList(queryParam);    }     /**     * 唯一查询     * @param queryParam     * @return Result     */    @RequestMapping(value = "/one", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result one(@RequestBody QueryParam queryParam ){        return super.one(queryParam);    }    /**     * 唯一查询通过ID     * @param id     * @return Result     */    @RequestMapping(value = "/get", method = RequestMethod.POST, produces = {"application/json; charset=utf-8"})    @ResponseBody    public Result get(String id ){        return super.get(id);    }}